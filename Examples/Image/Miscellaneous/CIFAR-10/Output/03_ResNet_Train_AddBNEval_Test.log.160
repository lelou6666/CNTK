-------------------------------------------------------------------
Build info: 

		Built time: Jan 12 2016 14:46:20
		Last modified date: Mon Jan 11 11:39:54 2016
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		Build Branch: 
		Build SHA1: 
		Built by alexeyk on z840-01           
		Build Path: C:\src\cntk\Source\CNTK\
-------------------------------------------------------------------
running on z840-01 at 2016/01/14 10:36:01
command line: 
..\..\..\..\x64\Release\CNTK.exe configFile=03_ResNet.config 

>>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros=$ConfigDir$/Macros.ndl
precision=float
deviceId=Auto
prefetch=true
parallelTrain=false
command=Train:AddBNEval:Test
stderr=$OutputDir$/03_ResNet
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = $ConfigDir$/16to32.txt
Proj32to64Filename = $ConfigDir$/32to64.txt
Train=[
    action=train
    modelPath=$ModelDir$/03_ResNet
     NDLNetworkBuilder=[
        networkDescription=$ConfigDir$/03_ResNet.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType=ImageReader
        file=$DataDir$/train_map.txt
        randomize=Auto
        features=[
            width=32
            height=32
            channels=3
            cropType=Random
            cropRatio=0.8
            jitterType=UniRatio
            interpolations=Linear
            meanFile=$ConfigDir$/CIFAR-10_mean.xml
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
AddBNEval=[    
    action=edit
    CurModel=$ModelDir$/03_ResNet
    NewModel=$ModelDir$/03_ResNet.Eval
    editPath=$ConfigDir$/03_ResNet.mel
]
Test=[
    action=test
    modelPath=$ModelDir$/03_ResNet.Eval
    minibatchSize=512
     NDLNetworkBuilder=[
        networkDescription=$ConfigDir$/03_ResNet.ndl
    ]
    reader=[
        readerType=ImageReader
        file=$DataDir$/test_map.txt
        randomize=Auto
        features=[
            width=32
            height=32
            channels=3
            cropType=Center
            cropRatio=1
            jitterType=UniRatio
            interpolations=Linear
            meanFile=$ConfigDir$/CIFAR-10_mean.xml
        ]
        labels=[
            labelDim=10
        ]
    ]    
]

<<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "./Output/Models"
ndlMacros=./Macros.ndl
precision=float
deviceId=Auto
prefetch=true
parallelTrain=false
command=Train:AddBNEval:Test
stderr=./Output/03_ResNet
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = ./16to32.txt
Proj32to64Filename = ./32to64.txt
Train=[
    action=train
    modelPath=./Output/Models/03_ResNet
     NDLNetworkBuilder=[
        networkDescription=./03_ResNet.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType=ImageReader
        file=./train_map.txt
        randomize=Auto
        features=[
            width=32
            height=32
            channels=3
            cropType=Random
            cropRatio=0.8
            jitterType=UniRatio
            interpolations=Linear
            meanFile=./CIFAR-10_mean.xml
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
AddBNEval=[    
    action=edit
    CurModel=./Output/Models/03_ResNet
    NewModel=./Output/Models/03_ResNet.Eval
    editPath=./03_ResNet.mel
]
Test=[
    action=test
    modelPath=./Output/Models/03_ResNet.Eval
    minibatchSize=512
     NDLNetworkBuilder=[
        networkDescription=./03_ResNet.ndl
    ]
    reader=[
        readerType=ImageReader
        file=./test_map.txt
        randomize=Auto
        features=[
            width=32
            height=32
            channels=3
            cropType=Center
            cropRatio=1
            jitterType=UniRatio
            interpolations=Linear
            meanFile=./CIFAR-10_mean.xml
        ]
        labels=[
            labelDim=10
        ]
    ]    
]

<<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ResNet.config:AddBNEval=[    
    action=edit
    CurModel=./Output/Models/03_ResNet
    NewModel=./Output/Models/03_ResNet.Eval
    editPath=./03_ResNet.mel
]

configparameters: 03_ResNet.config:command=Train:AddBNEval:Test
configparameters: 03_ResNet.config:ConfigDir=.
configparameters: 03_ResNet.config:DataDir=.
configparameters: 03_ResNet.config:deviceId=Auto
configparameters: 03_ResNet.config:ModelDir=./Output/Models
configparameters: 03_ResNet.config:ndlMacros=./Macros.ndl
configparameters: 03_ResNet.config:numMBsToShowResult=200
configparameters: 03_ResNet.config:OutputDir=./Output
configparameters: 03_ResNet.config:parallelTrain=false
configparameters: 03_ResNet.config:precision=float
configparameters: 03_ResNet.config:prefetch=true
configparameters: 03_ResNet.config:Proj16to32Filename=./16to32.txt
configparameters: 03_ResNet.config:Proj32to64Filename=./32to64.txt
configparameters: 03_ResNet.config:RootDir=.
configparameters: 03_ResNet.config:stderr=./Output/03_ResNet
configparameters: 03_ResNet.config:Test=[
    action=test
    modelPath=./Output/Models/03_ResNet.Eval
    minibatchSize=512
     NDLNetworkBuilder=[
        networkDescription=./03_ResNet.ndl
    ]
    reader=[
        readerType=ImageReader
        file=./test_map.txt
        randomize=Auto
        features=[
            width=32
            height=32
            channels=3
            cropType=Center
            cropRatio=1
            jitterType=UniRatio
            interpolations=Linear
            meanFile=./CIFAR-10_mean.xml
        ]
        labels=[
            labelDim=10
        ]
    ]    
]

configparameters: 03_ResNet.config:traceLevel=1
configparameters: 03_ResNet.config:Train=[
    action=train
    modelPath=./Output/Models/03_ResNet
     NDLNetworkBuilder=[
        networkDescription=./03_ResNet.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType=ImageReader
        file=./train_map.txt
        randomize=Auto
        features=[
            width=32
            height=32
            channels=3
            cropType=Random
            cropRatio=0.8
            jitterType=UniRatio
            interpolations=Linear
            meanFile=./CIFAR-10_mean.xml
        ]
        labels=[
            labelDim=10
        ]
    ]    
]

<<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
command: Train AddBNEval Test 
precision = float
CNTKModelPath: ./Output/Models/03_ResNet
CNTKCommandTrainInfo: Train : 160
CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 160
CNTKCommandTrainBegin: Train
LockDevice: Locked GPU 0 to test availability.
LockDevice: Unlocked GPU 0 after testing.
LockDevice: Locked GPU 2 to test availability.
LockDevice: Unlocked GPU 2 after testing.
LockDevice: Locked GPU 1 to test availability.
LockDevice: Unlocked GPU 1 after testing.
LockDevice: Locked GPU 0 for exclusive use.
NDLBuilder Using GPU 0
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	Err = ErrorPrediction
	OutputNodes.z = Plus
	CE = CrossEntropyWithSoftmax
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation


Validating for node Err. 187 nodes to process in pass 1.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> Err = ErrorPrediction(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node Err. 78 nodes to process in pass 2.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> Err = ErrorPrediction(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> Err = ErrorPrediction(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

108 out of 187 nodes do not share the minibatch layout with the input data.


Validating for node OutputNodes.z. 185 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]

Validating for node OutputNodes.z. 77 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]

107 out of 185 nodes do not share the minibatch layout with the input data.


Validating for node CE. 187 nodes to process in pass 1.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node CE. 78 nodes to process in pass 2.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

108 out of 187 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

SGD using GPU 0.

Training criterion node(s):
	CE = CrossEntropyWithSoftmax

Evaluation criterion node(s):
	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
No PreCompute nodes found, skipping PreCompute step
Set Max Temp Mem Size For Convolution Nodes to 0 samples.
Starting Epoch 1: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
#NLop10#
Tensor Op: Op 10: 32 x 32 x 16 x 128 x 1 -> 32 x 32 x 16 x 128 x 1
24 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX TITAN X
3 procs  32 warps  2147483647 65535 65535 max grid  on  Quadro K620
14 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX TITAN
Tensor Op: Op 15: 32 x 32 x 16 x 128 x 1 op 32 x 32 x 16 x 128 x 1 -> 32 x 32 x 16 x 128 x 1
 Epoch[ 1 of 160]-Minibatch[   1- 200]: SamplesSeen = 25600; TrainLossPerSample =  1.78511215; EvalErr[0]PerSample = 0.67218750; TotalTime = 15.4090s; SamplesPerSecond = 1661.4
Finished Epoch[ 1 of 160]: [Training Set] TrainLossPerSample = 1.6011882; EvalErrPerSample = 0.59435999; AvgLearningRatePerSample = 0.0078125; EpochTime=26.129
Starting Epoch 2: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 2 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  1.18311264; EvalErr[0]PerSample = 0.42843750; TotalTime = 11.4034s; SamplesPerSecond = 2245.0
Finished Epoch[ 2 of 160]: [Training Set] TrainLossPerSample = 1.1033459; EvalErrPerSample = 0.3969; AvgLearningRatePerSample = 0.0078125; EpochTime=22.1287
Starting Epoch 3: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 3 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.90734154; EvalErr[0]PerSample = 0.32207031; TotalTime = 11.3750s; SamplesPerSecond = 2250.5
Finished Epoch[ 3 of 160]: [Training Set] TrainLossPerSample = 0.86615896; EvalErrPerSample = 0.30719998; AvgLearningRatePerSample = 0.0078125; EpochTime=22.0657
Starting Epoch 4: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 4 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.77141624; EvalErr[0]PerSample = 0.27066406; TotalTime = 11.4567s; SamplesPerSecond = 2234.5
Finished Epoch[ 4 of 160]: [Training Set] TrainLossPerSample = 0.75146842; EvalErrPerSample = 0.26264; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2146
Starting Epoch 5: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 5 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.68756187; EvalErr[0]PerSample = 0.23796875; TotalTime = 11.4042s; SamplesPerSecond = 2244.8
Finished Epoch[ 5 of 160]: [Training Set] TrainLossPerSample = 0.67170274; EvalErrPerSample = 0.23289999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.1571
Starting Epoch 6: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 6 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.61656025; EvalErr[0]PerSample = 0.21398438; TotalTime = 11.4800s; SamplesPerSecond = 2230.0
Finished Epoch[ 6 of 160]: [Training Set] TrainLossPerSample = 0.612014; EvalErrPerSample = 0.21263999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2553
Starting Epoch 7: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 7 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.58124241; EvalErr[0]PerSample = 0.20335938; TotalTime = 11.4640s; SamplesPerSecond = 2233.1
Finished Epoch[ 7 of 160]: [Training Set] TrainLossPerSample = 0.56962705; EvalErrPerSample = 0.19909999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2453
Starting Epoch 8: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 8 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.54073845; EvalErr[0]PerSample = 0.18796875; TotalTime = 11.5047s; SamplesPerSecond = 2225.2
Finished Epoch[ 8 of 160]: [Training Set] TrainLossPerSample = 0.53796959; EvalErrPerSample = 0.18616; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3345
Starting Epoch 9: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 9 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.50834869; EvalErr[0]PerSample = 0.17632813; TotalTime = 11.5167s; SamplesPerSecond = 2222.9
Finished Epoch[ 9 of 160]: [Training Set] TrainLossPerSample = 0.51177925; EvalErrPerSample = 0.17704; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3221
Starting Epoch 10: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[10 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.48615803; EvalErr[0]PerSample = 0.16917969; TotalTime = 11.4815s; SamplesPerSecond = 2229.7
Finished Epoch[10 of 160]: [Training Set] TrainLossPerSample = 0.49343586; EvalErrPerSample = 0.17158; AvgLearningRatePerSample = 0.0078125; EpochTime=22.286
Starting Epoch 11: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[11 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.46868595; EvalErr[0]PerSample = 0.16312500; TotalTime = 11.4115s; SamplesPerSecond = 2243.4
Finished Epoch[11 of 160]: [Training Set] TrainLossPerSample = 0.46725979; EvalErrPerSample = 0.16214; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2195
Starting Epoch 12: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[12 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.45617180; EvalErr[0]PerSample = 0.15531250; TotalTime = 11.4316s; SamplesPerSecond = 2239.4
Finished Epoch[12 of 160]: [Training Set] TrainLossPerSample = 0.44944596; EvalErrPerSample = 0.15497999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2204
Starting Epoch 13: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[13 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.43442238; EvalErr[0]PerSample = 0.15031250; TotalTime = 11.5970s; SamplesPerSecond = 2207.5
Finished Epoch[13 of 160]: [Training Set] TrainLossPerSample = 0.43854889; EvalErrPerSample = 0.15235999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.4304
Starting Epoch 14: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[14 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.41474213; EvalErr[0]PerSample = 0.14265625; TotalTime = 11.5551s; SamplesPerSecond = 2215.5
Finished Epoch[14 of 160]: [Training Set] TrainLossPerSample = 0.42394838; EvalErrPerSample = 0.14659999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3929
Starting Epoch 15: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[15 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.40827648; EvalErr[0]PerSample = 0.14167969; TotalTime = 11.5593s; SamplesPerSecond = 2214.7
Finished Epoch[15 of 160]: [Training Set] TrainLossPerSample = 0.40738714; EvalErrPerSample = 0.14126; AvgLearningRatePerSample = 0.0078125; EpochTime=22.404
Starting Epoch 16: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[16 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.39572418; EvalErr[0]PerSample = 0.13765625; TotalTime = 11.6490s; SamplesPerSecond = 2197.6
Finished Epoch[16 of 160]: [Training Set] TrainLossPerSample = 0.4007735; EvalErrPerSample = 0.13798; AvgLearningRatePerSample = 0.0078125; EpochTime=22.4156
Starting Epoch 17: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[17 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.38931370; EvalErr[0]PerSample = 0.13757813; TotalTime = 11.4136s; SamplesPerSecond = 2242.9
Finished Epoch[17 of 160]: [Training Set] TrainLossPerSample = 0.39249194; EvalErrPerSample = 0.13716; AvgLearningRatePerSample = 0.0078125; EpochTime=22.1748
Starting Epoch 18: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[18 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.37350758; EvalErr[0]PerSample = 0.12980469; TotalTime = 11.5431s; SamplesPerSecond = 2217.8
Finished Epoch[18 of 160]: [Training Set] TrainLossPerSample = 0.37985951; EvalErrPerSample = 0.13271999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3177
Starting Epoch 19: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[19 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.37046688; EvalErr[0]PerSample = 0.12742187; TotalTime = 11.4904s; SamplesPerSecond = 2228.0
Finished Epoch[19 of 160]: [Training Set] TrainLossPerSample = 0.37240577; EvalErrPerSample = 0.12842; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2594
Starting Epoch 20: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[20 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.36126266; EvalErr[0]PerSample = 0.12656250; TotalTime = 11.5121s; SamplesPerSecond = 2223.7
Finished Epoch[20 of 160]: [Training Set] TrainLossPerSample = 0.36667159; EvalErrPerSample = 0.12833999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2756
Starting Epoch 21: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[21 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.36016537; EvalErr[0]PerSample = 0.12242188; TotalTime = 11.5126s; SamplesPerSecond = 2223.7
Finished Epoch[21 of 160]: [Training Set] TrainLossPerSample = 0.35836998; EvalErrPerSample = 0.12233999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2811
Starting Epoch 22: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[22 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.34188179; EvalErr[0]PerSample = 0.11910156; TotalTime = 11.5167s; SamplesPerSecond = 2222.9
Finished Epoch[22 of 160]: [Training Set] TrainLossPerSample = 0.34598714; EvalErrPerSample = 0.12013999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3214
Starting Epoch 23: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[23 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.34518520; EvalErr[0]PerSample = 0.11894531; TotalTime = 11.5177s; SamplesPerSecond = 2222.7
Finished Epoch[23 of 160]: [Training Set] TrainLossPerSample = 0.34407225; EvalErrPerSample = 0.11892; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3061
Starting Epoch 24: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[24 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.33347424; EvalErr[0]PerSample = 0.11660156; TotalTime = 11.5769s; SamplesPerSecond = 2211.3
Finished Epoch[24 of 160]: [Training Set] TrainLossPerSample = 0.34192094; EvalErrPerSample = 0.11848; AvgLearningRatePerSample = 0.0078125; EpochTime=22.368
Starting Epoch 25: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[25 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.33844280; EvalErr[0]PerSample = 0.11648438; TotalTime = 11.5529s; SamplesPerSecond = 2215.9
Finished Epoch[25 of 160]: [Training Set] TrainLossPerSample = 0.3405562; EvalErrPerSample = 0.11768; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3158
Starting Epoch 26: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[26 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.32573421; EvalErr[0]PerSample = 0.11328125; TotalTime = 11.4885s; SamplesPerSecond = 2228.3
Finished Epoch[26 of 160]: [Training Set] TrainLossPerSample = 0.3283667; EvalErrPerSample = 0.11268; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3241
Starting Epoch 27: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[27 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.32139095; EvalErr[0]PerSample = 0.11300781; TotalTime = 11.5773s; SamplesPerSecond = 2211.2
Finished Epoch[27 of 160]: [Training Set] TrainLossPerSample = 0.32817245; EvalErrPerSample = 0.11406; AvgLearningRatePerSample = 0.0078125; EpochTime=22.345
Starting Epoch 28: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[28 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.31476902; EvalErr[0]PerSample = 0.11074219; TotalTime = 11.4481s; SamplesPerSecond = 2236.2
Finished Epoch[28 of 160]: [Training Set] TrainLossPerSample = 0.32170638; EvalErrPerSample = 0.1133; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2168
Starting Epoch 29: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[29 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.30912992; EvalErr[0]PerSample = 0.10859375; TotalTime = 11.4067s; SamplesPerSecond = 2244.3
Finished Epoch[29 of 160]: [Training Set] TrainLossPerSample = 0.31786552; EvalErrPerSample = 0.11086; AvgLearningRatePerSample = 0.0078125; EpochTime=22.1891
Starting Epoch 30: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[30 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.30547693; EvalErr[0]PerSample = 0.10496094; TotalTime = 11.5656s; SamplesPerSecond = 2213.5
Finished Epoch[30 of 160]: [Training Set] TrainLossPerSample = 0.31253323; EvalErrPerSample = 0.1078; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3465
Starting Epoch 31: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[31 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.30724499; EvalErr[0]PerSample = 0.10769531; TotalTime = 11.5380s; SamplesPerSecond = 2218.8
Finished Epoch[31 of 160]: [Training Set] TrainLossPerSample = 0.31017771; EvalErrPerSample = 0.10802; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3988
Starting Epoch 32: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[32 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.30443895; EvalErr[0]PerSample = 0.10660156; TotalTime = 11.5474s; SamplesPerSecond = 2216.9
Finished Epoch[32 of 160]: [Training Set] TrainLossPerSample = 0.31054172; EvalErrPerSample = 0.10764; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3142
Starting Epoch 33: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[33 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.29248705; EvalErr[0]PerSample = 0.10175781; TotalTime = 11.4051s; SamplesPerSecond = 2244.6
Finished Epoch[33 of 160]: [Training Set] TrainLossPerSample = 0.30296284; EvalErrPerSample = 0.10422; AvgLearningRatePerSample = 0.0078125; EpochTime=22.1968
Starting Epoch 34: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[34 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.30263618; EvalErr[0]PerSample = 0.10550781; TotalTime = 11.5888s; SamplesPerSecond = 2209.0
Finished Epoch[34 of 160]: [Training Set] TrainLossPerSample = 0.30190024; EvalErrPerSample = 0.10473999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.4491
Starting Epoch 35: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[35 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.29659115; EvalErr[0]PerSample = 0.10171875; TotalTime = 11.6140s; SamplesPerSecond = 2204.2
Finished Epoch[35 of 160]: [Training Set] TrainLossPerSample = 0.29864648; EvalErrPerSample = 0.10306; AvgLearningRatePerSample = 0.0078125; EpochTime=22.4411
Starting Epoch 36: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[36 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.28713980; EvalErr[0]PerSample = 0.10027344; TotalTime = 11.5617s; SamplesPerSecond = 2214.2
Finished Epoch[36 of 160]: [Training Set] TrainLossPerSample = 0.29245624; EvalErrPerSample = 0.10234; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3455
Starting Epoch 37: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[37 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.28737648; EvalErr[0]PerSample = 0.09847656; TotalTime = 11.4851s; SamplesPerSecond = 2229.0
Finished Epoch[37 of 160]: [Training Set] TrainLossPerSample = 0.29400381; EvalErrPerSample = 0.10157999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3035
Starting Epoch 38: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[38 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.28604475; EvalErr[0]PerSample = 0.09699219; TotalTime = 11.6237s; SamplesPerSecond = 2202.4
Finished Epoch[38 of 160]: [Training Set] TrainLossPerSample = 0.29055047; EvalErrPerSample = 0.1006; AvgLearningRatePerSample = 0.0078125; EpochTime=22.41
Starting Epoch 39: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[39 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.28677174; EvalErr[0]PerSample = 0.09929688; TotalTime = 11.6037s; SamplesPerSecond = 2206.2
Finished Epoch[39 of 160]: [Training Set] TrainLossPerSample = 0.28853956; EvalErrPerSample = 0.101; AvgLearningRatePerSample = 0.0078125; EpochTime=22.4156
Starting Epoch 40: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[40 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.27731121; EvalErr[0]PerSample = 0.09699219; TotalTime = 11.5688s; SamplesPerSecond = 2212.9
Finished Epoch[40 of 160]: [Training Set] TrainLossPerSample = 0.28800672; EvalErrPerSample = 0.099959999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3445
Starting Epoch 41: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[41 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.28877285; EvalErr[0]PerSample = 0.10156250; TotalTime = 11.5167s; SamplesPerSecond = 2222.9
Finished Epoch[41 of 160]: [Training Set] TrainLossPerSample = 0.28422225; EvalErrPerSample = 0.098719999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.355
Starting Epoch 42: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[42 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.27758221; EvalErr[0]PerSample = 0.09710937; TotalTime = 11.5935s; SamplesPerSecond = 2208.1
Finished Epoch[42 of 160]: [Training Set] TrainLossPerSample = 0.28059965; EvalErrPerSample = 0.097819999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.7852
Starting Epoch 43: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[43 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.27680891; EvalErr[0]PerSample = 0.09644531; TotalTime = 11.6198s; SamplesPerSecond = 2203.1
Finished Epoch[43 of 160]: [Training Set] TrainLossPerSample = 0.28217828; EvalErrPerSample = 0.098200001; AvgLearningRatePerSample = 0.0078125; EpochTime=22.4529
Starting Epoch 44: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[44 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.27107407; EvalErr[0]PerSample = 0.09421875; TotalTime = 11.5929s; SamplesPerSecond = 2208.2
Finished Epoch[44 of 160]: [Training Set] TrainLossPerSample = 0.27688959; EvalErrPerSample = 0.096079998; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3608
Starting Epoch 45: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[45 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.27329311; EvalErr[0]PerSample = 0.09585937; TotalTime = 11.4535s; SamplesPerSecond = 2235.1
Finished Epoch[45 of 160]: [Training Set] TrainLossPerSample = 0.27860796; EvalErrPerSample = 0.097539999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2187
Starting Epoch 46: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[46 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.26291889; EvalErr[0]PerSample = 0.09253906; TotalTime = 11.4315s; SamplesPerSecond = 2239.4
Finished Epoch[46 of 160]: [Training Set] TrainLossPerSample = 0.27177998; EvalErrPerSample = 0.095179997; AvgLearningRatePerSample = 0.0078125; EpochTime=22.1909
Starting Epoch 47: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[47 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.27016382; EvalErr[0]PerSample = 0.09503906; TotalTime = 11.4016s; SamplesPerSecond = 2245.3
Finished Epoch[47 of 160]: [Training Set] TrainLossPerSample = 0.27474955; EvalErrPerSample = 0.096859999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.1576
Starting Epoch 48: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[48 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25722231; EvalErr[0]PerSample = 0.08960938; TotalTime = 11.4404s; SamplesPerSecond = 2237.7
Finished Epoch[48 of 160]: [Training Set] TrainLossPerSample = 0.26707178; EvalErrPerSample = 0.09296; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2165
Starting Epoch 49: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[49 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25658318; EvalErr[0]PerSample = 0.08960938; TotalTime = 11.5004s; SamplesPerSecond = 2226.0
Finished Epoch[49 of 160]: [Training Set] TrainLossPerSample = 0.26653028; EvalErrPerSample = 0.093059994; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2617
Starting Epoch 50: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[50 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.26309399; EvalErr[0]PerSample = 0.09062500; TotalTime = 11.4840s; SamplesPerSecond = 2229.2
Finished Epoch[50 of 160]: [Training Set] TrainLossPerSample = 0.27242121; EvalErrPerSample = 0.094359994; AvgLearningRatePerSample = 0.0078125; EpochTime=22.4308
Starting Epoch 51: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[51 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25116308; EvalErr[0]PerSample = 0.08757813; TotalTime = 11.5958s; SamplesPerSecond = 2207.7
Finished Epoch[51 of 160]: [Training Set] TrainLossPerSample = 0.26714918; EvalErrPerSample = 0.093719997; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3675
Starting Epoch 52: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[52 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25991890; EvalErr[0]PerSample = 0.09207031; TotalTime = 11.4533s; SamplesPerSecond = 2235.2
Finished Epoch[52 of 160]: [Training Set] TrainLossPerSample = 0.2633768; EvalErrPerSample = 0.09268; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3111
Starting Epoch 53: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[53 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25488058; EvalErr[0]PerSample = 0.08957031; TotalTime = 11.5890s; SamplesPerSecond = 2209.0
Finished Epoch[53 of 160]: [Training Set] TrainLossPerSample = 0.26292121; EvalErrPerSample = 0.092160001; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3534
Starting Epoch 54: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[54 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24893934; EvalErr[0]PerSample = 0.08859375; TotalTime = 11.5135s; SamplesPerSecond = 2223.5
Finished Epoch[54 of 160]: [Training Set] TrainLossPerSample = 0.25717214; EvalErrPerSample = 0.090659998; AvgLearningRatePerSample = 0.0078125; EpochTime=22.4264
Starting Epoch 55: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[55 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25861763; EvalErr[0]PerSample = 0.09019531; TotalTime = 11.6295s; SamplesPerSecond = 2201.3
Finished Epoch[55 of 160]: [Training Set] TrainLossPerSample = 0.26373541; EvalErrPerSample = 0.091260001; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3938
Starting Epoch 56: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[56 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25139614; EvalErr[0]PerSample = 0.08546875; TotalTime = 11.5303s; SamplesPerSecond = 2220.2
Finished Epoch[56 of 160]: [Training Set] TrainLossPerSample = 0.25967881; EvalErrPerSample = 0.089499995; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2997
Starting Epoch 57: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[57 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24860460; EvalErr[0]PerSample = 0.08734375; TotalTime = 11.5494s; SamplesPerSecond = 2216.6
Finished Epoch[57 of 160]: [Training Set] TrainLossPerSample = 0.25601548; EvalErrPerSample = 0.090059996; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3412
Starting Epoch 58: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[58 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24636944; EvalErr[0]PerSample = 0.08496094; TotalTime = 11.5079s; SamplesPerSecond = 2224.6
Finished Epoch[58 of 160]: [Training Set] TrainLossPerSample = 0.25675642; EvalErrPerSample = 0.088599995; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3309
Starting Epoch 59: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[59 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25354239; EvalErr[0]PerSample = 0.09003906; TotalTime = 11.5633s; SamplesPerSecond = 2213.9
Finished Epoch[59 of 160]: [Training Set] TrainLossPerSample = 0.25516802; EvalErrPerSample = 0.090879999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3313
Starting Epoch 60: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[60 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24986008; EvalErr[0]PerSample = 0.08527344; TotalTime = 11.4490s; SamplesPerSecond = 2236.0
Finished Epoch[60 of 160]: [Training Set] TrainLossPerSample = 0.25723642; EvalErrPerSample = 0.088979997; AvgLearningRatePerSample = 0.0078125; EpochTime=22.242
Starting Epoch 61: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[61 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24366058; EvalErr[0]PerSample = 0.08671875; TotalTime = 11.5741s; SamplesPerSecond = 2211.8
Finished Epoch[61 of 160]: [Training Set] TrainLossPerSample = 0.25719753; EvalErrPerSample = 0.091239996; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3397
Starting Epoch 62: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[62 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24259378; EvalErr[0]PerSample = 0.08492187; TotalTime = 11.5269s; SamplesPerSecond = 2220.9
Finished Epoch[62 of 160]: [Training Set] TrainLossPerSample = 0.2515817; EvalErrPerSample = 0.088679999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3014
Starting Epoch 63: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[63 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24029449; EvalErr[0]PerSample = 0.08460938; TotalTime = 11.5659s; SamplesPerSecond = 2213.4
Finished Epoch[63 of 160]: [Training Set] TrainLossPerSample = 0.25265002; EvalErrPerSample = 0.088959999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3815
Starting Epoch 64: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[64 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23263992; EvalErr[0]PerSample = 0.08144531; TotalTime = 11.5963s; SamplesPerSecond = 2207.6
Finished Epoch[64 of 160]: [Training Set] TrainLossPerSample = 0.24182168; EvalErrPerSample = 0.084859997; AvgLearningRatePerSample = 0.0078125; EpochTime=22.4068
Starting Epoch 65: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[65 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24372847; EvalErr[0]PerSample = 0.08410156; TotalTime = 11.5519s; SamplesPerSecond = 2216.1
Finished Epoch[65 of 160]: [Training Set] TrainLossPerSample = 0.25128376; EvalErrPerSample = 0.087699994; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3194
Starting Epoch 66: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[66 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23706863; EvalErr[0]PerSample = 0.08332031; TotalTime = 11.5141s; SamplesPerSecond = 2223.4
Finished Epoch[66 of 160]: [Training Set] TrainLossPerSample = 0.2469063; EvalErrPerSample = 0.085879996; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2777
Starting Epoch 67: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[67 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23676601; EvalErr[0]PerSample = 0.08445313; TotalTime = 11.4886s; SamplesPerSecond = 2228.3
Finished Epoch[67 of 160]: [Training Set] TrainLossPerSample = 0.2486082; EvalErrPerSample = 0.087859996; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2538
Starting Epoch 68: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[68 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23655962; EvalErr[0]PerSample = 0.08148437; TotalTime = 11.5050s; SamplesPerSecond = 2225.1
Finished Epoch[68 of 160]: [Training Set] TrainLossPerSample = 0.24334124; EvalErrPerSample = 0.084699996; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2913
Starting Epoch 69: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[69 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23345692; EvalErr[0]PerSample = 0.08085937; TotalTime = 11.5400s; SamplesPerSecond = 2218.4
Finished Epoch[69 of 160]: [Training Set] TrainLossPerSample = 0.241666; EvalErrPerSample = 0.083919995; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3544
Starting Epoch 70: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[70 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23493608; EvalErr[0]PerSample = 0.08160156; TotalTime = 11.5393s; SamplesPerSecond = 2218.5
Finished Epoch[70 of 160]: [Training Set] TrainLossPerSample = 0.24537624; EvalErrPerSample = 0.084799998; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3067
Starting Epoch 71: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[71 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23666447; EvalErr[0]PerSample = 0.08300781; TotalTime = 11.5368s; SamplesPerSecond = 2219.0
Finished Epoch[71 of 160]: [Training Set] TrainLossPerSample = 0.24771863; EvalErrPerSample = 0.086999997; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3618
Starting Epoch 72: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[72 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24186720; EvalErr[0]PerSample = 0.08511719; TotalTime = 11.5608s; SamplesPerSecond = 2214.4
Finished Epoch[72 of 160]: [Training Set] TrainLossPerSample = 0.2442316; EvalErrPerSample = 0.085159995; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3384
Starting Epoch 73: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[73 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23745417; EvalErr[0]PerSample = 0.08406250; TotalTime = 11.5428s; SamplesPerSecond = 2217.8
Finished Epoch[73 of 160]: [Training Set] TrainLossPerSample = 0.24105896; EvalErrPerSample = 0.084639996; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3139
Starting Epoch 74: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[74 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25070684; EvalErr[0]PerSample = 0.08886719; TotalTime = 11.4398s; SamplesPerSecond = 2237.8
Finished Epoch[74 of 160]: [Training Set] TrainLossPerSample = 0.24804311; EvalErrPerSample = 0.087299995; AvgLearningRatePerSample = 0.0078125; EpochTime=22.2443
Starting Epoch 75: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[75 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23875351; EvalErr[0]PerSample = 0.08117188; TotalTime = 11.5714s; SamplesPerSecond = 2212.3
Finished Epoch[75 of 160]: [Training Set] TrainLossPerSample = 0.24082842; EvalErrPerSample = 0.083080001; AvgLearningRatePerSample = 0.0078125; EpochTime=22.366
Starting Epoch 76: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[76 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23140110; EvalErr[0]PerSample = 0.08203125; TotalTime = 11.5559s; SamplesPerSecond = 2215.3
Finished Epoch[76 of 160]: [Training Set] TrainLossPerSample = 0.24258973; EvalErrPerSample = 0.084919997; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3202
Starting Epoch 77: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[77 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23099312; EvalErr[0]PerSample = 0.08105469; TotalTime = 11.5710s; SamplesPerSecond = 2212.4
Finished Epoch[77 of 160]: [Training Set] TrainLossPerSample = 0.24171358; EvalErrPerSample = 0.084399998; AvgLearningRatePerSample = 0.0078125; EpochTime=22.416
Starting Epoch 78: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[78 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.22422340; EvalErr[0]PerSample = 0.07945312; TotalTime = 11.5828s; SamplesPerSecond = 2210.2
Finished Epoch[78 of 160]: [Training Set] TrainLossPerSample = 0.23471047; EvalErrPerSample = 0.083219998; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3526
Starting Epoch 79: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[79 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23049221; EvalErr[0]PerSample = 0.08292969; TotalTime = 11.5700s; SamplesPerSecond = 2212.6
Finished Epoch[79 of 160]: [Training Set] TrainLossPerSample = 0.237709; EvalErrPerSample = 0.083939999; AvgLearningRatePerSample = 0.0078125; EpochTime=22.3438
Starting Epoch 80: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[80 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23512028; EvalErr[0]PerSample = 0.08218750; TotalTime = 11.4967s; SamplesPerSecond = 2226.7
Finished Epoch[80 of 160]: [Training Set] TrainLossPerSample = 0.23986502; EvalErrPerSample = 0.084139995; AvgLearningRatePerSample = 0.0078125; EpochTime=22.32
Starting Epoch 81: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[81 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.18993895; EvalErr[0]PerSample = 0.06554688; TotalTime = 11.5483s; SamplesPerSecond = 2216.8
Finished Epoch[81 of 160]: [Training Set] TrainLossPerSample = 0.16793214; EvalErrPerSample = 0.057559997; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3134
Starting Epoch 82: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[82 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.13101171; EvalErr[0]PerSample = 0.04542969; TotalTime = 11.5430s; SamplesPerSecond = 2217.8
Finished Epoch[82 of 160]: [Training Set] TrainLossPerSample = 0.12739825; EvalErrPerSample = 0.04394; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3113
Starting Epoch 83: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[83 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.11582967; EvalErr[0]PerSample = 0.03949219; TotalTime = 11.5821s; SamplesPerSecond = 2210.3
Finished Epoch[83 of 160]: [Training Set] TrainLossPerSample = 0.11576424; EvalErrPerSample = 0.03926; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.4228
Starting Epoch 84: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[84 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.10656901; EvalErr[0]PerSample = 0.03722656; TotalTime = 11.5453s; SamplesPerSecond = 2217.4
Finished Epoch[84 of 160]: [Training Set] TrainLossPerSample = 0.106635; EvalErrPerSample = 0.03644; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.5034
Starting Epoch 85: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[85 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.09979140; EvalErr[0]PerSample = 0.03359375; TotalTime = 11.4506s; SamplesPerSecond = 2235.7
Finished Epoch[85 of 160]: [Training Set] TrainLossPerSample = 0.10094135; EvalErrPerSample = 0.033980001; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2631
Starting Epoch 86: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[86 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.09689341; EvalErr[0]PerSample = 0.03265625; TotalTime = 11.5657s; SamplesPerSecond = 2213.4
Finished Epoch[86 of 160]: [Training Set] TrainLossPerSample = 0.096568428; EvalErrPerSample = 0.033059999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3286
Starting Epoch 87: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[87 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.09459194; EvalErr[0]PerSample = 0.03140625; TotalTime = 11.4668s; SamplesPerSecond = 2232.5
Finished Epoch[87 of 160]: [Training Set] TrainLossPerSample = 0.09401314; EvalErrPerSample = 0.031119999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2404
Starting Epoch 88: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[88 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.09019656; EvalErr[0]PerSample = 0.02929688; TotalTime = 11.4755s; SamplesPerSecond = 2230.8
Finished Epoch[88 of 160]: [Training Set] TrainLossPerSample = 0.090820439; EvalErrPerSample = 0.030199999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2533
Starting Epoch 89: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[89 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.08303898; EvalErr[0]PerSample = 0.02785156; TotalTime = 11.5285s; SamplesPerSecond = 2220.6
Finished Epoch[89 of 160]: [Training Set] TrainLossPerSample = 0.086739741; EvalErrPerSample = 0.02956; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.307
Starting Epoch 90: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[90 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.08771500; EvalErr[0]PerSample = 0.02984375; TotalTime = 11.5321s; SamplesPerSecond = 2219.9
Finished Epoch[90 of 160]: [Training Set] TrainLossPerSample = 0.087390222; EvalErrPerSample = 0.03018; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3574
Starting Epoch 91: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[91 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.08021155; EvalErr[0]PerSample = 0.02699219; TotalTime = 11.5502s; SamplesPerSecond = 2216.4
Finished Epoch[91 of 160]: [Training Set] TrainLossPerSample = 0.080674298; EvalErrPerSample = 0.027319999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3191
Starting Epoch 92: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[92 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.08322118; EvalErr[0]PerSample = 0.02910156; TotalTime = 11.5210s; SamplesPerSecond = 2222.0
Finished Epoch[92 of 160]: [Training Set] TrainLossPerSample = 0.08106219; EvalErrPerSample = 0.028339999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2938
Starting Epoch 93: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[93 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.08073726; EvalErr[0]PerSample = 0.02789062; TotalTime = 11.3990s; SamplesPerSecond = 2245.8
Finished Epoch[93 of 160]: [Training Set] TrainLossPerSample = 0.079686686; EvalErrPerSample = 0.027419999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2285
Starting Epoch 94: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[94 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.07666363; EvalErr[0]PerSample = 0.02695313; TotalTime = 11.5560s; SamplesPerSecond = 2215.3
Finished Epoch[94 of 160]: [Training Set] TrainLossPerSample = 0.077968039; EvalErrPerSample = 0.027099999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3268
Starting Epoch 95: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[95 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.07550663; EvalErr[0]PerSample = 0.02609375; TotalTime = 11.4795s; SamplesPerSecond = 2230.1
Finished Epoch[95 of 160]: [Training Set] TrainLossPerSample = 0.076805077; EvalErrPerSample = 0.02616; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2683
Starting Epoch 96: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[96 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.07483893; EvalErr[0]PerSample = 0.02652344; TotalTime = 11.4940s; SamplesPerSecond = 2227.3
Finished Epoch[96 of 160]: [Training Set] TrainLossPerSample = 0.073900625; EvalErrPerSample = 0.025839999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2583
Starting Epoch 97: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[97 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.07033884; EvalErr[0]PerSample = 0.02421875; TotalTime = 11.4972s; SamplesPerSecond = 2226.6
Finished Epoch[97 of 160]: [Training Set] TrainLossPerSample = 0.072241709; EvalErrPerSample = 0.025239998; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3373
Starting Epoch 98: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[98 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.07043020; EvalErr[0]PerSample = 0.02421875; TotalTime = 11.5606s; SamplesPerSecond = 2214.4
Finished Epoch[98 of 160]: [Training Set] TrainLossPerSample = 0.070759542; EvalErrPerSample = 0.024279999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.328
Starting Epoch 99: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[99 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.07046758; EvalErr[0]PerSample = 0.02503906; TotalTime = 11.5808s; SamplesPerSecond = 2210.5
Finished Epoch[99 of 160]: [Training Set] TrainLossPerSample = 0.069847755; EvalErrPerSample = 0.024219999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3476
Starting Epoch 100: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[100 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.06165749; EvalErr[0]PerSample = 0.02144531; TotalTime = 11.5168s; SamplesPerSecond = 2222.8
Finished Epoch[100 of 160]: [Training Set] TrainLossPerSample = 0.066228345; EvalErrPerSample = 0.02266; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2882
Starting Epoch 101: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[101 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.06483539; EvalErr[0]PerSample = 0.02242188; TotalTime = 11.5478s; SamplesPerSecond = 2216.9
Finished Epoch[101 of 160]: [Training Set] TrainLossPerSample = 0.066535138; EvalErrPerSample = 0.022839999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.382
Starting Epoch 102: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[102 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.06374743; EvalErr[0]PerSample = 0.02113281; TotalTime = 11.7412s; SamplesPerSecond = 2180.4
Finished Epoch[102 of 160]: [Training Set] TrainLossPerSample = 0.06468109; EvalErrPerSample = 0.021979999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.5325
Starting Epoch 103: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[103 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.06524000; EvalErr[0]PerSample = 0.02261719; TotalTime = 11.5928s; SamplesPerSecond = 2208.3
Finished Epoch[103 of 160]: [Training Set] TrainLossPerSample = 0.065452188; EvalErrPerSample = 0.021879999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3876
Starting Epoch 104: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[104 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.06336018; EvalErr[0]PerSample = 0.02117188; TotalTime = 11.5741s; SamplesPerSecond = 2211.8
Finished Epoch[104 of 160]: [Training Set] TrainLossPerSample = 0.064649269; EvalErrPerSample = 0.021819999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3409
Starting Epoch 105: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[105 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05928923; EvalErr[0]PerSample = 0.02039062; TotalTime = 11.4805s; SamplesPerSecond = 2229.9
Finished Epoch[105 of 160]: [Training Set] TrainLossPerSample = 0.062256567; EvalErrPerSample = 0.021199999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2864
Starting Epoch 106: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[106 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05956097; EvalErr[0]PerSample = 0.02070312; TotalTime = 11.5877s; SamplesPerSecond = 2209.2
Finished Epoch[106 of 160]: [Training Set] TrainLossPerSample = 0.059500545; EvalErrPerSample = 0.02076; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3573
Starting Epoch 107: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[107 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05682479; EvalErr[0]PerSample = 0.01898438; TotalTime = 11.4687s; SamplesPerSecond = 2232.2
Finished Epoch[107 of 160]: [Training Set] TrainLossPerSample = 0.05800005; EvalErrPerSample = 0.019579999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3035
Starting Epoch 108: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[108 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05657757; EvalErr[0]PerSample = 0.01890625; TotalTime = 11.5761s; SamplesPerSecond = 2211.4
Finished Epoch[108 of 160]: [Training Set] TrainLossPerSample = 0.059094436; EvalErrPerSample = 0.02004; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3386
Starting Epoch 109: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[109 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05917750; EvalErr[0]PerSample = 0.01945313; TotalTime = 11.5089s; SamplesPerSecond = 2224.4
Finished Epoch[109 of 160]: [Training Set] TrainLossPerSample = 0.057597388; EvalErrPerSample = 0.01898; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2734
Starting Epoch 110: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[110 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05674717; EvalErr[0]PerSample = 0.01968750; TotalTime = 11.5447s; SamplesPerSecond = 2217.5
Finished Epoch[110 of 160]: [Training Set] TrainLossPerSample = 0.05731637; EvalErrPerSample = 0.019819999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3039
Starting Epoch 111: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[111 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05444533; EvalErr[0]PerSample = 0.01945313; TotalTime = 11.4688s; SamplesPerSecond = 2232.1
Finished Epoch[111 of 160]: [Training Set] TrainLossPerSample = 0.055398725; EvalErrPerSample = 0.01956; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.244
Starting Epoch 112: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[112 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05179993; EvalErr[0]PerSample = 0.01710938; TotalTime = 11.5138s; SamplesPerSecond = 2223.4
Finished Epoch[112 of 160]: [Training Set] TrainLossPerSample = 0.053484067; EvalErrPerSample = 0.018139999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.273
Starting Epoch 113: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[113 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05144035; EvalErr[0]PerSample = 0.01714844; TotalTime = 11.5189s; SamplesPerSecond = 2222.4
Finished Epoch[113 of 160]: [Training Set] TrainLossPerSample = 0.053684823; EvalErrPerSample = 0.018139999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.298
Starting Epoch 114: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[114 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05280342; EvalErr[0]PerSample = 0.01742188; TotalTime = 11.5954s; SamplesPerSecond = 2207.8
Finished Epoch[114 of 160]: [Training Set] TrainLossPerSample = 0.05435824; EvalErrPerSample = 0.0184; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.4052
Starting Epoch 115: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[115 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05222118; EvalErr[0]PerSample = 0.01757813; TotalTime = 11.6020s; SamplesPerSecond = 2206.5
Finished Epoch[115 of 160]: [Training Set] TrainLossPerSample = 0.05275812; EvalErrPerSample = 0.0177; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3742
Starting Epoch 116: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[116 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05418136; EvalErr[0]PerSample = 0.01832031; TotalTime = 11.5462s; SamplesPerSecond = 2217.2
Finished Epoch[116 of 160]: [Training Set] TrainLossPerSample = 0.05442594; EvalErrPerSample = 0.018379999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3169
Starting Epoch 117: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[117 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05089517; EvalErr[0]PerSample = 0.01753906; TotalTime = 11.4854s; SamplesPerSecond = 2228.9
Finished Epoch[117 of 160]: [Training Set] TrainLossPerSample = 0.051556218; EvalErrPerSample = 0.018059999; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.2698
Starting Epoch 118: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[118 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.04923437; EvalErr[0]PerSample = 0.01722656; TotalTime = 11.6094s; SamplesPerSecond = 2205.1
Finished Epoch[118 of 160]: [Training Set] TrainLossPerSample = 0.051423203; EvalErrPerSample = 0.01756; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3705
Starting Epoch 119: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[119 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.04878937; EvalErr[0]PerSample = 0.01687500; TotalTime = 11.5243s; SamplesPerSecond = 2221.4
Finished Epoch[119 of 160]: [Training Set] TrainLossPerSample = 0.049813163; EvalErrPerSample = 0.01692; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3001
Starting Epoch 120: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[120 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.04832996; EvalErr[0]PerSample = 0.01691406; TotalTime = 11.4980s; SamplesPerSecond = 2226.5
Finished Epoch[120 of 160]: [Training Set] TrainLossPerSample = 0.049110278; EvalErrPerSample = 0.01716; AvgLearningRatePerSample = 0.00078125001; EpochTime=22.3303
Starting Epoch 121: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[121 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.04482439; EvalErr[0]PerSample = 0.01488281; TotalTime = 11.5958s; SamplesPerSecond = 2207.7
Finished Epoch[121 of 160]: [Training Set] TrainLossPerSample = 0.043392066; EvalErrPerSample = 0.01438; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.4054
Starting Epoch 122: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[122 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.04098450; EvalErr[0]PerSample = 0.01304687; TotalTime = 11.5422s; SamplesPerSecond = 2217.9
Finished Epoch[122 of 160]: [Training Set] TrainLossPerSample = 0.040084258; EvalErrPerSample = 0.0129; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.4305
Starting Epoch 123: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[123 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03640993; EvalErr[0]PerSample = 0.01175781; TotalTime = 11.5831s; SamplesPerSecond = 2210.1
Finished Epoch[123 of 160]: [Training Set] TrainLossPerSample = 0.03892789; EvalErrPerSample = 0.01236; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3743
Starting Epoch 124: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[124 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03714126; EvalErr[0]PerSample = 0.01171875; TotalTime = 11.5510s; SamplesPerSecond = 2216.3
Finished Epoch[124 of 160]: [Training Set] TrainLossPerSample = 0.038824685; EvalErrPerSample = 0.01272; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3909
Starting Epoch 125: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[125 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03836004; EvalErr[0]PerSample = 0.01242188; TotalTime = 11.5348s; SamplesPerSecond = 2219.4
Finished Epoch[125 of 160]: [Training Set] TrainLossPerSample = 0.03861165; EvalErrPerSample = 0.01212; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2952
Starting Epoch 126: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[126 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03456074; EvalErr[0]PerSample = 0.01113281; TotalTime = 11.5272s; SamplesPerSecond = 2220.8
Finished Epoch[126 of 160]: [Training Set] TrainLossPerSample = 0.035167199; EvalErrPerSample = 0.01126; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2908
Starting Epoch 127: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[127 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03603784; EvalErr[0]PerSample = 0.01101562; TotalTime = 11.3989s; SamplesPerSecond = 2245.8
Finished Epoch[127 of 160]: [Training Set] TrainLossPerSample = 0.035970744; EvalErrPerSample = 0.01098; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.226
Starting Epoch 128: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[128 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03553395; EvalErr[0]PerSample = 0.01175781; TotalTime = 11.5519s; SamplesPerSecond = 2216.1
Finished Epoch[128 of 160]: [Training Set] TrainLossPerSample = 0.035689104; EvalErrPerSample = 0.01156; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3882
Starting Epoch 129: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[129 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03523235; EvalErr[0]PerSample = 0.01109375; TotalTime = 11.5823s; SamplesPerSecond = 2210.3
Finished Epoch[129 of 160]: [Training Set] TrainLossPerSample = 0.036777027; EvalErrPerSample = 0.01176; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3416
Starting Epoch 130: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[130 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03563953; EvalErr[0]PerSample = 0.01058594; TotalTime = 11.4850s; SamplesPerSecond = 2229.0
Finished Epoch[130 of 160]: [Training Set] TrainLossPerSample = 0.034818619; EvalErrPerSample = 0.010559999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2438
Starting Epoch 131: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[131 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03574152; EvalErr[0]PerSample = 0.01187500; TotalTime = 11.4836s; SamplesPerSecond = 2229.3
Finished Epoch[131 of 160]: [Training Set] TrainLossPerSample = 0.035892151; EvalErrPerSample = 0.01174; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2433
Starting Epoch 132: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[132 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03485843; EvalErr[0]PerSample = 0.01152344; TotalTime = 11.4668s; SamplesPerSecond = 2232.5
Finished Epoch[132 of 160]: [Training Set] TrainLossPerSample = 0.035623327; EvalErrPerSample = 0.01148; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2302
Starting Epoch 133: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[133 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03582706; EvalErr[0]PerSample = 0.01058594; TotalTime = 11.4449s; SamplesPerSecond = 2236.8
Finished Epoch[133 of 160]: [Training Set] TrainLossPerSample = 0.035650004; EvalErrPerSample = 0.01076; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2876
Starting Epoch 134: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[134 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03308557; EvalErr[0]PerSample = 0.01031250; TotalTime = 11.5628s; SamplesPerSecond = 2214.0
Finished Epoch[134 of 160]: [Training Set] TrainLossPerSample = 0.034471795; EvalErrPerSample = 0.010679999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3507
Starting Epoch 135: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[135 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03313774; EvalErr[0]PerSample = 0.01011719; TotalTime = 11.5699s; SamplesPerSecond = 2212.6
Finished Epoch[135 of 160]: [Training Set] TrainLossPerSample = 0.03418766; EvalErrPerSample = 0.01052; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.356
Starting Epoch 136: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[136 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03477723; EvalErr[0]PerSample = 0.01121094; TotalTime = 11.5129s; SamplesPerSecond = 2223.6
Finished Epoch[136 of 160]: [Training Set] TrainLossPerSample = 0.0342177; EvalErrPerSample = 0.01064; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2738
Starting Epoch 137: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[137 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03409709; EvalErr[0]PerSample = 0.01007813; TotalTime = 11.4740s; SamplesPerSecond = 2231.1
Finished Epoch[137 of 160]: [Training Set] TrainLossPerSample = 0.034409851; EvalErrPerSample = 0.01076; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2606
Starting Epoch 138: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[138 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03408328; EvalErr[0]PerSample = 0.01019531; TotalTime = 11.6197s; SamplesPerSecond = 2203.1
Finished Epoch[138 of 160]: [Training Set] TrainLossPerSample = 0.03398142; EvalErrPerSample = 0.01034; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.4016
Starting Epoch 139: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[139 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03391739; EvalErr[0]PerSample = 0.01003906; TotalTime = 11.5855s; SamplesPerSecond = 2209.7
Finished Epoch[139 of 160]: [Training Set] TrainLossPerSample = 0.034369528; EvalErrPerSample = 0.0105; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.4288
Starting Epoch 140: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[140 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03432070; EvalErr[0]PerSample = 0.01093750; TotalTime = 11.5739s; SamplesPerSecond = 2211.9
Finished Epoch[140 of 160]: [Training Set] TrainLossPerSample = 0.034433346; EvalErrPerSample = 0.01072; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3479
Starting Epoch 141: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[141 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03326862; EvalErr[0]PerSample = 0.01023438; TotalTime = 11.5483s; SamplesPerSecond = 2216.8
Finished Epoch[141 of 160]: [Training Set] TrainLossPerSample = 0.03355087; EvalErrPerSample = 0.01038; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.326
Starting Epoch 142: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[142 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03197437; EvalErr[0]PerSample = 0.00988281; TotalTime = 11.4156s; SamplesPerSecond = 2242.6
Finished Epoch[142 of 160]: [Training Set] TrainLossPerSample = 0.032701213; EvalErrPerSample = 0.0098000001; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.1816
Starting Epoch 143: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[143 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03477237; EvalErr[0]PerSample = 0.01089844; TotalTime = 11.5553s; SamplesPerSecond = 2215.4
Finished Epoch[143 of 160]: [Training Set] TrainLossPerSample = 0.034088843; EvalErrPerSample = 0.01066; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3259
Starting Epoch 144: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[144 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03017725; EvalErr[0]PerSample = 0.00953125; TotalTime = 11.5897s; SamplesPerSecond = 2208.9
Finished Epoch[144 of 160]: [Training Set] TrainLossPerSample = 0.031698398; EvalErrPerSample = 0.0099999998; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.5923
Starting Epoch 145: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[145 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03448967; EvalErr[0]PerSample = 0.01074219; TotalTime = 11.4235s; SamplesPerSecond = 2241.0
Finished Epoch[145 of 160]: [Training Set] TrainLossPerSample = 0.033083703; EvalErrPerSample = 0.01002; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.1806
Starting Epoch 146: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[146 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03416681; EvalErr[0]PerSample = 0.01136719; TotalTime = 11.3855s; SamplesPerSecond = 2248.5
Finished Epoch[146 of 160]: [Training Set] TrainLossPerSample = 0.034353275; EvalErrPerSample = 0.010799999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.1946
Starting Epoch 147: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[147 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03433434; EvalErr[0]PerSample = 0.01101562; TotalTime = 11.5644s; SamplesPerSecond = 2213.7
Finished Epoch[147 of 160]: [Training Set] TrainLossPerSample = 0.034649722; EvalErrPerSample = 0.011279999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3273
Starting Epoch 148: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[148 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03219655; EvalErr[0]PerSample = 0.00988281; TotalTime = 11.5637s; SamplesPerSecond = 2213.8
Finished Epoch[148 of 160]: [Training Set] TrainLossPerSample = 0.031285692; EvalErrPerSample = 0.0094999997; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3287
Starting Epoch 149: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[149 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03190110; EvalErr[0]PerSample = 0.01046875; TotalTime = 11.4602s; SamplesPerSecond = 2233.8
Finished Epoch[149 of 160]: [Training Set] TrainLossPerSample = 0.031930499; EvalErrPerSample = 0.0101; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2852
Starting Epoch 150: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[150 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03089277; EvalErr[0]PerSample = 0.00921875; TotalTime = 11.5981s; SamplesPerSecond = 2207.3
Finished Epoch[150 of 160]: [Training Set] TrainLossPerSample = 0.031741869; EvalErrPerSample = 0.00954; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.4059
Starting Epoch 151: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[151 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03341821; EvalErr[0]PerSample = 0.01105469; TotalTime = 11.5961s; SamplesPerSecond = 2207.6
Finished Epoch[151 of 160]: [Training Set] TrainLossPerSample = 0.032794204; EvalErrPerSample = 0.01036; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.435
Starting Epoch 152: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[152 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03127065; EvalErr[0]PerSample = 0.00937500; TotalTime = 11.5746s; SamplesPerSecond = 2211.7
Finished Epoch[152 of 160]: [Training Set] TrainLossPerSample = 0.032228082; EvalErrPerSample = 0.0098599996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3883
Starting Epoch 153: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[153 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03200430; EvalErr[0]PerSample = 0.01007813; TotalTime = 11.5357s; SamplesPerSecond = 2219.2
Finished Epoch[153 of 160]: [Training Set] TrainLossPerSample = 0.031472486; EvalErrPerSample = 0.0098999999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2992
Starting Epoch 154: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[154 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03112781; EvalErr[0]PerSample = 0.00890625; TotalTime = 11.4339s; SamplesPerSecond = 2239.0
Finished Epoch[154 of 160]: [Training Set] TrainLossPerSample = 0.030955072; EvalErrPerSample = 0.00954; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.2657
Starting Epoch 155: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[155 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03170617; EvalErr[0]PerSample = 0.00941406; TotalTime = 11.5475s; SamplesPerSecond = 2216.9
Finished Epoch[155 of 160]: [Training Set] TrainLossPerSample = 0.031180983; EvalErrPerSample = 0.0093200002; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3148
Starting Epoch 156: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[156 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.02884187; EvalErr[0]PerSample = 0.00929687; TotalTime = 11.4932s; SamplesPerSecond = 2227.4
Finished Epoch[156 of 160]: [Training Set] TrainLossPerSample = 0.030790305; EvalErrPerSample = 0.0097199995; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3262
Starting Epoch 157: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[157 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03166680; EvalErr[0]PerSample = 0.00992188; TotalTime = 11.6570s; SamplesPerSecond = 2196.1
Finished Epoch[157 of 160]: [Training Set] TrainLossPerSample = 0.031061091; EvalErrPerSample = 0.0094599994; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.4556
Starting Epoch 158: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[158 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03136421; EvalErr[0]PerSample = 0.00906250; TotalTime = 11.5571s; SamplesPerSecond = 2215.1
Finished Epoch[158 of 160]: [Training Set] TrainLossPerSample = 0.029945096; EvalErrPerSample = 0.0084999995; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3185
Starting Epoch 159: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[159 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03113249; EvalErr[0]PerSample = 0.00976563; TotalTime = 11.5817s; SamplesPerSecond = 2210.4
Finished Epoch[159 of 160]: [Training Set] TrainLossPerSample = 0.03114122; EvalErrPerSample = 0.0093599996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.343
Starting Epoch 160: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[160 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03009957; EvalErr[0]PerSample = 0.00886719; TotalTime = 11.5242s; SamplesPerSecond = 2221.4
Finished Epoch[160 of 160]: [Training Set] TrainLossPerSample = 0.03085361; EvalErrPerSample = 0.00942; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=22.3018
CNTKCommandTrainEnd: Train
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.

Post-processing network...

3 roots:
	OutputNodes.z = Plus
	Err = ErrorPrediction
	CE = CrossEntropyWithSoftmax
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation


Validating for node OutputNodes.z. 185 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]

Validating for node OutputNodes.z. 77 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]

107 out of 185 nodes do not share the minibatch layout with the input data.


Validating for node Err. 187 nodes to process in pass 1.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> Err = ErrorPrediction(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node Err. 78 nodes to process in pass 2.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> Err = ErrorPrediction(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> Err = ErrorPrediction(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

108 out of 187 nodes do not share the minibatch layout with the input data.


Validating for node CE. 187 nodes to process in pass 1.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node CE. 78 nodes to process in pass 2.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

108 out of 187 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

Post-processing network...

3 roots:
	OutputNodes.z = Plus
	Err = ErrorPrediction
	CE = CrossEntropyWithSoftmax
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation


Validating for node OutputNodes.z. 185 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]

Validating for node OutputNodes.z. 77 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]

107 out of 185 nodes do not share the minibatch layout with the input data.


Validating for node Err. 187 nodes to process in pass 1.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> Err = ErrorPrediction(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node Err. 78 nodes to process in pass 2.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> Err = ErrorPrediction(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> Err = ErrorPrediction(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

108 out of 187 nodes do not share the minibatch layout with the input data.


Validating for node CE. 187 nodes to process in pass 1.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node CE. 78 nodes to process in pass 2.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [10 [10], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [10 [10], 64]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 [64], 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 [64], 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 [32], 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 [32], 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 [16], 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 [16], 144]
Validating --> conv1.c.W = LearnableParameter -> [16 [16], 27]
Validating --> features = InputValue -> [3072 [32 x 32 x 3], MBSize 0]
Validating --> conv1.c.c = Convolution(conv1.c.W[16, 27], features[3072 [32 x 32 x 3] {W=32, H=3, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> conv1.c.y = BatchNormalization(conv1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.c.sc[16, 1], conv1.c.b[16, 1], conv1.c.m[16, 1], conv1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.c = Convolution(rn1_1.c1.c.W[16, 144], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c1.c.y = BatchNormalization(rn1_1.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c1.c.sc[16, 1], rn1_1.c1.c.b[16, 1], rn1_1.c1.c.m[16, 1], rn1_1.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.c = Convolution(rn1_1.c2.W[16, 144], rn1_1.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_1.c2.y = BatchNormalization(rn1_1.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.c2.sc[16, 1], rn1_1.c2.b[16, 1], rn1_1.c2.m[16, 1], rn1_1.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.p = Plus(rn1_1.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], conv1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.c = Convolution(rn1_2.c1.c.W[16, 144], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c1.c.y = BatchNormalization(rn1_2.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c1.c.sc[16, 1], rn1_2.c1.c.b[16, 1], rn1_2.c1.c.m[16, 1], rn1_2.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.c = Convolution(rn1_2.c2.W[16, 144], rn1_2.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_2.c2.y = BatchNormalization(rn1_2.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.c2.sc[16, 1], rn1_2.c2.b[16, 1], rn1_2.c2.m[16, 1], rn1_2.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.p = Plus(rn1_2.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.c = Convolution(rn1_3.c1.c.W[16, 144], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.c.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c1.c.y = BatchNormalization(rn1_3.c1.c.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c1.c.sc[16, 1], rn1_3.c1.c.b[16, 1], rn1_3.c1.c.m[16, 1], rn1_3.c1.c.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.c = Convolution(rn1_3.c2.W[16, 144], rn1_3.c1.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn1_3.c2.y = BatchNormalization(rn1_3.c2.c[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_3.c2.sc[16, 1], rn1_3.c2.b[16, 1], rn1_3.c2.m[16, 1], rn1_3.c2.isd[16, 1]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.p = Plus(rn1_3.c2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0], rn1_2.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [16384 [32 x 32 x 16], MBSize 0]
Validating --> rn2_1.c1.c.c = Convolution(rn2_1.c1.c.W[32, 144], rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_1.c1.c.y = BatchNormalization(rn2_1.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.c1.c.sc[32, 1], rn2_1.c1.c.b[32, 1], rn2_1.c1.c.m[32, 1], rn2_1.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.c2.c = Convolution(rn2_1.c2.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c2.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c2.y = BatchNormalization(rn2_1.c2.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c2.sc[16, 1], rn2_1.c2.b[16, 1], rn2_1.c2.m[16, 1], rn2_1.c2.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.pool = MaxPooling(rn1_3.y[16384 [32 x 32 x 16] {W=32, H=16, C=32}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.p = Plus(rn2_1.c2.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.pool[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.W = LearnableParameter -> [16 [16], 288]
Validating --> rn2_1.c3.c = Convolution(rn2_1.c3.W[16, 288], rn2_1.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.c3.sc = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.b = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.m = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.isd = LearnableParameter -> [16 [16], 1]
Validating --> rn2_1.c3.y = BatchNormalization(rn2_1.c3.c[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.sc[16, 1], rn2_1.c3.b[16, 1], rn2_1.c3.m[16, 1], rn2_1.c3.isd[16, 1]) -> [4096 [16 x 16 x 16], MBSize 0]
Validating --> rn2_1.r = RowStack(rn2_1.p[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0], rn2_1.c3.y[4096 [16 x 16 x 16] {W=16, H=16, C=16}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.r[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.c = Convolution(rn2_2.c1.c.W[32, 288], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c1.c.y = BatchNormalization(rn2_2.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c1.c.sc[32, 1], rn2_2.c1.c.b[32, 1], rn2_2.c1.c.m[32, 1], rn2_2.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.c = Convolution(rn2_2.c2.W[32, 288], rn2_2.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_2.c2.y = BatchNormalization(rn2_2.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.c2.sc[32, 1], rn2_2.c2.b[32, 1], rn2_2.c2.m[32, 1], rn2_2.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.p = Plus(rn2_2.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.c = Convolution(rn2_3.c1.c.W[32, 288], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.c.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c1.c.y = BatchNormalization(rn2_3.c1.c.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c1.c.sc[32, 1], rn2_3.c1.c.b[32, 1], rn2_3.c1.c.m[32, 1], rn2_3.c1.c.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.c = Convolution(rn2_3.c2.W[32, 288], rn2_3.c1.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn2_3.c2.y = BatchNormalization(rn2_3.c2.c[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_3.c2.sc[32, 1], rn2_3.c2.b[32, 1], rn2_3.c2.m[32, 1], rn2_3.c2.isd[32, 1]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.p = Plus(rn2_3.c2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0], rn2_2.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [8192 [16 x 16 x 32], MBSize 0]
Validating --> rn3_1.c1.c.c = Convolution(rn3_1.c1.c.W[64, 288], rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_1.c1.c.y = BatchNormalization(rn3_1.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.c1.c.sc[64, 1], rn3_1.c1.c.b[64, 1], rn3_1.c1.c.m[64, 1], rn3_1.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.c2.c = Convolution(rn3_1.c2.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c2.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c2.y = BatchNormalization(rn3_1.c2.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c2.sc[32, 1], rn3_1.c2.b[32, 1], rn3_1.c2.m[32, 1], rn3_1.c2.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.pool = MaxPooling(rn2_3.y[8192 [16 x 16 x 32] {W=16, H=32, C=16}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.p = Plus(rn3_1.c2.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.pool[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.W = LearnableParameter -> [32 [32], 576]
Validating --> rn3_1.c3.c = Convolution(rn3_1.c3.W[32, 576], rn3_1.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.c3.sc = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.b = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.m = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.isd = LearnableParameter -> [32 [32], 1]
Validating --> rn3_1.c3.y = BatchNormalization(rn3_1.c3.c[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.sc[32, 1], rn3_1.c3.b[32, 1], rn3_1.c3.m[32, 1], rn3_1.c3.isd[32, 1]) -> [2048 [8 x 8 x 32], MBSize 0]
Validating --> rn3_1.r = RowStack(rn3_1.p[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0], rn3_1.c3.y[2048 [8 x 8 x 32] {W=8, H=32, C=8}, MBSize 0])WARNING: RowStack operation cannot inherit image size information from its child. Image size info is lost.
 -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.r[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.c = Convolution(rn3_2.c1.c.W[64, 576], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c1.c.y = BatchNormalization(rn3_2.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c1.c.sc[64, 1], rn3_2.c1.c.b[64, 1], rn3_2.c1.c.m[64, 1], rn3_2.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.c = Convolution(rn3_2.c2.W[64, 576], rn3_2.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_2.c2.y = BatchNormalization(rn3_2.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.c2.sc[64, 1], rn3_2.c2.b[64, 1], rn3_2.c2.m[64, 1], rn3_2.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.p = Plus(rn3_2.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.c = Convolution(rn3_3.c1.c.W[64, 576], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.c.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c1.c.y = BatchNormalization(rn3_3.c1.c.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c1.c.sc[64, 1], rn3_3.c1.c.b[64, 1], rn3_3.c1.c.m[64, 1], rn3_3.c1.c.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.c = Convolution(rn3_3.c2.W[64, 576], rn3_3.c1.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.c2.sc = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.b = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.m = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.isd = LearnableParameter -> [64 [64], 1]
Validating --> rn3_3.c2.y = BatchNormalization(rn3_3.c2.c[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_3.c2.sc[64, 1], rn3_3.c2.b[64, 1], rn3_3.c2.m[64, 1], rn3_3.c2.isd[64, 1]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.p = Plus(rn3_3.c2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0], rn3_2.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [4096 [8 x 8 x 64], MBSize 0]
Validating --> pool = AveragePooling(rn3_3.y[4096 [8 x 8 x 64] {W=8, H=64, C=8}, MBSize 0]) -> [64 [1 x 1 x 64], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[10, 64], pool[64 [1 x 1 x 64], MBSize 0]) -> [10 [10], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [10 [10], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10, MBSize 0], OutputNodes.b[10, 1]) -> [10 [10], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[10, MBSize 0], OutputNodes.z[10, MBSize 0]) -> [1 [1], 1]

108 out of 187 nodes do not share the minibatch layout with the input data.

Post-processing network complete.
evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
Minibatch[1-20]: Samples Seen = 10000    Err: ErrorPrediction/Sample = 0.0819    CE: CrossEntropyWithSoftmax/Sample = 0.35141698    
Final Results: Minibatch[1-20]: Samples Seen = 10000    Err: ErrorPrediction/Sample = 0.0819    CE: CrossEntropyWithSoftmax/Sample = 0.35141698    Perplexity = 1.4210798    
COMPLETED
