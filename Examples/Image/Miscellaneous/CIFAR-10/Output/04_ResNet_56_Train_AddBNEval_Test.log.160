-------------------------------------------------------------------
Build info: 

		Built time: Feb 26 2016 16:36:12
		Last modified date: Thu Feb 25 12:56:12 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub
		CUDNN_PATH: C:\NVIDIA\cudnn-4.0\cuda
		Build Branch: 
		Build SHA1:  (modified)
		Built by alexeyk on z840-01
		Build Path: C:\src\cntk\Source\CNTK\
-------------------------------------------------------------------
running on z840-01 at 2016/02/26 17:43:42
command line: 
C:\src\cntk\x64\Release\CNTK.exe configFile=04_ResNet_56.cntk 

>>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros="$ConfigDir$/Macros.ndl"
precision="float"
deviceId="Auto"
prefetch="true"
parallelTrain="false"
command=Train:AddBNEval:Test
stderr="$OutputDir$/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "$ConfigDir$/16to32.txt"
Proj32to64Filename = "$ConfigDir$/32to64.txt"
Train=[
    action="train"
    modelPath="$ModelDir$/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="$ConfigDir$/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="$DataDir$/train_map.txt"
        randomize="Auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="Random"
            cropRatio=0.8
            jitterType="UniRatio"
            interpolations="Linear"
            meanFile="$ConfigDir$/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
AddBNEval=[    
    action="edit"
    CurModel="$ModelDir$/04_ResNet_56"
    NewModel="$ModelDir$/04_ResNet_56.Eval"
    editPath="$ConfigDir$/03_ResNet.mel"
]
Test=[
    action="test"
    modelPath="$ModelDir$/04_ResNet_56.Eval"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="$DataDir$/test_map.txt"
        randomize="None"
        features=[
            width=32
            height=32
            channels=3
            cropType="Center"
            cropRatio=1
            jitterType="UniRatio"
            interpolations="Linear"
            meanFile="$ConfigDir$/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]

<<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "./Output/Models"
ndlMacros="./Macros.ndl"
precision="float"
deviceId="Auto"
prefetch="true"
parallelTrain="false"
command=Train:AddBNEval:Test
stderr="./Output/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "./16to32.txt"
Proj32to64Filename = "./32to64.txt"
Train=[
    action="train"
    modelPath="./Output/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="./04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="./train_map.txt"
        randomize="Auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="Random"
            cropRatio=0.8
            jitterType="UniRatio"
            interpolations="Linear"
            meanFile="./CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
AddBNEval=[    
    action="edit"
    CurModel="./Output/Models/04_ResNet_56"
    NewModel="./Output/Models/04_ResNet_56.Eval"
    editPath="./03_ResNet.mel"
]
Test=[
    action="test"
    modelPath="./Output/Models/04_ResNet_56.Eval"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="./test_map.txt"
        randomize="None"
        features=[
            width=32
            height=32
            channels=3
            cropType="Center"
            cropRatio=1
            jitterType="UniRatio"
            interpolations="Linear"
            meanFile="./CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]

<<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 04_ResNet_56.cntk:AddBNEval=[    
    action="edit"
    CurModel="./Output/Models/04_ResNet_56"
    NewModel="./Output/Models/04_ResNet_56.Eval"
    editPath="./03_ResNet.mel"
]

configparameters: 04_ResNet_56.cntk:command=Train:AddBNEval:Test
configparameters: 04_ResNet_56.cntk:ConfigDir=.
configparameters: 04_ResNet_56.cntk:DataDir=.
configparameters: 04_ResNet_56.cntk:deviceId=Auto
configparameters: 04_ResNet_56.cntk:ModelDir=./Output/Models
configparameters: 04_ResNet_56.cntk:ndlMacros=./Macros.ndl
configparameters: 04_ResNet_56.cntk:numMBsToShowResult=200
configparameters: 04_ResNet_56.cntk:OutputDir=./Output
configparameters: 04_ResNet_56.cntk:parallelTrain=false
configparameters: 04_ResNet_56.cntk:precision=float
configparameters: 04_ResNet_56.cntk:prefetch=true
configparameters: 04_ResNet_56.cntk:Proj16to32Filename=./16to32.txt
configparameters: 04_ResNet_56.cntk:Proj32to64Filename=./32to64.txt
configparameters: 04_ResNet_56.cntk:RootDir=.
configparameters: 04_ResNet_56.cntk:stderr=./Output/04_ResNet_56
configparameters: 04_ResNet_56.cntk:Test=[
    action="test"
    modelPath="./Output/Models/04_ResNet_56.Eval"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="./test_map.txt"
        randomize="None"
        features=[
            width=32
            height=32
            channels=3
            cropType="Center"
            cropRatio=1
            jitterType="UniRatio"
            interpolations="Linear"
            meanFile="./CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]

configparameters: 04_ResNet_56.cntk:traceLevel=1
configparameters: 04_ResNet_56.cntk:Train=[
    action="train"
    modelPath="./Output/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="./04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="./train_map.txt"
        randomize="Auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="Random"
            cropRatio=0.8
            jitterType="UniRatio"
            interpolations="Linear"
            meanFile="./CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]

<<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
command: Train AddBNEval Test 
precision = float
CNTKModelPath: ./Output/Models/04_ResNet_56
CNTKCommandTrainInfo: Train : 160
CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 160
CNTKCommandTrainBegin: Train
LockDevice: Locked GPU 0 to test availability.
LockDevice: Unlocked GPU 0 after testing.
LockDevice: Locked GPU 1 to test availability.
LockDevice: Unlocked GPU 1 after testing.
LockDevice: Locked GPU 2 to test availability.
LockDevice: Unlocked GPU 2 after testing.
LockDevice: Locked GPU 0 for exclusive use.
NDLBuilder Using GPU 0
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax
	Err = ErrorPrediction
	OutputNodes.z = Plus
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation


Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter -> [16 x 27]
Validating --> features = InputValue -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[16 x 27], features[32 x 32 x 3 x * {W=32, H=3, C=32}]) -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.c.c.sc[16 x 1], conv1.c.c.b[16 x 1], conv1.c.c.m[16 x 1], conv1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[16 x 144], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c1.c.c.sc[16 x 1], rn1_1.c1.c.c.b[16 x 1], rn1_1.c1.c.c.m[16 x 1], rn1_1.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[16 x 144], rn1_1.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c2.c.sc[16 x 1], rn1_1.c2.c.b[16 x 1], rn1_1.c2.c.m[16 x 1], rn1_1.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[16 x 144], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c1.c.c.sc[16 x 1], rn1_2.c1.c.c.b[16 x 1], rn1_2.c1.c.c.m[16 x 1], rn1_2.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[16 x 144], rn1_2.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c2.c.sc[16 x 1], rn1_2.c2.c.b[16 x 1], rn1_2.c2.c.m[16 x 1], rn1_2.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[16 x 144], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c1.c.c.sc[16 x 1], rn1_3.c1.c.c.b[16 x 1], rn1_3.c1.c.c.m[16 x 1], rn1_3.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[16 x 144], rn1_3.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c2.c.sc[16 x 1], rn1_3.c2.c.b[16 x 1], rn1_3.c2.c.m[16 x 1], rn1_3.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution(rn1_4.c1.c.W[16 x 144], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization(rn1_4.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c1.c.c.sc[16 x 1], rn1_4.c1.c.c.b[16 x 1], rn1_4.c1.c.c.m[16 x 1], rn1_4.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear(rn1_4.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution(rn1_4.c2.W[16 x 144], rn1_4.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization(rn1_4.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c2.c.sc[16 x 1], rn1_4.c2.c.b[16 x 1], rn1_4.c2.c.m[16 x 1], rn1_4.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus(rn1_4.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear(rn1_4.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution(rn1_5.c1.c.W[16 x 144], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization(rn1_5.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c1.c.c.sc[16 x 1], rn1_5.c1.c.c.b[16 x 1], rn1_5.c1.c.c.m[16 x 1], rn1_5.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear(rn1_5.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution(rn1_5.c2.W[16 x 144], rn1_5.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization(rn1_5.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c2.c.sc[16 x 1], rn1_5.c2.c.b[16 x 1], rn1_5.c2.c.m[16 x 1], rn1_5.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus(rn1_5.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear(rn1_5.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution(rn1_6.c1.c.W[16 x 144], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization(rn1_6.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c1.c.c.sc[16 x 1], rn1_6.c1.c.c.b[16 x 1], rn1_6.c1.c.c.m[16 x 1], rn1_6.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear(rn1_6.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution(rn1_6.c2.W[16 x 144], rn1_6.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization(rn1_6.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c2.c.sc[16 x 1], rn1_6.c2.c.b[16 x 1], rn1_6.c2.c.m[16 x 1], rn1_6.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus(rn1_6.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear(rn1_6.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution(rn1_7.c1.c.W[16 x 144], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization(rn1_7.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c1.c.c.sc[16 x 1], rn1_7.c1.c.c.b[16 x 1], rn1_7.c1.c.c.m[16 x 1], rn1_7.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear(rn1_7.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution(rn1_7.c2.W[16 x 144], rn1_7.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization(rn1_7.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c2.c.sc[16 x 1], rn1_7.c2.c.b[16 x 1], rn1_7.c2.c.m[16 x 1], rn1_7.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus(rn1_7.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear(rn1_7.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution(rn1_8.c1.c.W[16 x 144], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization(rn1_8.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c1.c.c.sc[16 x 1], rn1_8.c1.c.c.b[16 x 1], rn1_8.c1.c.c.m[16 x 1], rn1_8.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear(rn1_8.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution(rn1_8.c2.W[16 x 144], rn1_8.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization(rn1_8.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c2.c.sc[16 x 1], rn1_8.c2.c.b[16 x 1], rn1_8.c2.c.m[16 x 1], rn1_8.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus(rn1_8.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear(rn1_8.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution(rn1_9.c1.c.W[16 x 144], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization(rn1_9.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c1.c.c.sc[16 x 1], rn1_9.c1.c.c.b[16 x 1], rn1_9.c1.c.c.m[16 x 1], rn1_9.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear(rn1_9.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution(rn1_9.c2.W[16 x 144], rn1_9.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization(rn1_9.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c2.c.sc[16 x 1], rn1_9.c2.c.b[16 x 1], rn1_9.c2.c.m[16 x 1], rn1_9.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus(rn1_9.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear(rn1_9.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution(rn1_10.c1.c.W[16 x 144], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization(rn1_10.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c1.c.c.sc[16 x 1], rn1_10.c1.c.c.b[16 x 1], rn1_10.c1.c.c.m[16 x 1], rn1_10.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear(rn1_10.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution(rn1_10.c2.W[16 x 144], rn1_10.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization(rn1_10.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c2.c.sc[16 x 1], rn1_10.c2.c.b[16 x 1], rn1_10.c2.c.m[16 x 1], rn1_10.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus(rn1_10.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear(rn1_10.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution(rn1_11.c1.c.W[16 x 144], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization(rn1_11.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c1.c.c.sc[16 x 1], rn1_11.c1.c.c.b[16 x 1], rn1_11.c1.c.c.m[16 x 1], rn1_11.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear(rn1_11.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution(rn1_11.c2.W[16 x 144], rn1_11.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization(rn1_11.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c2.c.sc[16 x 1], rn1_11.c2.c.b[16 x 1], rn1_11.c2.c.m[16 x 1], rn1_11.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus(rn1_11.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear(rn1_11.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution(rn1_12.c1.c.W[16 x 144], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization(rn1_12.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c1.c.c.sc[16 x 1], rn1_12.c1.c.c.b[16 x 1], rn1_12.c1.c.c.m[16 x 1], rn1_12.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear(rn1_12.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution(rn1_12.c2.W[16 x 144], rn1_12.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization(rn1_12.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c2.c.sc[16 x 1], rn1_12.c2.c.b[16 x 1], rn1_12.c2.c.m[16 x 1], rn1_12.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus(rn1_12.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear(rn1_12.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution(rn1_13.c1.c.W[16 x 144], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization(rn1_13.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c1.c.c.sc[16 x 1], rn1_13.c1.c.c.b[16 x 1], rn1_13.c1.c.c.m[16 x 1], rn1_13.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear(rn1_13.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution(rn1_13.c2.W[16 x 144], rn1_13.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization(rn1_13.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c2.c.sc[16 x 1], rn1_13.c2.c.b[16 x 1], rn1_13.c2.c.m[16 x 1], rn1_13.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus(rn1_13.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear(rn1_13.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution(rn1_14.c1.c.W[16 x 144], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization(rn1_14.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c1.c.c.sc[16 x 1], rn1_14.c1.c.c.b[16 x 1], rn1_14.c1.c.c.m[16 x 1], rn1_14.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear(rn1_14.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution(rn1_14.c2.W[16 x 144], rn1_14.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization(rn1_14.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c2.c.sc[16 x 1], rn1_14.c2.c.b[16 x 1], rn1_14.c2.c.m[16 x 1], rn1_14.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus(rn1_14.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear(rn1_14.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution(rn1_15.c1.c.W[16 x 144], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization(rn1_15.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c1.c.c.sc[16 x 1], rn1_15.c1.c.c.b[16 x 1], rn1_15.c1.c.c.m[16 x 1], rn1_15.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear(rn1_15.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution(rn1_15.c2.W[16 x 144], rn1_15.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization(rn1_15.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c2.c.sc[16 x 1], rn1_15.c2.c.b[16 x 1], rn1_15.c2.c.m[16 x 1], rn1_15.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus(rn1_15.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear(rn1_15.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution(rn1_16.c1.c.W[16 x 144], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization(rn1_16.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c1.c.c.sc[16 x 1], rn1_16.c1.c.c.b[16 x 1], rn1_16.c1.c.c.m[16 x 1], rn1_16.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear(rn1_16.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution(rn1_16.c2.W[16 x 144], rn1_16.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization(rn1_16.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c2.c.sc[16 x 1], rn1_16.c2.c.b[16 x 1], rn1_16.c2.c.m[16 x 1], rn1_16.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus(rn1_16.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear(rn1_16.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution(rn1_17.c1.c.W[16 x 144], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization(rn1_17.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c1.c.c.sc[16 x 1], rn1_17.c1.c.c.b[16 x 1], rn1_17.c1.c.c.m[16 x 1], rn1_17.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear(rn1_17.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution(rn1_17.c2.W[16 x 144], rn1_17.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization(rn1_17.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c2.c.sc[16 x 1], rn1_17.c2.c.b[16 x 1], rn1_17.c2.c.m[16 x 1], rn1_17.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus(rn1_17.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear(rn1_17.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution(rn1_18.c1.c.W[16 x 144], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization(rn1_18.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c1.c.c.sc[16 x 1], rn1_18.c1.c.c.b[16 x 1], rn1_18.c1.c.c.m[16 x 1], rn1_18.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear(rn1_18.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution(rn1_18.c2.W[16 x 144], rn1_18.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization(rn1_18.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c2.c.sc[16 x 1], rn1_18.c2.c.b[16 x 1], rn1_18.c2.c.m[16 x 1], rn1_18.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus(rn1_18.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear(rn1_18.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[32 x 144], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c1.c.c.sc[32 x 1], rn2_1.c1.c.c.b[32 x 1], rn2_1.c1.c.c.m[32 x 1], rn2_1.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[32 x 288], rn2_1.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c2.c.sc[32 x 1], rn2_1.c2.c.b[32 x 1], rn2_1.c2.c.m[32 x 1], rn2_1.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[32 x 16], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.sc[32 x 1], rn2_1.c_proj.b[32 x 1], rn2_1.c_proj.m[32 x 1], rn2_1.c_proj.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[32 x 288], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c1.c.c.sc[32 x 1], rn2_2.c1.c.c.b[32 x 1], rn2_2.c1.c.c.m[32 x 1], rn2_2.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[32 x 288], rn2_2.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c2.c.sc[32 x 1], rn2_2.c2.c.b[32 x 1], rn2_2.c2.c.m[32 x 1], rn2_2.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[32 x 288], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c1.c.c.sc[32 x 1], rn2_3.c1.c.c.b[32 x 1], rn2_3.c1.c.c.m[32 x 1], rn2_3.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[32 x 288], rn2_3.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c2.c.sc[32 x 1], rn2_3.c2.c.b[32 x 1], rn2_3.c2.c.m[32 x 1], rn2_3.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[32 x 288], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c1.c.c.sc[32 x 1], rn2_4.c1.c.c.b[32 x 1], rn2_4.c1.c.c.m[32 x 1], rn2_4.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[32 x 288], rn2_4.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c2.c.sc[32 x 1], rn2_4.c2.c.b[32 x 1], rn2_4.c2.c.m[32 x 1], rn2_4.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution(rn2_5.c1.c.W[32 x 288], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization(rn2_5.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c1.c.c.sc[32 x 1], rn2_5.c1.c.c.b[32 x 1], rn2_5.c1.c.c.m[32 x 1], rn2_5.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear(rn2_5.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution(rn2_5.c2.W[32 x 288], rn2_5.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization(rn2_5.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c2.c.sc[32 x 1], rn2_5.c2.c.b[32 x 1], rn2_5.c2.c.m[32 x 1], rn2_5.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus(rn2_5.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear(rn2_5.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution(rn2_6.c1.c.W[32 x 288], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization(rn2_6.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c1.c.c.sc[32 x 1], rn2_6.c1.c.c.b[32 x 1], rn2_6.c1.c.c.m[32 x 1], rn2_6.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear(rn2_6.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution(rn2_6.c2.W[32 x 288], rn2_6.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization(rn2_6.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c2.c.sc[32 x 1], rn2_6.c2.c.b[32 x 1], rn2_6.c2.c.m[32 x 1], rn2_6.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus(rn2_6.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear(rn2_6.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution(rn2_7.c1.c.W[32 x 288], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization(rn2_7.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c1.c.c.sc[32 x 1], rn2_7.c1.c.c.b[32 x 1], rn2_7.c1.c.c.m[32 x 1], rn2_7.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear(rn2_7.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution(rn2_7.c2.W[32 x 288], rn2_7.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization(rn2_7.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c2.c.sc[32 x 1], rn2_7.c2.c.b[32 x 1], rn2_7.c2.c.m[32 x 1], rn2_7.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus(rn2_7.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear(rn2_7.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution(rn2_8.c1.c.W[32 x 288], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization(rn2_8.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c1.c.c.sc[32 x 1], rn2_8.c1.c.c.b[32 x 1], rn2_8.c1.c.c.m[32 x 1], rn2_8.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear(rn2_8.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution(rn2_8.c2.W[32 x 288], rn2_8.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization(rn2_8.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c2.c.sc[32 x 1], rn2_8.c2.c.b[32 x 1], rn2_8.c2.c.m[32 x 1], rn2_8.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus(rn2_8.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear(rn2_8.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution(rn2_9.c1.c.W[32 x 288], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization(rn2_9.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c1.c.c.sc[32 x 1], rn2_9.c1.c.c.b[32 x 1], rn2_9.c1.c.c.m[32 x 1], rn2_9.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear(rn2_9.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution(rn2_9.c2.W[32 x 288], rn2_9.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization(rn2_9.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c2.c.sc[32 x 1], rn2_9.c2.c.b[32 x 1], rn2_9.c2.c.m[32 x 1], rn2_9.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus(rn2_9.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear(rn2_9.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution(rn2_10.c1.c.W[32 x 288], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization(rn2_10.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c1.c.c.sc[32 x 1], rn2_10.c1.c.c.b[32 x 1], rn2_10.c1.c.c.m[32 x 1], rn2_10.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear(rn2_10.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution(rn2_10.c2.W[32 x 288], rn2_10.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization(rn2_10.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c2.c.sc[32 x 1], rn2_10.c2.c.b[32 x 1], rn2_10.c2.c.m[32 x 1], rn2_10.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus(rn2_10.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear(rn2_10.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution(rn2_11.c1.c.W[32 x 288], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization(rn2_11.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c1.c.c.sc[32 x 1], rn2_11.c1.c.c.b[32 x 1], rn2_11.c1.c.c.m[32 x 1], rn2_11.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear(rn2_11.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution(rn2_11.c2.W[32 x 288], rn2_11.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization(rn2_11.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c2.c.sc[32 x 1], rn2_11.c2.c.b[32 x 1], rn2_11.c2.c.m[32 x 1], rn2_11.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus(rn2_11.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear(rn2_11.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution(rn2_12.c1.c.W[32 x 288], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization(rn2_12.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c1.c.c.sc[32 x 1], rn2_12.c1.c.c.b[32 x 1], rn2_12.c1.c.c.m[32 x 1], rn2_12.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear(rn2_12.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution(rn2_12.c2.W[32 x 288], rn2_12.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization(rn2_12.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c2.c.sc[32 x 1], rn2_12.c2.c.b[32 x 1], rn2_12.c2.c.m[32 x 1], rn2_12.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus(rn2_12.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear(rn2_12.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution(rn2_13.c1.c.W[32 x 288], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization(rn2_13.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c1.c.c.sc[32 x 1], rn2_13.c1.c.c.b[32 x 1], rn2_13.c1.c.c.m[32 x 1], rn2_13.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear(rn2_13.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution(rn2_13.c2.W[32 x 288], rn2_13.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization(rn2_13.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c2.c.sc[32 x 1], rn2_13.c2.c.b[32 x 1], rn2_13.c2.c.m[32 x 1], rn2_13.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus(rn2_13.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear(rn2_13.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution(rn2_14.c1.c.W[32 x 288], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization(rn2_14.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c1.c.c.sc[32 x 1], rn2_14.c1.c.c.b[32 x 1], rn2_14.c1.c.c.m[32 x 1], rn2_14.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear(rn2_14.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution(rn2_14.c2.W[32 x 288], rn2_14.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization(rn2_14.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c2.c.sc[32 x 1], rn2_14.c2.c.b[32 x 1], rn2_14.c2.c.m[32 x 1], rn2_14.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus(rn2_14.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear(rn2_14.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution(rn2_15.c1.c.W[32 x 288], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization(rn2_15.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c1.c.c.sc[32 x 1], rn2_15.c1.c.c.b[32 x 1], rn2_15.c1.c.c.m[32 x 1], rn2_15.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear(rn2_15.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution(rn2_15.c2.W[32 x 288], rn2_15.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization(rn2_15.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c2.c.sc[32 x 1], rn2_15.c2.c.b[32 x 1], rn2_15.c2.c.m[32 x 1], rn2_15.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus(rn2_15.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear(rn2_15.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution(rn2_16.c1.c.W[32 x 288], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization(rn2_16.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c1.c.c.sc[32 x 1], rn2_16.c1.c.c.b[32 x 1], rn2_16.c1.c.c.m[32 x 1], rn2_16.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear(rn2_16.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution(rn2_16.c2.W[32 x 288], rn2_16.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization(rn2_16.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c2.c.sc[32 x 1], rn2_16.c2.c.b[32 x 1], rn2_16.c2.c.m[32 x 1], rn2_16.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus(rn2_16.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear(rn2_16.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution(rn2_17.c1.c.W[32 x 288], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization(rn2_17.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c1.c.c.sc[32 x 1], rn2_17.c1.c.c.b[32 x 1], rn2_17.c1.c.c.m[32 x 1], rn2_17.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear(rn2_17.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution(rn2_17.c2.W[32 x 288], rn2_17.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization(rn2_17.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c2.c.sc[32 x 1], rn2_17.c2.c.b[32 x 1], rn2_17.c2.c.m[32 x 1], rn2_17.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus(rn2_17.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear(rn2_17.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution(rn2_18.c1.c.W[32 x 288], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization(rn2_18.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c1.c.c.sc[32 x 1], rn2_18.c1.c.c.b[32 x 1], rn2_18.c1.c.c.m[32 x 1], rn2_18.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear(rn2_18.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution(rn2_18.c2.W[32 x 288], rn2_18.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization(rn2_18.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c2.c.sc[32 x 1], rn2_18.c2.c.b[32 x 1], rn2_18.c2.c.m[32 x 1], rn2_18.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus(rn2_18.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear(rn2_18.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[64 x 288], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c1.c.c.sc[64 x 1], rn3_1.c1.c.c.b[64 x 1], rn3_1.c1.c.c.m[64 x 1], rn3_1.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[64 x 576], rn3_1.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c2.c.sc[64 x 1], rn3_1.c2.c.b[64 x 1], rn3_1.c2.c.m[64 x 1], rn3_1.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[64 x 32], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.sc[64 x 1], rn3_1.c_proj.b[64 x 1], rn3_1.c_proj.m[64 x 1], rn3_1.c_proj.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[64 x 576], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c1.c.c.sc[64 x 1], rn3_2.c1.c.c.b[64 x 1], rn3_2.c1.c.c.m[64 x 1], rn3_2.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[64 x 576], rn3_2.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c2.c.sc[64 x 1], rn3_2.c2.c.b[64 x 1], rn3_2.c2.c.m[64 x 1], rn3_2.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[64 x 576], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c1.c.c.sc[64 x 1], rn3_3.c1.c.c.b[64 x 1], rn3_3.c1.c.c.m[64 x 1], rn3_3.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[64 x 576], rn3_3.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c2.c.sc[64 x 1], rn3_3.c2.c.b[64 x 1], rn3_3.c2.c.m[64 x 1], rn3_3.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[64 x 576], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c1.c.c.sc[64 x 1], rn3_4.c1.c.c.b[64 x 1], rn3_4.c1.c.c.m[64 x 1], rn3_4.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[64 x 576], rn3_4.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c2.c.sc[64 x 1], rn3_4.c2.c.b[64 x 1], rn3_4.c2.c.m[64 x 1], rn3_4.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[64 x 576], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c1.c.c.sc[64 x 1], rn3_5.c1.c.c.b[64 x 1], rn3_5.c1.c.c.m[64 x 1], rn3_5.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[64 x 576], rn3_5.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c2.c.sc[64 x 1], rn3_5.c2.c.b[64 x 1], rn3_5.c2.c.m[64 x 1], rn3_5.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[64 x 576], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c1.c.c.sc[64 x 1], rn3_6.c1.c.c.b[64 x 1], rn3_6.c1.c.c.m[64 x 1], rn3_6.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[64 x 576], rn3_6.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c2.c.sc[64 x 1], rn3_6.c2.c.b[64 x 1], rn3_6.c2.c.m[64 x 1], rn3_6.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution(rn3_7.c1.c.W[64 x 576], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization(rn3_7.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c1.c.c.sc[64 x 1], rn3_7.c1.c.c.b[64 x 1], rn3_7.c1.c.c.m[64 x 1], rn3_7.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear(rn3_7.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution(rn3_7.c2.W[64 x 576], rn3_7.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization(rn3_7.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c2.c.sc[64 x 1], rn3_7.c2.c.b[64 x 1], rn3_7.c2.c.m[64 x 1], rn3_7.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus(rn3_7.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear(rn3_7.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution(rn3_8.c1.c.W[64 x 576], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization(rn3_8.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c1.c.c.sc[64 x 1], rn3_8.c1.c.c.b[64 x 1], rn3_8.c1.c.c.m[64 x 1], rn3_8.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear(rn3_8.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution(rn3_8.c2.W[64 x 576], rn3_8.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization(rn3_8.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c2.c.sc[64 x 1], rn3_8.c2.c.b[64 x 1], rn3_8.c2.c.m[64 x 1], rn3_8.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus(rn3_8.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear(rn3_8.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution(rn3_9.c1.c.W[64 x 576], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization(rn3_9.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c1.c.c.sc[64 x 1], rn3_9.c1.c.c.b[64 x 1], rn3_9.c1.c.c.m[64 x 1], rn3_9.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear(rn3_9.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution(rn3_9.c2.W[64 x 576], rn3_9.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization(rn3_9.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c2.c.sc[64 x 1], rn3_9.c2.c.b[64 x 1], rn3_9.c2.c.m[64 x 1], rn3_9.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus(rn3_9.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear(rn3_9.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution(rn3_10.c1.c.W[64 x 576], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization(rn3_10.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c1.c.c.sc[64 x 1], rn3_10.c1.c.c.b[64 x 1], rn3_10.c1.c.c.m[64 x 1], rn3_10.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear(rn3_10.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution(rn3_10.c2.W[64 x 576], rn3_10.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization(rn3_10.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c2.c.sc[64 x 1], rn3_10.c2.c.b[64 x 1], rn3_10.c2.c.m[64 x 1], rn3_10.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus(rn3_10.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear(rn3_10.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution(rn3_11.c1.c.W[64 x 576], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization(rn3_11.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c1.c.c.sc[64 x 1], rn3_11.c1.c.c.b[64 x 1], rn3_11.c1.c.c.m[64 x 1], rn3_11.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear(rn3_11.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution(rn3_11.c2.W[64 x 576], rn3_11.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization(rn3_11.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c2.c.sc[64 x 1], rn3_11.c2.c.b[64 x 1], rn3_11.c2.c.m[64 x 1], rn3_11.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus(rn3_11.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear(rn3_11.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution(rn3_12.c1.c.W[64 x 576], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization(rn3_12.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c1.c.c.sc[64 x 1], rn3_12.c1.c.c.b[64 x 1], rn3_12.c1.c.c.m[64 x 1], rn3_12.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear(rn3_12.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution(rn3_12.c2.W[64 x 576], rn3_12.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization(rn3_12.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c2.c.sc[64 x 1], rn3_12.c2.c.b[64 x 1], rn3_12.c2.c.m[64 x 1], rn3_12.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus(rn3_12.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear(rn3_12.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution(rn3_13.c1.c.W[64 x 576], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization(rn3_13.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c1.c.c.sc[64 x 1], rn3_13.c1.c.c.b[64 x 1], rn3_13.c1.c.c.m[64 x 1], rn3_13.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear(rn3_13.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution(rn3_13.c2.W[64 x 576], rn3_13.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization(rn3_13.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c2.c.sc[64 x 1], rn3_13.c2.c.b[64 x 1], rn3_13.c2.c.m[64 x 1], rn3_13.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus(rn3_13.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear(rn3_13.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution(rn3_14.c1.c.W[64 x 576], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization(rn3_14.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c1.c.c.sc[64 x 1], rn3_14.c1.c.c.b[64 x 1], rn3_14.c1.c.c.m[64 x 1], rn3_14.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear(rn3_14.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution(rn3_14.c2.W[64 x 576], rn3_14.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization(rn3_14.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c2.c.sc[64 x 1], rn3_14.c2.c.b[64 x 1], rn3_14.c2.c.m[64 x 1], rn3_14.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus(rn3_14.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear(rn3_14.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution(rn3_15.c1.c.W[64 x 576], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization(rn3_15.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c1.c.c.sc[64 x 1], rn3_15.c1.c.c.b[64 x 1], rn3_15.c1.c.c.m[64 x 1], rn3_15.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear(rn3_15.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution(rn3_15.c2.W[64 x 576], rn3_15.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization(rn3_15.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c2.c.sc[64 x 1], rn3_15.c2.c.b[64 x 1], rn3_15.c2.c.m[64 x 1], rn3_15.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus(rn3_15.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear(rn3_15.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution(rn3_16.c1.c.W[64 x 576], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization(rn3_16.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c1.c.c.sc[64 x 1], rn3_16.c1.c.c.b[64 x 1], rn3_16.c1.c.c.m[64 x 1], rn3_16.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear(rn3_16.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution(rn3_16.c2.W[64 x 576], rn3_16.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization(rn3_16.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c2.c.sc[64 x 1], rn3_16.c2.c.b[64 x 1], rn3_16.c2.c.m[64 x 1], rn3_16.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus(rn3_16.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear(rn3_16.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution(rn3_17.c1.c.W[64 x 576], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization(rn3_17.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c1.c.c.sc[64 x 1], rn3_17.c1.c.c.b[64 x 1], rn3_17.c1.c.c.m[64 x 1], rn3_17.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear(rn3_17.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution(rn3_17.c2.W[64 x 576], rn3_17.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization(rn3_17.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c2.c.sc[64 x 1], rn3_17.c2.c.b[64 x 1], rn3_17.c2.c.m[64 x 1], rn3_17.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus(rn3_17.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear(rn3_17.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution(rn3_18.c1.c.W[64 x 576], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization(rn3_18.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c1.c.c.sc[64 x 1], rn3_18.c1.c.c.b[64 x 1], rn3_18.c1.c.c.m[64 x 1], rn3_18.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear(rn3_18.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution(rn3_18.c2.W[64 x 576], rn3_18.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization(rn3_18.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c2.c.sc[64 x 1], rn3_18.c2.c.b[64 x 1], rn3_18.c2.c.m[64 x 1], rn3_18.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus(rn3_18.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear(rn3_18.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling(rn3_18.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[10 x 64], pool[1 x 1 x 64 x *]) -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter -> [10]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10 x *], OutputNodes.b[10]) -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[10 x *], OutputNodes.z[10 x *]) -> [1]
Validating --> Err = ErrorPrediction(labels[10 x *], OutputNodes.z[10 x *]) -> [1]

Validating network. 390 nodes to process in pass 2.

Validating --> labels = InputValue -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter -> [16 x 27]
Validating --> features = InputValue -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[16 x 27], features[32 x 32 x 3 x * {W=32, H=3, C=32}]) -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.c.c.sc[16 x 1], conv1.c.c.b[16 x 1], conv1.c.c.m[16 x 1], conv1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[16 x 144], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c1.c.c.sc[16 x 1], rn1_1.c1.c.c.b[16 x 1], rn1_1.c1.c.c.m[16 x 1], rn1_1.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[16 x 144], rn1_1.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c2.c.sc[16 x 1], rn1_1.c2.c.b[16 x 1], rn1_1.c2.c.m[16 x 1], rn1_1.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[16 x 144], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c1.c.c.sc[16 x 1], rn1_2.c1.c.c.b[16 x 1], rn1_2.c1.c.c.m[16 x 1], rn1_2.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[16 x 144], rn1_2.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c2.c.sc[16 x 1], rn1_2.c2.c.b[16 x 1], rn1_2.c2.c.m[16 x 1], rn1_2.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[16 x 144], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c1.c.c.sc[16 x 1], rn1_3.c1.c.c.b[16 x 1], rn1_3.c1.c.c.m[16 x 1], rn1_3.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[16 x 144], rn1_3.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c2.c.sc[16 x 1], rn1_3.c2.c.b[16 x 1], rn1_3.c2.c.m[16 x 1], rn1_3.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution(rn1_4.c1.c.W[16 x 144], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization(rn1_4.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c1.c.c.sc[16 x 1], rn1_4.c1.c.c.b[16 x 1], rn1_4.c1.c.c.m[16 x 1], rn1_4.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear(rn1_4.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution(rn1_4.c2.W[16 x 144], rn1_4.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization(rn1_4.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c2.c.sc[16 x 1], rn1_4.c2.c.b[16 x 1], rn1_4.c2.c.m[16 x 1], rn1_4.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus(rn1_4.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear(rn1_4.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution(rn1_5.c1.c.W[16 x 144], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization(rn1_5.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c1.c.c.sc[16 x 1], rn1_5.c1.c.c.b[16 x 1], rn1_5.c1.c.c.m[16 x 1], rn1_5.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear(rn1_5.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution(rn1_5.c2.W[16 x 144], rn1_5.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization(rn1_5.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c2.c.sc[16 x 1], rn1_5.c2.c.b[16 x 1], rn1_5.c2.c.m[16 x 1], rn1_5.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus(rn1_5.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear(rn1_5.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution(rn1_6.c1.c.W[16 x 144], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization(rn1_6.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c1.c.c.sc[16 x 1], rn1_6.c1.c.c.b[16 x 1], rn1_6.c1.c.c.m[16 x 1], rn1_6.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear(rn1_6.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution(rn1_6.c2.W[16 x 144], rn1_6.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization(rn1_6.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c2.c.sc[16 x 1], rn1_6.c2.c.b[16 x 1], rn1_6.c2.c.m[16 x 1], rn1_6.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus(rn1_6.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear(rn1_6.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution(rn1_7.c1.c.W[16 x 144], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization(rn1_7.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c1.c.c.sc[16 x 1], rn1_7.c1.c.c.b[16 x 1], rn1_7.c1.c.c.m[16 x 1], rn1_7.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear(rn1_7.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution(rn1_7.c2.W[16 x 144], rn1_7.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization(rn1_7.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c2.c.sc[16 x 1], rn1_7.c2.c.b[16 x 1], rn1_7.c2.c.m[16 x 1], rn1_7.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus(rn1_7.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear(rn1_7.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution(rn1_8.c1.c.W[16 x 144], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization(rn1_8.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c1.c.c.sc[16 x 1], rn1_8.c1.c.c.b[16 x 1], rn1_8.c1.c.c.m[16 x 1], rn1_8.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear(rn1_8.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution(rn1_8.c2.W[16 x 144], rn1_8.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization(rn1_8.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c2.c.sc[16 x 1], rn1_8.c2.c.b[16 x 1], rn1_8.c2.c.m[16 x 1], rn1_8.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus(rn1_8.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear(rn1_8.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution(rn1_9.c1.c.W[16 x 144], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization(rn1_9.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c1.c.c.sc[16 x 1], rn1_9.c1.c.c.b[16 x 1], rn1_9.c1.c.c.m[16 x 1], rn1_9.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear(rn1_9.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution(rn1_9.c2.W[16 x 144], rn1_9.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization(rn1_9.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c2.c.sc[16 x 1], rn1_9.c2.c.b[16 x 1], rn1_9.c2.c.m[16 x 1], rn1_9.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus(rn1_9.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear(rn1_9.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution(rn1_10.c1.c.W[16 x 144], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization(rn1_10.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c1.c.c.sc[16 x 1], rn1_10.c1.c.c.b[16 x 1], rn1_10.c1.c.c.m[16 x 1], rn1_10.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear(rn1_10.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution(rn1_10.c2.W[16 x 144], rn1_10.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization(rn1_10.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c2.c.sc[16 x 1], rn1_10.c2.c.b[16 x 1], rn1_10.c2.c.m[16 x 1], rn1_10.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus(rn1_10.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear(rn1_10.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution(rn1_11.c1.c.W[16 x 144], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization(rn1_11.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c1.c.c.sc[16 x 1], rn1_11.c1.c.c.b[16 x 1], rn1_11.c1.c.c.m[16 x 1], rn1_11.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear(rn1_11.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution(rn1_11.c2.W[16 x 144], rn1_11.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization(rn1_11.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c2.c.sc[16 x 1], rn1_11.c2.c.b[16 x 1], rn1_11.c2.c.m[16 x 1], rn1_11.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus(rn1_11.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear(rn1_11.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution(rn1_12.c1.c.W[16 x 144], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization(rn1_12.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c1.c.c.sc[16 x 1], rn1_12.c1.c.c.b[16 x 1], rn1_12.c1.c.c.m[16 x 1], rn1_12.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear(rn1_12.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution(rn1_12.c2.W[16 x 144], rn1_12.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization(rn1_12.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c2.c.sc[16 x 1], rn1_12.c2.c.b[16 x 1], rn1_12.c2.c.m[16 x 1], rn1_12.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus(rn1_12.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear(rn1_12.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution(rn1_13.c1.c.W[16 x 144], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization(rn1_13.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c1.c.c.sc[16 x 1], rn1_13.c1.c.c.b[16 x 1], rn1_13.c1.c.c.m[16 x 1], rn1_13.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear(rn1_13.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution(rn1_13.c2.W[16 x 144], rn1_13.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization(rn1_13.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c2.c.sc[16 x 1], rn1_13.c2.c.b[16 x 1], rn1_13.c2.c.m[16 x 1], rn1_13.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus(rn1_13.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear(rn1_13.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution(rn1_14.c1.c.W[16 x 144], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization(rn1_14.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c1.c.c.sc[16 x 1], rn1_14.c1.c.c.b[16 x 1], rn1_14.c1.c.c.m[16 x 1], rn1_14.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear(rn1_14.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution(rn1_14.c2.W[16 x 144], rn1_14.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization(rn1_14.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c2.c.sc[16 x 1], rn1_14.c2.c.b[16 x 1], rn1_14.c2.c.m[16 x 1], rn1_14.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus(rn1_14.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear(rn1_14.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution(rn1_15.c1.c.W[16 x 144], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization(rn1_15.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c1.c.c.sc[16 x 1], rn1_15.c1.c.c.b[16 x 1], rn1_15.c1.c.c.m[16 x 1], rn1_15.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear(rn1_15.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution(rn1_15.c2.W[16 x 144], rn1_15.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization(rn1_15.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c2.c.sc[16 x 1], rn1_15.c2.c.b[16 x 1], rn1_15.c2.c.m[16 x 1], rn1_15.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus(rn1_15.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear(rn1_15.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution(rn1_16.c1.c.W[16 x 144], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization(rn1_16.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c1.c.c.sc[16 x 1], rn1_16.c1.c.c.b[16 x 1], rn1_16.c1.c.c.m[16 x 1], rn1_16.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear(rn1_16.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution(rn1_16.c2.W[16 x 144], rn1_16.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization(rn1_16.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c2.c.sc[16 x 1], rn1_16.c2.c.b[16 x 1], rn1_16.c2.c.m[16 x 1], rn1_16.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus(rn1_16.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear(rn1_16.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution(rn1_17.c1.c.W[16 x 144], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization(rn1_17.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c1.c.c.sc[16 x 1], rn1_17.c1.c.c.b[16 x 1], rn1_17.c1.c.c.m[16 x 1], rn1_17.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear(rn1_17.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution(rn1_17.c2.W[16 x 144], rn1_17.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization(rn1_17.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c2.c.sc[16 x 1], rn1_17.c2.c.b[16 x 1], rn1_17.c2.c.m[16 x 1], rn1_17.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus(rn1_17.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear(rn1_17.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution(rn1_18.c1.c.W[16 x 144], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization(rn1_18.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c1.c.c.sc[16 x 1], rn1_18.c1.c.c.b[16 x 1], rn1_18.c1.c.c.m[16 x 1], rn1_18.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear(rn1_18.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution(rn1_18.c2.W[16 x 144], rn1_18.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization(rn1_18.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c2.c.sc[16 x 1], rn1_18.c2.c.b[16 x 1], rn1_18.c2.c.m[16 x 1], rn1_18.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus(rn1_18.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear(rn1_18.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[32 x 144], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c1.c.c.sc[32 x 1], rn2_1.c1.c.c.b[32 x 1], rn2_1.c1.c.c.m[32 x 1], rn2_1.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[32 x 288], rn2_1.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c2.c.sc[32 x 1], rn2_1.c2.c.b[32 x 1], rn2_1.c2.c.m[32 x 1], rn2_1.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[32 x 16], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.sc[32 x 1], rn2_1.c_proj.b[32 x 1], rn2_1.c_proj.m[32 x 1], rn2_1.c_proj.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[32 x 288], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c1.c.c.sc[32 x 1], rn2_2.c1.c.c.b[32 x 1], rn2_2.c1.c.c.m[32 x 1], rn2_2.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[32 x 288], rn2_2.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c2.c.sc[32 x 1], rn2_2.c2.c.b[32 x 1], rn2_2.c2.c.m[32 x 1], rn2_2.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[32 x 288], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c1.c.c.sc[32 x 1], rn2_3.c1.c.c.b[32 x 1], rn2_3.c1.c.c.m[32 x 1], rn2_3.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[32 x 288], rn2_3.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c2.c.sc[32 x 1], rn2_3.c2.c.b[32 x 1], rn2_3.c2.c.m[32 x 1], rn2_3.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[32 x 288], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c1.c.c.sc[32 x 1], rn2_4.c1.c.c.b[32 x 1], rn2_4.c1.c.c.m[32 x 1], rn2_4.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[32 x 288], rn2_4.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c2.c.sc[32 x 1], rn2_4.c2.c.b[32 x 1], rn2_4.c2.c.m[32 x 1], rn2_4.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution(rn2_5.c1.c.W[32 x 288], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization(rn2_5.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c1.c.c.sc[32 x 1], rn2_5.c1.c.c.b[32 x 1], rn2_5.c1.c.c.m[32 x 1], rn2_5.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear(rn2_5.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution(rn2_5.c2.W[32 x 288], rn2_5.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization(rn2_5.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c2.c.sc[32 x 1], rn2_5.c2.c.b[32 x 1], rn2_5.c2.c.m[32 x 1], rn2_5.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus(rn2_5.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear(rn2_5.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution(rn2_6.c1.c.W[32 x 288], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization(rn2_6.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c1.c.c.sc[32 x 1], rn2_6.c1.c.c.b[32 x 1], rn2_6.c1.c.c.m[32 x 1], rn2_6.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear(rn2_6.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution(rn2_6.c2.W[32 x 288], rn2_6.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization(rn2_6.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c2.c.sc[32 x 1], rn2_6.c2.c.b[32 x 1], rn2_6.c2.c.m[32 x 1], rn2_6.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus(rn2_6.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear(rn2_6.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution(rn2_7.c1.c.W[32 x 288], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization(rn2_7.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c1.c.c.sc[32 x 1], rn2_7.c1.c.c.b[32 x 1], rn2_7.c1.c.c.m[32 x 1], rn2_7.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear(rn2_7.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution(rn2_7.c2.W[32 x 288], rn2_7.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization(rn2_7.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c2.c.sc[32 x 1], rn2_7.c2.c.b[32 x 1], rn2_7.c2.c.m[32 x 1], rn2_7.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus(rn2_7.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear(rn2_7.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution(rn2_8.c1.c.W[32 x 288], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization(rn2_8.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c1.c.c.sc[32 x 1], rn2_8.c1.c.c.b[32 x 1], rn2_8.c1.c.c.m[32 x 1], rn2_8.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear(rn2_8.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution(rn2_8.c2.W[32 x 288], rn2_8.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization(rn2_8.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c2.c.sc[32 x 1], rn2_8.c2.c.b[32 x 1], rn2_8.c2.c.m[32 x 1], rn2_8.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus(rn2_8.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear(rn2_8.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution(rn2_9.c1.c.W[32 x 288], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization(rn2_9.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c1.c.c.sc[32 x 1], rn2_9.c1.c.c.b[32 x 1], rn2_9.c1.c.c.m[32 x 1], rn2_9.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear(rn2_9.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution(rn2_9.c2.W[32 x 288], rn2_9.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization(rn2_9.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c2.c.sc[32 x 1], rn2_9.c2.c.b[32 x 1], rn2_9.c2.c.m[32 x 1], rn2_9.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus(rn2_9.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear(rn2_9.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution(rn2_10.c1.c.W[32 x 288], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization(rn2_10.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c1.c.c.sc[32 x 1], rn2_10.c1.c.c.b[32 x 1], rn2_10.c1.c.c.m[32 x 1], rn2_10.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear(rn2_10.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution(rn2_10.c2.W[32 x 288], rn2_10.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization(rn2_10.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c2.c.sc[32 x 1], rn2_10.c2.c.b[32 x 1], rn2_10.c2.c.m[32 x 1], rn2_10.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus(rn2_10.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear(rn2_10.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution(rn2_11.c1.c.W[32 x 288], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization(rn2_11.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c1.c.c.sc[32 x 1], rn2_11.c1.c.c.b[32 x 1], rn2_11.c1.c.c.m[32 x 1], rn2_11.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear(rn2_11.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution(rn2_11.c2.W[32 x 288], rn2_11.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization(rn2_11.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c2.c.sc[32 x 1], rn2_11.c2.c.b[32 x 1], rn2_11.c2.c.m[32 x 1], rn2_11.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus(rn2_11.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear(rn2_11.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution(rn2_12.c1.c.W[32 x 288], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization(rn2_12.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c1.c.c.sc[32 x 1], rn2_12.c1.c.c.b[32 x 1], rn2_12.c1.c.c.m[32 x 1], rn2_12.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear(rn2_12.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution(rn2_12.c2.W[32 x 288], rn2_12.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization(rn2_12.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c2.c.sc[32 x 1], rn2_12.c2.c.b[32 x 1], rn2_12.c2.c.m[32 x 1], rn2_12.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus(rn2_12.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear(rn2_12.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution(rn2_13.c1.c.W[32 x 288], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization(rn2_13.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c1.c.c.sc[32 x 1], rn2_13.c1.c.c.b[32 x 1], rn2_13.c1.c.c.m[32 x 1], rn2_13.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear(rn2_13.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution(rn2_13.c2.W[32 x 288], rn2_13.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization(rn2_13.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c2.c.sc[32 x 1], rn2_13.c2.c.b[32 x 1], rn2_13.c2.c.m[32 x 1], rn2_13.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus(rn2_13.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear(rn2_13.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution(rn2_14.c1.c.W[32 x 288], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization(rn2_14.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c1.c.c.sc[32 x 1], rn2_14.c1.c.c.b[32 x 1], rn2_14.c1.c.c.m[32 x 1], rn2_14.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear(rn2_14.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution(rn2_14.c2.W[32 x 288], rn2_14.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization(rn2_14.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c2.c.sc[32 x 1], rn2_14.c2.c.b[32 x 1], rn2_14.c2.c.m[32 x 1], rn2_14.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus(rn2_14.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear(rn2_14.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution(rn2_15.c1.c.W[32 x 288], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization(rn2_15.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c1.c.c.sc[32 x 1], rn2_15.c1.c.c.b[32 x 1], rn2_15.c1.c.c.m[32 x 1], rn2_15.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear(rn2_15.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution(rn2_15.c2.W[32 x 288], rn2_15.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization(rn2_15.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c2.c.sc[32 x 1], rn2_15.c2.c.b[32 x 1], rn2_15.c2.c.m[32 x 1], rn2_15.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus(rn2_15.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear(rn2_15.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution(rn2_16.c1.c.W[32 x 288], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization(rn2_16.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c1.c.c.sc[32 x 1], rn2_16.c1.c.c.b[32 x 1], rn2_16.c1.c.c.m[32 x 1], rn2_16.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear(rn2_16.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution(rn2_16.c2.W[32 x 288], rn2_16.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization(rn2_16.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c2.c.sc[32 x 1], rn2_16.c2.c.b[32 x 1], rn2_16.c2.c.m[32 x 1], rn2_16.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus(rn2_16.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear(rn2_16.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution(rn2_17.c1.c.W[32 x 288], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization(rn2_17.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c1.c.c.sc[32 x 1], rn2_17.c1.c.c.b[32 x 1], rn2_17.c1.c.c.m[32 x 1], rn2_17.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear(rn2_17.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution(rn2_17.c2.W[32 x 288], rn2_17.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization(rn2_17.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c2.c.sc[32 x 1], rn2_17.c2.c.b[32 x 1], rn2_17.c2.c.m[32 x 1], rn2_17.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus(rn2_17.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear(rn2_17.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution(rn2_18.c1.c.W[32 x 288], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization(rn2_18.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c1.c.c.sc[32 x 1], rn2_18.c1.c.c.b[32 x 1], rn2_18.c1.c.c.m[32 x 1], rn2_18.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear(rn2_18.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution(rn2_18.c2.W[32 x 288], rn2_18.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization(rn2_18.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c2.c.sc[32 x 1], rn2_18.c2.c.b[32 x 1], rn2_18.c2.c.m[32 x 1], rn2_18.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus(rn2_18.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear(rn2_18.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[64 x 288], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c1.c.c.sc[64 x 1], rn3_1.c1.c.c.b[64 x 1], rn3_1.c1.c.c.m[64 x 1], rn3_1.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[64 x 576], rn3_1.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c2.c.sc[64 x 1], rn3_1.c2.c.b[64 x 1], rn3_1.c2.c.m[64 x 1], rn3_1.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[64 x 32], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.sc[64 x 1], rn3_1.c_proj.b[64 x 1], rn3_1.c_proj.m[64 x 1], rn3_1.c_proj.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[64 x 576], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c1.c.c.sc[64 x 1], rn3_2.c1.c.c.b[64 x 1], rn3_2.c1.c.c.m[64 x 1], rn3_2.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[64 x 576], rn3_2.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c2.c.sc[64 x 1], rn3_2.c2.c.b[64 x 1], rn3_2.c2.c.m[64 x 1], rn3_2.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[64 x 576], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c1.c.c.sc[64 x 1], rn3_3.c1.c.c.b[64 x 1], rn3_3.c1.c.c.m[64 x 1], rn3_3.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[64 x 576], rn3_3.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c2.c.sc[64 x 1], rn3_3.c2.c.b[64 x 1], rn3_3.c2.c.m[64 x 1], rn3_3.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[64 x 576], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c1.c.c.sc[64 x 1], rn3_4.c1.c.c.b[64 x 1], rn3_4.c1.c.c.m[64 x 1], rn3_4.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[64 x 576], rn3_4.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c2.c.sc[64 x 1], rn3_4.c2.c.b[64 x 1], rn3_4.c2.c.m[64 x 1], rn3_4.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[64 x 576], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c1.c.c.sc[64 x 1], rn3_5.c1.c.c.b[64 x 1], rn3_5.c1.c.c.m[64 x 1], rn3_5.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[64 x 576], rn3_5.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c2.c.sc[64 x 1], rn3_5.c2.c.b[64 x 1], rn3_5.c2.c.m[64 x 1], rn3_5.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[64 x 576], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c1.c.c.sc[64 x 1], rn3_6.c1.c.c.b[64 x 1], rn3_6.c1.c.c.m[64 x 1], rn3_6.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[64 x 576], rn3_6.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c2.c.sc[64 x 1], rn3_6.c2.c.b[64 x 1], rn3_6.c2.c.m[64 x 1], rn3_6.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution(rn3_7.c1.c.W[64 x 576], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization(rn3_7.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c1.c.c.sc[64 x 1], rn3_7.c1.c.c.b[64 x 1], rn3_7.c1.c.c.m[64 x 1], rn3_7.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear(rn3_7.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution(rn3_7.c2.W[64 x 576], rn3_7.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization(rn3_7.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c2.c.sc[64 x 1], rn3_7.c2.c.b[64 x 1], rn3_7.c2.c.m[64 x 1], rn3_7.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus(rn3_7.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear(rn3_7.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution(rn3_8.c1.c.W[64 x 576], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization(rn3_8.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c1.c.c.sc[64 x 1], rn3_8.c1.c.c.b[64 x 1], rn3_8.c1.c.c.m[64 x 1], rn3_8.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear(rn3_8.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution(rn3_8.c2.W[64 x 576], rn3_8.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization(rn3_8.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c2.c.sc[64 x 1], rn3_8.c2.c.b[64 x 1], rn3_8.c2.c.m[64 x 1], rn3_8.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus(rn3_8.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear(rn3_8.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution(rn3_9.c1.c.W[64 x 576], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization(rn3_9.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c1.c.c.sc[64 x 1], rn3_9.c1.c.c.b[64 x 1], rn3_9.c1.c.c.m[64 x 1], rn3_9.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear(rn3_9.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution(rn3_9.c2.W[64 x 576], rn3_9.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization(rn3_9.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c2.c.sc[64 x 1], rn3_9.c2.c.b[64 x 1], rn3_9.c2.c.m[64 x 1], rn3_9.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus(rn3_9.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear(rn3_9.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution(rn3_10.c1.c.W[64 x 576], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization(rn3_10.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c1.c.c.sc[64 x 1], rn3_10.c1.c.c.b[64 x 1], rn3_10.c1.c.c.m[64 x 1], rn3_10.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear(rn3_10.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution(rn3_10.c2.W[64 x 576], rn3_10.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization(rn3_10.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c2.c.sc[64 x 1], rn3_10.c2.c.b[64 x 1], rn3_10.c2.c.m[64 x 1], rn3_10.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus(rn3_10.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear(rn3_10.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution(rn3_11.c1.c.W[64 x 576], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization(rn3_11.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c1.c.c.sc[64 x 1], rn3_11.c1.c.c.b[64 x 1], rn3_11.c1.c.c.m[64 x 1], rn3_11.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear(rn3_11.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution(rn3_11.c2.W[64 x 576], rn3_11.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization(rn3_11.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c2.c.sc[64 x 1], rn3_11.c2.c.b[64 x 1], rn3_11.c2.c.m[64 x 1], rn3_11.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus(rn3_11.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear(rn3_11.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution(rn3_12.c1.c.W[64 x 576], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization(rn3_12.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c1.c.c.sc[64 x 1], rn3_12.c1.c.c.b[64 x 1], rn3_12.c1.c.c.m[64 x 1], rn3_12.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear(rn3_12.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution(rn3_12.c2.W[64 x 576], rn3_12.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization(rn3_12.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c2.c.sc[64 x 1], rn3_12.c2.c.b[64 x 1], rn3_12.c2.c.m[64 x 1], rn3_12.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus(rn3_12.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear(rn3_12.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution(rn3_13.c1.c.W[64 x 576], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization(rn3_13.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c1.c.c.sc[64 x 1], rn3_13.c1.c.c.b[64 x 1], rn3_13.c1.c.c.m[64 x 1], rn3_13.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear(rn3_13.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution(rn3_13.c2.W[64 x 576], rn3_13.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization(rn3_13.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c2.c.sc[64 x 1], rn3_13.c2.c.b[64 x 1], rn3_13.c2.c.m[64 x 1], rn3_13.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus(rn3_13.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear(rn3_13.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution(rn3_14.c1.c.W[64 x 576], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization(rn3_14.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c1.c.c.sc[64 x 1], rn3_14.c1.c.c.b[64 x 1], rn3_14.c1.c.c.m[64 x 1], rn3_14.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear(rn3_14.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution(rn3_14.c2.W[64 x 576], rn3_14.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization(rn3_14.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c2.c.sc[64 x 1], rn3_14.c2.c.b[64 x 1], rn3_14.c2.c.m[64 x 1], rn3_14.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus(rn3_14.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear(rn3_14.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution(rn3_15.c1.c.W[64 x 576], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization(rn3_15.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c1.c.c.sc[64 x 1], rn3_15.c1.c.c.b[64 x 1], rn3_15.c1.c.c.m[64 x 1], rn3_15.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear(rn3_15.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution(rn3_15.c2.W[64 x 576], rn3_15.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization(rn3_15.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c2.c.sc[64 x 1], rn3_15.c2.c.b[64 x 1], rn3_15.c2.c.m[64 x 1], rn3_15.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus(rn3_15.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear(rn3_15.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution(rn3_16.c1.c.W[64 x 576], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization(rn3_16.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c1.c.c.sc[64 x 1], rn3_16.c1.c.c.b[64 x 1], rn3_16.c1.c.c.m[64 x 1], rn3_16.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear(rn3_16.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution(rn3_16.c2.W[64 x 576], rn3_16.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization(rn3_16.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c2.c.sc[64 x 1], rn3_16.c2.c.b[64 x 1], rn3_16.c2.c.m[64 x 1], rn3_16.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus(rn3_16.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear(rn3_16.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution(rn3_17.c1.c.W[64 x 576], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization(rn3_17.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c1.c.c.sc[64 x 1], rn3_17.c1.c.c.b[64 x 1], rn3_17.c1.c.c.m[64 x 1], rn3_17.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear(rn3_17.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution(rn3_17.c2.W[64 x 576], rn3_17.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization(rn3_17.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c2.c.sc[64 x 1], rn3_17.c2.c.b[64 x 1], rn3_17.c2.c.m[64 x 1], rn3_17.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus(rn3_17.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear(rn3_17.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution(rn3_18.c1.c.W[64 x 576], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization(rn3_18.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c1.c.c.sc[64 x 1], rn3_18.c1.c.c.b[64 x 1], rn3_18.c1.c.c.m[64 x 1], rn3_18.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear(rn3_18.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution(rn3_18.c2.W[64 x 576], rn3_18.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization(rn3_18.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c2.c.sc[64 x 1], rn3_18.c2.c.b[64 x 1], rn3_18.c2.c.m[64 x 1], rn3_18.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus(rn3_18.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear(rn3_18.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling(rn3_18.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[10 x 64], pool[1 x 1 x 64 x *]) -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter -> [10]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10 x *], OutputNodes.b[10]) -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[10 x *], OutputNodes.z[10 x *]) -> [1]
Validating --> Err = ErrorPrediction(labels[10 x *], OutputNodes.z[10 x *]) -> [1]

Validating network, final pass.

Validating --> labels = InputValue -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter -> [16 x 27]
Validating --> features = InputValue -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[16 x 27], features[32 x 32 x 3 x * {W=32, H=3, C=32}]) -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.c.c.sc[16 x 1], conv1.c.c.b[16 x 1], conv1.c.c.m[16 x 1], conv1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[16 x 144], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c1.c.c.sc[16 x 1], rn1_1.c1.c.c.b[16 x 1], rn1_1.c1.c.c.m[16 x 1], rn1_1.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[16 x 144], rn1_1.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c2.c.sc[16 x 1], rn1_1.c2.c.b[16 x 1], rn1_1.c2.c.m[16 x 1], rn1_1.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[16 x 144], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c1.c.c.sc[16 x 1], rn1_2.c1.c.c.b[16 x 1], rn1_2.c1.c.c.m[16 x 1], rn1_2.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[16 x 144], rn1_2.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c2.c.sc[16 x 1], rn1_2.c2.c.b[16 x 1], rn1_2.c2.c.m[16 x 1], rn1_2.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[16 x 144], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c1.c.c.sc[16 x 1], rn1_3.c1.c.c.b[16 x 1], rn1_3.c1.c.c.m[16 x 1], rn1_3.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[16 x 144], rn1_3.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c2.c.sc[16 x 1], rn1_3.c2.c.b[16 x 1], rn1_3.c2.c.m[16 x 1], rn1_3.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution(rn1_4.c1.c.W[16 x 144], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization(rn1_4.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c1.c.c.sc[16 x 1], rn1_4.c1.c.c.b[16 x 1], rn1_4.c1.c.c.m[16 x 1], rn1_4.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear(rn1_4.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution(rn1_4.c2.W[16 x 144], rn1_4.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization(rn1_4.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c2.c.sc[16 x 1], rn1_4.c2.c.b[16 x 1], rn1_4.c2.c.m[16 x 1], rn1_4.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus(rn1_4.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear(rn1_4.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution(rn1_5.c1.c.W[16 x 144], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization(rn1_5.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c1.c.c.sc[16 x 1], rn1_5.c1.c.c.b[16 x 1], rn1_5.c1.c.c.m[16 x 1], rn1_5.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear(rn1_5.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution(rn1_5.c2.W[16 x 144], rn1_5.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization(rn1_5.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c2.c.sc[16 x 1], rn1_5.c2.c.b[16 x 1], rn1_5.c2.c.m[16 x 1], rn1_5.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus(rn1_5.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear(rn1_5.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution(rn1_6.c1.c.W[16 x 144], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization(rn1_6.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c1.c.c.sc[16 x 1], rn1_6.c1.c.c.b[16 x 1], rn1_6.c1.c.c.m[16 x 1], rn1_6.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear(rn1_6.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution(rn1_6.c2.W[16 x 144], rn1_6.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization(rn1_6.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c2.c.sc[16 x 1], rn1_6.c2.c.b[16 x 1], rn1_6.c2.c.m[16 x 1], rn1_6.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus(rn1_6.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear(rn1_6.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution(rn1_7.c1.c.W[16 x 144], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization(rn1_7.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c1.c.c.sc[16 x 1], rn1_7.c1.c.c.b[16 x 1], rn1_7.c1.c.c.m[16 x 1], rn1_7.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear(rn1_7.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution(rn1_7.c2.W[16 x 144], rn1_7.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization(rn1_7.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c2.c.sc[16 x 1], rn1_7.c2.c.b[16 x 1], rn1_7.c2.c.m[16 x 1], rn1_7.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus(rn1_7.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear(rn1_7.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution(rn1_8.c1.c.W[16 x 144], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization(rn1_8.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c1.c.c.sc[16 x 1], rn1_8.c1.c.c.b[16 x 1], rn1_8.c1.c.c.m[16 x 1], rn1_8.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear(rn1_8.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution(rn1_8.c2.W[16 x 144], rn1_8.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization(rn1_8.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c2.c.sc[16 x 1], rn1_8.c2.c.b[16 x 1], rn1_8.c2.c.m[16 x 1], rn1_8.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus(rn1_8.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear(rn1_8.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution(rn1_9.c1.c.W[16 x 144], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization(rn1_9.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c1.c.c.sc[16 x 1], rn1_9.c1.c.c.b[16 x 1], rn1_9.c1.c.c.m[16 x 1], rn1_9.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear(rn1_9.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution(rn1_9.c2.W[16 x 144], rn1_9.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization(rn1_9.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c2.c.sc[16 x 1], rn1_9.c2.c.b[16 x 1], rn1_9.c2.c.m[16 x 1], rn1_9.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus(rn1_9.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear(rn1_9.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution(rn1_10.c1.c.W[16 x 144], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization(rn1_10.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c1.c.c.sc[16 x 1], rn1_10.c1.c.c.b[16 x 1], rn1_10.c1.c.c.m[16 x 1], rn1_10.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear(rn1_10.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution(rn1_10.c2.W[16 x 144], rn1_10.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization(rn1_10.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c2.c.sc[16 x 1], rn1_10.c2.c.b[16 x 1], rn1_10.c2.c.m[16 x 1], rn1_10.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus(rn1_10.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear(rn1_10.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution(rn1_11.c1.c.W[16 x 144], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization(rn1_11.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c1.c.c.sc[16 x 1], rn1_11.c1.c.c.b[16 x 1], rn1_11.c1.c.c.m[16 x 1], rn1_11.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear(rn1_11.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution(rn1_11.c2.W[16 x 144], rn1_11.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization(rn1_11.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c2.c.sc[16 x 1], rn1_11.c2.c.b[16 x 1], rn1_11.c2.c.m[16 x 1], rn1_11.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus(rn1_11.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear(rn1_11.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution(rn1_12.c1.c.W[16 x 144], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization(rn1_12.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c1.c.c.sc[16 x 1], rn1_12.c1.c.c.b[16 x 1], rn1_12.c1.c.c.m[16 x 1], rn1_12.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear(rn1_12.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution(rn1_12.c2.W[16 x 144], rn1_12.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization(rn1_12.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c2.c.sc[16 x 1], rn1_12.c2.c.b[16 x 1], rn1_12.c2.c.m[16 x 1], rn1_12.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus(rn1_12.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear(rn1_12.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution(rn1_13.c1.c.W[16 x 144], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization(rn1_13.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c1.c.c.sc[16 x 1], rn1_13.c1.c.c.b[16 x 1], rn1_13.c1.c.c.m[16 x 1], rn1_13.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear(rn1_13.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution(rn1_13.c2.W[16 x 144], rn1_13.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization(rn1_13.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c2.c.sc[16 x 1], rn1_13.c2.c.b[16 x 1], rn1_13.c2.c.m[16 x 1], rn1_13.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus(rn1_13.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear(rn1_13.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution(rn1_14.c1.c.W[16 x 144], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization(rn1_14.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c1.c.c.sc[16 x 1], rn1_14.c1.c.c.b[16 x 1], rn1_14.c1.c.c.m[16 x 1], rn1_14.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear(rn1_14.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution(rn1_14.c2.W[16 x 144], rn1_14.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization(rn1_14.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c2.c.sc[16 x 1], rn1_14.c2.c.b[16 x 1], rn1_14.c2.c.m[16 x 1], rn1_14.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus(rn1_14.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear(rn1_14.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution(rn1_15.c1.c.W[16 x 144], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization(rn1_15.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c1.c.c.sc[16 x 1], rn1_15.c1.c.c.b[16 x 1], rn1_15.c1.c.c.m[16 x 1], rn1_15.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear(rn1_15.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution(rn1_15.c2.W[16 x 144], rn1_15.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization(rn1_15.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c2.c.sc[16 x 1], rn1_15.c2.c.b[16 x 1], rn1_15.c2.c.m[16 x 1], rn1_15.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus(rn1_15.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear(rn1_15.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution(rn1_16.c1.c.W[16 x 144], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization(rn1_16.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c1.c.c.sc[16 x 1], rn1_16.c1.c.c.b[16 x 1], rn1_16.c1.c.c.m[16 x 1], rn1_16.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear(rn1_16.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution(rn1_16.c2.W[16 x 144], rn1_16.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization(rn1_16.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c2.c.sc[16 x 1], rn1_16.c2.c.b[16 x 1], rn1_16.c2.c.m[16 x 1], rn1_16.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus(rn1_16.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear(rn1_16.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution(rn1_17.c1.c.W[16 x 144], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization(rn1_17.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c1.c.c.sc[16 x 1], rn1_17.c1.c.c.b[16 x 1], rn1_17.c1.c.c.m[16 x 1], rn1_17.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear(rn1_17.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution(rn1_17.c2.W[16 x 144], rn1_17.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization(rn1_17.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c2.c.sc[16 x 1], rn1_17.c2.c.b[16 x 1], rn1_17.c2.c.m[16 x 1], rn1_17.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus(rn1_17.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear(rn1_17.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution(rn1_18.c1.c.W[16 x 144], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization(rn1_18.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c1.c.c.sc[16 x 1], rn1_18.c1.c.c.b[16 x 1], rn1_18.c1.c.c.m[16 x 1], rn1_18.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear(rn1_18.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution(rn1_18.c2.W[16 x 144], rn1_18.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization(rn1_18.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c2.c.sc[16 x 1], rn1_18.c2.c.b[16 x 1], rn1_18.c2.c.m[16 x 1], rn1_18.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus(rn1_18.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear(rn1_18.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[32 x 144], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c1.c.c.sc[32 x 1], rn2_1.c1.c.c.b[32 x 1], rn2_1.c1.c.c.m[32 x 1], rn2_1.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[32 x 288], rn2_1.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c2.c.sc[32 x 1], rn2_1.c2.c.b[32 x 1], rn2_1.c2.c.m[32 x 1], rn2_1.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[32 x 16], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.sc[32 x 1], rn2_1.c_proj.b[32 x 1], rn2_1.c_proj.m[32 x 1], rn2_1.c_proj.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[32 x 288], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c1.c.c.sc[32 x 1], rn2_2.c1.c.c.b[32 x 1], rn2_2.c1.c.c.m[32 x 1], rn2_2.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[32 x 288], rn2_2.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c2.c.sc[32 x 1], rn2_2.c2.c.b[32 x 1], rn2_2.c2.c.m[32 x 1], rn2_2.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[32 x 288], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c1.c.c.sc[32 x 1], rn2_3.c1.c.c.b[32 x 1], rn2_3.c1.c.c.m[32 x 1], rn2_3.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[32 x 288], rn2_3.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c2.c.sc[32 x 1], rn2_3.c2.c.b[32 x 1], rn2_3.c2.c.m[32 x 1], rn2_3.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[32 x 288], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c1.c.c.sc[32 x 1], rn2_4.c1.c.c.b[32 x 1], rn2_4.c1.c.c.m[32 x 1], rn2_4.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[32 x 288], rn2_4.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c2.c.sc[32 x 1], rn2_4.c2.c.b[32 x 1], rn2_4.c2.c.m[32 x 1], rn2_4.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution(rn2_5.c1.c.W[32 x 288], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization(rn2_5.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c1.c.c.sc[32 x 1], rn2_5.c1.c.c.b[32 x 1], rn2_5.c1.c.c.m[32 x 1], rn2_5.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear(rn2_5.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution(rn2_5.c2.W[32 x 288], rn2_5.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization(rn2_5.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c2.c.sc[32 x 1], rn2_5.c2.c.b[32 x 1], rn2_5.c2.c.m[32 x 1], rn2_5.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus(rn2_5.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear(rn2_5.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution(rn2_6.c1.c.W[32 x 288], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization(rn2_6.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c1.c.c.sc[32 x 1], rn2_6.c1.c.c.b[32 x 1], rn2_6.c1.c.c.m[32 x 1], rn2_6.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear(rn2_6.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution(rn2_6.c2.W[32 x 288], rn2_6.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization(rn2_6.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c2.c.sc[32 x 1], rn2_6.c2.c.b[32 x 1], rn2_6.c2.c.m[32 x 1], rn2_6.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus(rn2_6.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear(rn2_6.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution(rn2_7.c1.c.W[32 x 288], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization(rn2_7.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c1.c.c.sc[32 x 1], rn2_7.c1.c.c.b[32 x 1], rn2_7.c1.c.c.m[32 x 1], rn2_7.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear(rn2_7.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution(rn2_7.c2.W[32 x 288], rn2_7.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization(rn2_7.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c2.c.sc[32 x 1], rn2_7.c2.c.b[32 x 1], rn2_7.c2.c.m[32 x 1], rn2_7.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus(rn2_7.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear(rn2_7.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution(rn2_8.c1.c.W[32 x 288], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization(rn2_8.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c1.c.c.sc[32 x 1], rn2_8.c1.c.c.b[32 x 1], rn2_8.c1.c.c.m[32 x 1], rn2_8.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear(rn2_8.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution(rn2_8.c2.W[32 x 288], rn2_8.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization(rn2_8.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c2.c.sc[32 x 1], rn2_8.c2.c.b[32 x 1], rn2_8.c2.c.m[32 x 1], rn2_8.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus(rn2_8.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear(rn2_8.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution(rn2_9.c1.c.W[32 x 288], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization(rn2_9.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c1.c.c.sc[32 x 1], rn2_9.c1.c.c.b[32 x 1], rn2_9.c1.c.c.m[32 x 1], rn2_9.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear(rn2_9.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution(rn2_9.c2.W[32 x 288], rn2_9.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization(rn2_9.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c2.c.sc[32 x 1], rn2_9.c2.c.b[32 x 1], rn2_9.c2.c.m[32 x 1], rn2_9.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus(rn2_9.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear(rn2_9.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution(rn2_10.c1.c.W[32 x 288], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization(rn2_10.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c1.c.c.sc[32 x 1], rn2_10.c1.c.c.b[32 x 1], rn2_10.c1.c.c.m[32 x 1], rn2_10.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear(rn2_10.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution(rn2_10.c2.W[32 x 288], rn2_10.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization(rn2_10.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c2.c.sc[32 x 1], rn2_10.c2.c.b[32 x 1], rn2_10.c2.c.m[32 x 1], rn2_10.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus(rn2_10.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear(rn2_10.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution(rn2_11.c1.c.W[32 x 288], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization(rn2_11.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c1.c.c.sc[32 x 1], rn2_11.c1.c.c.b[32 x 1], rn2_11.c1.c.c.m[32 x 1], rn2_11.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear(rn2_11.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution(rn2_11.c2.W[32 x 288], rn2_11.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization(rn2_11.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c2.c.sc[32 x 1], rn2_11.c2.c.b[32 x 1], rn2_11.c2.c.m[32 x 1], rn2_11.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus(rn2_11.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear(rn2_11.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution(rn2_12.c1.c.W[32 x 288], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization(rn2_12.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c1.c.c.sc[32 x 1], rn2_12.c1.c.c.b[32 x 1], rn2_12.c1.c.c.m[32 x 1], rn2_12.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear(rn2_12.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution(rn2_12.c2.W[32 x 288], rn2_12.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization(rn2_12.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c2.c.sc[32 x 1], rn2_12.c2.c.b[32 x 1], rn2_12.c2.c.m[32 x 1], rn2_12.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus(rn2_12.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear(rn2_12.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution(rn2_13.c1.c.W[32 x 288], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization(rn2_13.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c1.c.c.sc[32 x 1], rn2_13.c1.c.c.b[32 x 1], rn2_13.c1.c.c.m[32 x 1], rn2_13.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear(rn2_13.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution(rn2_13.c2.W[32 x 288], rn2_13.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization(rn2_13.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c2.c.sc[32 x 1], rn2_13.c2.c.b[32 x 1], rn2_13.c2.c.m[32 x 1], rn2_13.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus(rn2_13.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear(rn2_13.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution(rn2_14.c1.c.W[32 x 288], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization(rn2_14.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c1.c.c.sc[32 x 1], rn2_14.c1.c.c.b[32 x 1], rn2_14.c1.c.c.m[32 x 1], rn2_14.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear(rn2_14.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution(rn2_14.c2.W[32 x 288], rn2_14.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization(rn2_14.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c2.c.sc[32 x 1], rn2_14.c2.c.b[32 x 1], rn2_14.c2.c.m[32 x 1], rn2_14.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus(rn2_14.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear(rn2_14.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution(rn2_15.c1.c.W[32 x 288], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization(rn2_15.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c1.c.c.sc[32 x 1], rn2_15.c1.c.c.b[32 x 1], rn2_15.c1.c.c.m[32 x 1], rn2_15.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear(rn2_15.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution(rn2_15.c2.W[32 x 288], rn2_15.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization(rn2_15.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c2.c.sc[32 x 1], rn2_15.c2.c.b[32 x 1], rn2_15.c2.c.m[32 x 1], rn2_15.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus(rn2_15.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear(rn2_15.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution(rn2_16.c1.c.W[32 x 288], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization(rn2_16.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c1.c.c.sc[32 x 1], rn2_16.c1.c.c.b[32 x 1], rn2_16.c1.c.c.m[32 x 1], rn2_16.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear(rn2_16.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution(rn2_16.c2.W[32 x 288], rn2_16.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization(rn2_16.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c2.c.sc[32 x 1], rn2_16.c2.c.b[32 x 1], rn2_16.c2.c.m[32 x 1], rn2_16.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus(rn2_16.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear(rn2_16.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution(rn2_17.c1.c.W[32 x 288], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization(rn2_17.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c1.c.c.sc[32 x 1], rn2_17.c1.c.c.b[32 x 1], rn2_17.c1.c.c.m[32 x 1], rn2_17.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear(rn2_17.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution(rn2_17.c2.W[32 x 288], rn2_17.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization(rn2_17.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c2.c.sc[32 x 1], rn2_17.c2.c.b[32 x 1], rn2_17.c2.c.m[32 x 1], rn2_17.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus(rn2_17.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear(rn2_17.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution(rn2_18.c1.c.W[32 x 288], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization(rn2_18.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c1.c.c.sc[32 x 1], rn2_18.c1.c.c.b[32 x 1], rn2_18.c1.c.c.m[32 x 1], rn2_18.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear(rn2_18.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution(rn2_18.c2.W[32 x 288], rn2_18.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization(rn2_18.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c2.c.sc[32 x 1], rn2_18.c2.c.b[32 x 1], rn2_18.c2.c.m[32 x 1], rn2_18.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus(rn2_18.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear(rn2_18.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[64 x 288], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c1.c.c.sc[64 x 1], rn3_1.c1.c.c.b[64 x 1], rn3_1.c1.c.c.m[64 x 1], rn3_1.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[64 x 576], rn3_1.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c2.c.sc[64 x 1], rn3_1.c2.c.b[64 x 1], rn3_1.c2.c.m[64 x 1], rn3_1.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[64 x 32], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.sc[64 x 1], rn3_1.c_proj.b[64 x 1], rn3_1.c_proj.m[64 x 1], rn3_1.c_proj.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[64 x 576], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c1.c.c.sc[64 x 1], rn3_2.c1.c.c.b[64 x 1], rn3_2.c1.c.c.m[64 x 1], rn3_2.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[64 x 576], rn3_2.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c2.c.sc[64 x 1], rn3_2.c2.c.b[64 x 1], rn3_2.c2.c.m[64 x 1], rn3_2.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[64 x 576], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c1.c.c.sc[64 x 1], rn3_3.c1.c.c.b[64 x 1], rn3_3.c1.c.c.m[64 x 1], rn3_3.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[64 x 576], rn3_3.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c2.c.sc[64 x 1], rn3_3.c2.c.b[64 x 1], rn3_3.c2.c.m[64 x 1], rn3_3.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[64 x 576], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c1.c.c.sc[64 x 1], rn3_4.c1.c.c.b[64 x 1], rn3_4.c1.c.c.m[64 x 1], rn3_4.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[64 x 576], rn3_4.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c2.c.sc[64 x 1], rn3_4.c2.c.b[64 x 1], rn3_4.c2.c.m[64 x 1], rn3_4.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[64 x 576], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c1.c.c.sc[64 x 1], rn3_5.c1.c.c.b[64 x 1], rn3_5.c1.c.c.m[64 x 1], rn3_5.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[64 x 576], rn3_5.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c2.c.sc[64 x 1], rn3_5.c2.c.b[64 x 1], rn3_5.c2.c.m[64 x 1], rn3_5.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[64 x 576], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c1.c.c.sc[64 x 1], rn3_6.c1.c.c.b[64 x 1], rn3_6.c1.c.c.m[64 x 1], rn3_6.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[64 x 576], rn3_6.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c2.c.sc[64 x 1], rn3_6.c2.c.b[64 x 1], rn3_6.c2.c.m[64 x 1], rn3_6.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution(rn3_7.c1.c.W[64 x 576], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization(rn3_7.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c1.c.c.sc[64 x 1], rn3_7.c1.c.c.b[64 x 1], rn3_7.c1.c.c.m[64 x 1], rn3_7.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear(rn3_7.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution(rn3_7.c2.W[64 x 576], rn3_7.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization(rn3_7.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c2.c.sc[64 x 1], rn3_7.c2.c.b[64 x 1], rn3_7.c2.c.m[64 x 1], rn3_7.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus(rn3_7.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear(rn3_7.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution(rn3_8.c1.c.W[64 x 576], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization(rn3_8.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c1.c.c.sc[64 x 1], rn3_8.c1.c.c.b[64 x 1], rn3_8.c1.c.c.m[64 x 1], rn3_8.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear(rn3_8.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution(rn3_8.c2.W[64 x 576], rn3_8.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization(rn3_8.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c2.c.sc[64 x 1], rn3_8.c2.c.b[64 x 1], rn3_8.c2.c.m[64 x 1], rn3_8.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus(rn3_8.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear(rn3_8.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution(rn3_9.c1.c.W[64 x 576], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization(rn3_9.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c1.c.c.sc[64 x 1], rn3_9.c1.c.c.b[64 x 1], rn3_9.c1.c.c.m[64 x 1], rn3_9.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear(rn3_9.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution(rn3_9.c2.W[64 x 576], rn3_9.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization(rn3_9.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c2.c.sc[64 x 1], rn3_9.c2.c.b[64 x 1], rn3_9.c2.c.m[64 x 1], rn3_9.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus(rn3_9.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear(rn3_9.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution(rn3_10.c1.c.W[64 x 576], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization(rn3_10.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c1.c.c.sc[64 x 1], rn3_10.c1.c.c.b[64 x 1], rn3_10.c1.c.c.m[64 x 1], rn3_10.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear(rn3_10.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution(rn3_10.c2.W[64 x 576], rn3_10.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization(rn3_10.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c2.c.sc[64 x 1], rn3_10.c2.c.b[64 x 1], rn3_10.c2.c.m[64 x 1], rn3_10.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus(rn3_10.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear(rn3_10.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution(rn3_11.c1.c.W[64 x 576], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization(rn3_11.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c1.c.c.sc[64 x 1], rn3_11.c1.c.c.b[64 x 1], rn3_11.c1.c.c.m[64 x 1], rn3_11.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear(rn3_11.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution(rn3_11.c2.W[64 x 576], rn3_11.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization(rn3_11.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c2.c.sc[64 x 1], rn3_11.c2.c.b[64 x 1], rn3_11.c2.c.m[64 x 1], rn3_11.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus(rn3_11.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear(rn3_11.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution(rn3_12.c1.c.W[64 x 576], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization(rn3_12.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c1.c.c.sc[64 x 1], rn3_12.c1.c.c.b[64 x 1], rn3_12.c1.c.c.m[64 x 1], rn3_12.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear(rn3_12.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution(rn3_12.c2.W[64 x 576], rn3_12.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization(rn3_12.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c2.c.sc[64 x 1], rn3_12.c2.c.b[64 x 1], rn3_12.c2.c.m[64 x 1], rn3_12.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus(rn3_12.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear(rn3_12.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution(rn3_13.c1.c.W[64 x 576], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization(rn3_13.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c1.c.c.sc[64 x 1], rn3_13.c1.c.c.b[64 x 1], rn3_13.c1.c.c.m[64 x 1], rn3_13.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear(rn3_13.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution(rn3_13.c2.W[64 x 576], rn3_13.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization(rn3_13.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c2.c.sc[64 x 1], rn3_13.c2.c.b[64 x 1], rn3_13.c2.c.m[64 x 1], rn3_13.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus(rn3_13.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear(rn3_13.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution(rn3_14.c1.c.W[64 x 576], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization(rn3_14.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c1.c.c.sc[64 x 1], rn3_14.c1.c.c.b[64 x 1], rn3_14.c1.c.c.m[64 x 1], rn3_14.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear(rn3_14.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution(rn3_14.c2.W[64 x 576], rn3_14.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization(rn3_14.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c2.c.sc[64 x 1], rn3_14.c2.c.b[64 x 1], rn3_14.c2.c.m[64 x 1], rn3_14.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus(rn3_14.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear(rn3_14.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution(rn3_15.c1.c.W[64 x 576], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization(rn3_15.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c1.c.c.sc[64 x 1], rn3_15.c1.c.c.b[64 x 1], rn3_15.c1.c.c.m[64 x 1], rn3_15.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear(rn3_15.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution(rn3_15.c2.W[64 x 576], rn3_15.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization(rn3_15.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c2.c.sc[64 x 1], rn3_15.c2.c.b[64 x 1], rn3_15.c2.c.m[64 x 1], rn3_15.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus(rn3_15.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear(rn3_15.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution(rn3_16.c1.c.W[64 x 576], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization(rn3_16.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c1.c.c.sc[64 x 1], rn3_16.c1.c.c.b[64 x 1], rn3_16.c1.c.c.m[64 x 1], rn3_16.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear(rn3_16.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution(rn3_16.c2.W[64 x 576], rn3_16.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization(rn3_16.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c2.c.sc[64 x 1], rn3_16.c2.c.b[64 x 1], rn3_16.c2.c.m[64 x 1], rn3_16.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus(rn3_16.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear(rn3_16.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution(rn3_17.c1.c.W[64 x 576], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization(rn3_17.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c1.c.c.sc[64 x 1], rn3_17.c1.c.c.b[64 x 1], rn3_17.c1.c.c.m[64 x 1], rn3_17.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear(rn3_17.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution(rn3_17.c2.W[64 x 576], rn3_17.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization(rn3_17.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c2.c.sc[64 x 1], rn3_17.c2.c.b[64 x 1], rn3_17.c2.c.m[64 x 1], rn3_17.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus(rn3_17.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear(rn3_17.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution(rn3_18.c1.c.W[64 x 576], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization(rn3_18.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c1.c.c.sc[64 x 1], rn3_18.c1.c.c.b[64 x 1], rn3_18.c1.c.c.m[64 x 1], rn3_18.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear(rn3_18.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution(rn3_18.c2.W[64 x 576], rn3_18.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization(rn3_18.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c2.c.sc[64 x 1], rn3_18.c2.c.b[64 x 1], rn3_18.c2.c.m[64 x 1], rn3_18.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus(rn3_18.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear(rn3_18.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling(rn3_18.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[10 x 64], pool[1 x 1 x 64 x *]) -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter -> [10]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10 x *], OutputNodes.b[10]) -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[10 x *], OutputNodes.z[10 x *]) -> [1]
Validating --> Err = ErrorPrediction(labels[10 x *], OutputNodes.z[10 x *]) -> [1]

559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

SGD using GPU 0.

Training criterion node(s):
	CE = CrossEntropyWithSoftmax

Evaluation criterion node(s):
	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
No PreCompute nodes found, skipping PreCompute step
Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 1 of 160]-Minibatch[   1- 200]: SamplesSeen = 25600; TrainLossPerSample =  2.08201447; EvalErr[0]PerSample = 0.79109375; TotalTime = 37.3101s; SamplesPerSecond = 686.1
Finished Epoch[ 1 of 160]: [Training Set] TrainLossPerSample = 1.9284772; EvalErrPerSample = 0.73097998; AvgLearningRatePerSample = 0.00078125001; EpochTime=69.7251
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.1'
Starting Epoch 2: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 2 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  1.80199310; EvalErr[0]PerSample = 0.68078125; TotalTime = 34.7295s; SamplesPerSecond = 737.1
Finished Epoch[ 2 of 160]: [Training Set] TrainLossPerSample = 1.6386911; EvalErrPerSample = 0.61193997; AvgLearningRatePerSample = 0.0078125; EpochTime=67.9925
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.2'
Starting Epoch 3: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 3 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  1.25481010; EvalErr[0]PerSample = 0.45394531; TotalTime = 34.5533s; SamplesPerSecond = 740.9
Finished Epoch[ 3 of 160]: [Training Set] TrainLossPerSample = 1.1870104; EvalErrPerSample = 0.42773998; AvgLearningRatePerSample = 0.0078125; EpochTime=67.6327
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.3'
Starting Epoch 4: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 4 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  1.00952705; EvalErr[0]PerSample = 0.36304687; TotalTime = 34.5927s; SamplesPerSecond = 740.0
Finished Epoch[ 4 of 160]: [Training Set] TrainLossPerSample = 0.97715324; EvalErrPerSample = 0.34739998; AvgLearningRatePerSample = 0.0078125; EpochTime=67.5202
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.4'
Starting Epoch 5: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 5 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.84818413; EvalErr[0]PerSample = 0.29589844; TotalTime = 34.3363s; SamplesPerSecond = 745.6
Finished Epoch[ 5 of 160]: [Training Set] TrainLossPerSample = 0.83634055; EvalErrPerSample = 0.29328001; AvgLearningRatePerSample = 0.0078125; EpochTime=67.0961
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.5'
Starting Epoch 6: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 6 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.74924049; EvalErr[0]PerSample = 0.26066406; TotalTime = 34.2546s; SamplesPerSecond = 747.3
Finished Epoch[ 6 of 160]: [Training Set] TrainLossPerSample = 0.73574179; EvalErrPerSample = 0.25577998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9549
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.6'
Starting Epoch 7: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 7 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.66103149; EvalErr[0]PerSample = 0.22968750; TotalTime = 34.2366s; SamplesPerSecond = 747.7
Finished Epoch[ 7 of 160]: [Training Set] TrainLossPerSample = 0.65649849; EvalErrPerSample = 0.22679999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8964
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.7'
Starting Epoch 8: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 8 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.59962826; EvalErr[0]PerSample = 0.20585938; TotalTime = 34.2398s; SamplesPerSecond = 747.7
Finished Epoch[ 8 of 160]: [Training Set] TrainLossPerSample = 0.59828544; EvalErrPerSample = 0.20622; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8987
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.8'
Starting Epoch 9: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[ 9 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.56160091; EvalErr[0]PerSample = 0.19425781; TotalTime = 34.2457s; SamplesPerSecond = 747.5
Finished Epoch[ 9 of 160]: [Training Set] TrainLossPerSample = 0.56435287; EvalErrPerSample = 0.19484; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9167
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.9'
Starting Epoch 10: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[10 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.52267384; EvalErr[0]PerSample = 0.18140625; TotalTime = 34.2539s; SamplesPerSecond = 747.4
Finished Epoch[10 of 160]: [Training Set] TrainLossPerSample = 0.517959; EvalErrPerSample = 0.17936; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9219
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.10'
Starting Epoch 11: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[11 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.49345413; EvalErr[0]PerSample = 0.17046875; TotalTime = 34.2380s; SamplesPerSecond = 747.7
Finished Epoch[11 of 160]: [Training Set] TrainLossPerSample = 0.48473847; EvalErrPerSample = 0.16725999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9081
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.11'
Starting Epoch 12: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[12 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.46631210; EvalErr[0]PerSample = 0.16121094; TotalTime = 34.2568s; SamplesPerSecond = 747.3
Finished Epoch[12 of 160]: [Training Set] TrainLossPerSample = 0.46427867; EvalErrPerSample = 0.16023999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.989
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.12'
Starting Epoch 13: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[13 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.44940582; EvalErr[0]PerSample = 0.15414063; TotalTime = 34.2965s; SamplesPerSecond = 746.4
Finished Epoch[13 of 160]: [Training Set] TrainLossPerSample = 0.44242746; EvalErrPerSample = 0.15223999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9538
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.13'
Starting Epoch 14: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[14 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.41690651; EvalErr[0]PerSample = 0.14292969; TotalTime = 34.2325s; SamplesPerSecond = 747.8
Finished Epoch[14 of 160]: [Training Set] TrainLossPerSample = 0.41924006; EvalErrPerSample = 0.1444; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8936
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.14'
Starting Epoch 15: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[15 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.39440144; EvalErr[0]PerSample = 0.13656250; TotalTime = 34.2478s; SamplesPerSecond = 747.5
Finished Epoch[15 of 160]: [Training Set] TrainLossPerSample = 0.39710063; EvalErrPerSample = 0.13676; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9095
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.15'
Starting Epoch 16: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[16 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.38027695; EvalErr[0]PerSample = 0.13261719; TotalTime = 34.2563s; SamplesPerSecond = 747.3
Finished Epoch[16 of 160]: [Training Set] TrainLossPerSample = 0.38623425; EvalErrPerSample = 0.13339999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9354
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.16'
Starting Epoch 17: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[17 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.36578236; EvalErr[0]PerSample = 0.12671875; TotalTime = 34.2493s; SamplesPerSecond = 747.5
Finished Epoch[17 of 160]: [Training Set] TrainLossPerSample = 0.37244275; EvalErrPerSample = 0.12964; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9117
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.17'
Starting Epoch 18: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[18 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.35585205; EvalErr[0]PerSample = 0.12257813; TotalTime = 34.2442s; SamplesPerSecond = 747.6
Finished Epoch[18 of 160]: [Training Set] TrainLossPerSample = 0.3557232; EvalErrPerSample = 0.12323999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9115
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.18'
Starting Epoch 19: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[19 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.34668755; EvalErr[0]PerSample = 0.11957031; TotalTime = 34.2499s; SamplesPerSecond = 747.4
Finished Epoch[19 of 160]: [Training Set] TrainLossPerSample = 0.34480327; EvalErrPerSample = 0.11832; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9097
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.19'
Starting Epoch 20: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[20 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.32466316; EvalErr[0]PerSample = 0.11343750; TotalTime = 34.2563s; SamplesPerSecond = 747.3
Finished Epoch[20 of 160]: [Training Set] TrainLossPerSample = 0.33182383; EvalErrPerSample = 0.11554; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9279
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.20'
Starting Epoch 21: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[21 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.32254467; EvalErr[0]PerSample = 0.11250000; TotalTime = 34.3100s; SamplesPerSecond = 746.1
Finished Epoch[21 of 160]: [Training Set] TrainLossPerSample = 0.32774779; EvalErrPerSample = 0.11279999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.964
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.21'
Starting Epoch 22: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[22 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.31498192; EvalErr[0]PerSample = 0.10781250; TotalTime = 34.2773s; SamplesPerSecond = 746.8
Finished Epoch[22 of 160]: [Training Set] TrainLossPerSample = 0.31775412; EvalErrPerSample = 0.11024; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9334
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.22'
Starting Epoch 23: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[23 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.30091822; EvalErr[0]PerSample = 0.10332031; TotalTime = 34.2440s; SamplesPerSecond = 747.6
Finished Epoch[23 of 160]: [Training Set] TrainLossPerSample = 0.30627075; EvalErrPerSample = 0.10588; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8985
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.23'
Starting Epoch 24: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[24 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.29784729; EvalErr[0]PerSample = 0.10226563; TotalTime = 34.2371s; SamplesPerSecond = 747.7
Finished Epoch[24 of 160]: [Training Set] TrainLossPerSample = 0.30072364; EvalErrPerSample = 0.10337999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8912
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.24'
Starting Epoch 25: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[25 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.28111343; EvalErr[0]PerSample = 0.09546875; TotalTime = 34.2373s; SamplesPerSecond = 747.7
Finished Epoch[25 of 160]: [Training Set] TrainLossPerSample = 0.29015899; EvalErrPerSample = 0.09956; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8986
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.25'
Starting Epoch 26: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[26 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.28119558; EvalErr[0]PerSample = 0.09894531; TotalTime = 34.2398s; SamplesPerSecond = 747.7
Finished Epoch[26 of 160]: [Training Set] TrainLossPerSample = 0.28062734; EvalErrPerSample = 0.098979995; AvgLearningRatePerSample = 0.0078125; EpochTime=66.896
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.26'
Starting Epoch 27: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[27 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.26773546; EvalErr[0]PerSample = 0.09253906; TotalTime = 34.2453s; SamplesPerSecond = 747.5
Finished Epoch[27 of 160]: [Training Set] TrainLossPerSample = 0.27523825; EvalErrPerSample = 0.095259994; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8905
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.27'
Starting Epoch 28: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[28 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.27260826; EvalErr[0]PerSample = 0.09472656; TotalTime = 34.2339s; SamplesPerSecond = 747.8
Finished Epoch[28 of 160]: [Training Set] TrainLossPerSample = 0.27595448; EvalErrPerSample = 0.095739998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8925
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.28'
Starting Epoch 29: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[29 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25796089; EvalErr[0]PerSample = 0.08808594; TotalTime = 34.2304s; SamplesPerSecond = 747.9
Finished Epoch[29 of 160]: [Training Set] TrainLossPerSample = 0.26468921; EvalErrPerSample = 0.090640001; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8905
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.29'
Starting Epoch 30: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[30 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.25212626; EvalErr[0]PerSample = 0.08828125; TotalTime = 34.2402s; SamplesPerSecond = 747.7
Finished Epoch[30 of 160]: [Training Set] TrainLossPerSample = 0.25851542; EvalErrPerSample = 0.090559997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.889
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.30'
Starting Epoch 31: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[31 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24511749; EvalErr[0]PerSample = 0.08714844; TotalTime = 34.2452s; SamplesPerSecond = 747.6
Finished Epoch[31 of 160]: [Training Set] TrainLossPerSample = 0.25035423; EvalErrPerSample = 0.088579997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9067
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.31'
Starting Epoch 32: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[32 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24218447; EvalErr[0]PerSample = 0.08449219; TotalTime = 34.2393s; SamplesPerSecond = 747.7
Finished Epoch[32 of 160]: [Training Set] TrainLossPerSample = 0.24899355; EvalErrPerSample = 0.085919999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8996
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.32'
Starting Epoch 33: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[33 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23380465; EvalErr[0]PerSample = 0.08230469; TotalTime = 34.2486s; SamplesPerSecond = 747.5
Finished Epoch[33 of 160]: [Training Set] TrainLossPerSample = 0.24616794; EvalErrPerSample = 0.086580001; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9199
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.33'
Starting Epoch 34: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[34 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.24045441; EvalErr[0]PerSample = 0.08265625; TotalTime = 34.2421s; SamplesPerSecond = 747.6
Finished Epoch[34 of 160]: [Training Set] TrainLossPerSample = 0.24212448; EvalErrPerSample = 0.083119996; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9056
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.34'
Starting Epoch 35: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[35 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.22943111; EvalErr[0]PerSample = 0.08085937; TotalTime = 34.3397s; SamplesPerSecond = 745.5
Finished Epoch[35 of 160]: [Training Set] TrainLossPerSample = 0.23983407; EvalErrPerSample = 0.083459996; AvgLearningRatePerSample = 0.0078125; EpochTime=67.0061
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.35'
Starting Epoch 36: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[36 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.23311565; EvalErr[0]PerSample = 0.08097656; TotalTime = 34.2423s; SamplesPerSecond = 747.6
Finished Epoch[36 of 160]: [Training Set] TrainLossPerSample = 0.23720597; EvalErrPerSample = 0.081979997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.905
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.36'
Starting Epoch 37: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[37 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.21555502; EvalErr[0]PerSample = 0.07417969; TotalTime = 34.2320s; SamplesPerSecond = 747.8
Finished Epoch[37 of 160]: [Training Set] TrainLossPerSample = 0.2297499; EvalErrPerSample = 0.07948; AvgLearningRatePerSample = 0.0078125; EpochTime=66.89
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.37'
Starting Epoch 38: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[38 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.22408737; EvalErr[0]PerSample = 0.07808594; TotalTime = 34.2398s; SamplesPerSecond = 747.7
Finished Epoch[38 of 160]: [Training Set] TrainLossPerSample = 0.22645262; EvalErrPerSample = 0.078979999; AvgLearningRatePerSample = 0.0078125; EpochTime=67.0321
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.38'
Starting Epoch 39: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[39 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.21047318; EvalErr[0]PerSample = 0.07042969; TotalTime = 34.2497s; SamplesPerSecond = 747.5
Finished Epoch[39 of 160]: [Training Set] TrainLossPerSample = 0.2245833; EvalErrPerSample = 0.076739997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9139
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.39'
Starting Epoch 40: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[40 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.21677456; EvalErr[0]PerSample = 0.07500000; TotalTime = 34.2403s; SamplesPerSecond = 747.7
Finished Epoch[40 of 160]: [Training Set] TrainLossPerSample = 0.22170429; EvalErrPerSample = 0.076480001; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8962
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.40'
Starting Epoch 41: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[41 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.21649546; EvalErr[0]PerSample = 0.07519531; TotalTime = 34.2476s; SamplesPerSecond = 747.5
Finished Epoch[41 of 160]: [Training Set] TrainLossPerSample = 0.21857023; EvalErrPerSample = 0.075599998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9011
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.41'
Starting Epoch 42: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[42 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.20455832; EvalErr[0]PerSample = 0.07152344; TotalTime = 34.2415s; SamplesPerSecond = 747.6
Finished Epoch[42 of 160]: [Training Set] TrainLossPerSample = 0.2160496; EvalErrPerSample = 0.075199999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9069
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.42'
Starting Epoch 43: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[43 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.20672878; EvalErr[0]PerSample = 0.06980469; TotalTime = 34.2485s; SamplesPerSecond = 747.5
Finished Epoch[43 of 160]: [Training Set] TrainLossPerSample = 0.21430331; EvalErrPerSample = 0.07418; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9167
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.43'
Starting Epoch 44: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[44 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.20699423; EvalErr[0]PerSample = 0.07023438; TotalTime = 34.2524s; SamplesPerSecond = 747.4
Finished Epoch[44 of 160]: [Training Set] TrainLossPerSample = 0.21219908; EvalErrPerSample = 0.072559997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9169
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.44'
Starting Epoch 45: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[45 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.19827534; EvalErr[0]PerSample = 0.06875000; TotalTime = 34.2522s; SamplesPerSecond = 747.4
Finished Epoch[45 of 160]: [Training Set] TrainLossPerSample = 0.20897356; EvalErrPerSample = 0.07192; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9303
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.45'
Starting Epoch 46: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[46 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.20024132; EvalErr[0]PerSample = 0.06968750; TotalTime = 34.2502s; SamplesPerSecond = 747.4
Finished Epoch[46 of 160]: [Training Set] TrainLossPerSample = 0.20776483; EvalErrPerSample = 0.072839998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9176
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.46'
Starting Epoch 47: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[47 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.19332899; EvalErr[0]PerSample = 0.06835938; TotalTime = 34.2464s; SamplesPerSecond = 747.5
Finished Epoch[47 of 160]: [Training Set] TrainLossPerSample = 0.20251136; EvalErrPerSample = 0.071400002; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9216
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.47'
Starting Epoch 48: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[48 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.20135883; EvalErr[0]PerSample = 0.07085938; TotalTime = 34.2391s; SamplesPerSecond = 747.7
Finished Epoch[48 of 160]: [Training Set] TrainLossPerSample = 0.20199671; EvalErrPerSample = 0.070560001; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9086
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.48'
Starting Epoch 49: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[49 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.18952045; EvalErr[0]PerSample = 0.06582031; TotalTime = 34.2645s; SamplesPerSecond = 747.1
Finished Epoch[49 of 160]: [Training Set] TrainLossPerSample = 0.19823113; EvalErrPerSample = 0.068580002; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9231
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.49'
Starting Epoch 50: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[50 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.19133921; EvalErr[0]PerSample = 0.06726562; TotalTime = 34.2493s; SamplesPerSecond = 747.5
Finished Epoch[50 of 160]: [Training Set] TrainLossPerSample = 0.2006802; EvalErrPerSample = 0.070699997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9319
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.50'
Starting Epoch 51: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[51 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.19296997; EvalErr[0]PerSample = 0.06621094; TotalTime = 34.2297s; SamplesPerSecond = 747.9
Finished Epoch[51 of 160]: [Training Set] TrainLossPerSample = 0.1992881; EvalErrPerSample = 0.069499999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8847
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.51'
Starting Epoch 52: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[52 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.18573498; EvalErr[0]PerSample = 0.06414063; TotalTime = 34.2456s; SamplesPerSecond = 747.5
Finished Epoch[52 of 160]: [Training Set] TrainLossPerSample = 0.19471373; EvalErrPerSample = 0.067099996; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9424
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.52'
Starting Epoch 53: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[53 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.18396889; EvalErr[0]PerSample = 0.06542969; TotalTime = 34.2888s; SamplesPerSecond = 746.6
Finished Epoch[53 of 160]: [Training Set] TrainLossPerSample = 0.1925908; EvalErrPerSample = 0.067219995; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9471
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.53'
Starting Epoch 54: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[54 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.18691126; EvalErr[0]PerSample = 0.06562500; TotalTime = 34.2456s; SamplesPerSecond = 747.5
Finished Epoch[54 of 160]: [Training Set] TrainLossPerSample = 0.18951587; EvalErrPerSample = 0.065919995; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9116
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.54'
Starting Epoch 55: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[55 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.18601879; EvalErr[0]PerSample = 0.06371094; TotalTime = 34.2466s; SamplesPerSecond = 747.5
Finished Epoch[55 of 160]: [Training Set] TrainLossPerSample = 0.18988976; EvalErrPerSample = 0.066100001; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9152
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.55'
Starting Epoch 56: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[56 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.18315941; EvalErr[0]PerSample = 0.06406250; TotalTime = 34.2413s; SamplesPerSecond = 747.6
Finished Epoch[56 of 160]: [Training Set] TrainLossPerSample = 0.18686067; EvalErrPerSample = 0.065739997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9069
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.56'
Starting Epoch 57: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[57 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.18106951; EvalErr[0]PerSample = 0.06246094; TotalTime = 34.2510s; SamplesPerSecond = 747.4
Finished Epoch[57 of 160]: [Training Set] TrainLossPerSample = 0.19042736; EvalErrPerSample = 0.06622; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9223
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.57'
Starting Epoch 58: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[58 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.18492083; EvalErr[0]PerSample = 0.06527344; TotalTime = 34.2528s; SamplesPerSecond = 747.4
Finished Epoch[58 of 160]: [Training Set] TrainLossPerSample = 0.18727326; EvalErrPerSample = 0.064939998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9267
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.58'
Starting Epoch 59: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[59 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.17038435; EvalErr[0]PerSample = 0.05917969; TotalTime = 34.2496s; SamplesPerSecond = 747.5
Finished Epoch[59 of 160]: [Training Set] TrainLossPerSample = 0.18080178; EvalErrPerSample = 0.062299997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9191
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.59'
Starting Epoch 60: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[60 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.17502851; EvalErr[0]PerSample = 0.06183594; TotalTime = 34.2793s; SamplesPerSecond = 746.8
Finished Epoch[60 of 160]: [Training Set] TrainLossPerSample = 0.17897207; EvalErrPerSample = 0.062819995; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9611
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.60'
Starting Epoch 61: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[61 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.17479221; EvalErr[0]PerSample = 0.06187500; TotalTime = 34.2481s; SamplesPerSecond = 747.5
Finished Epoch[61 of 160]: [Training Set] TrainLossPerSample = 0.17798932; EvalErrPerSample = 0.062660001; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9219
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.61'
Starting Epoch 62: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[62 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.17981518; EvalErr[0]PerSample = 0.06199219; TotalTime = 34.2561s; SamplesPerSecond = 747.3
Finished Epoch[62 of 160]: [Training Set] TrainLossPerSample = 0.18243115; EvalErrPerSample = 0.064240001; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9244
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.62'
Starting Epoch 63: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[63 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.17270412; EvalErr[0]PerSample = 0.05917969; TotalTime = 34.2554s; SamplesPerSecond = 747.3
Finished Epoch[63 of 160]: [Training Set] TrainLossPerSample = 0.17758152; EvalErrPerSample = 0.061719999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9361
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.63'
Starting Epoch 64: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[64 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.16516579; EvalErr[0]PerSample = 0.05792969; TotalTime = 34.2766s; SamplesPerSecond = 746.9
Finished Epoch[64 of 160]: [Training Set] TrainLossPerSample = 0.17424898; EvalErrPerSample = 0.06044; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9633
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.64'
Starting Epoch 65: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[65 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.17415672; EvalErr[0]PerSample = 0.06164062; TotalTime = 34.3307s; SamplesPerSecond = 745.7
Finished Epoch[65 of 160]: [Training Set] TrainLossPerSample = 0.17599966; EvalErrPerSample = 0.062039997; AvgLearningRatePerSample = 0.0078125; EpochTime=67.026
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.65'
Starting Epoch 66: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[66 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.16262278; EvalErr[0]PerSample = 0.05886719; TotalTime = 34.2448s; SamplesPerSecond = 747.6
Finished Epoch[66 of 160]: [Training Set] TrainLossPerSample = 0.16772267; EvalErrPerSample = 0.059799999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9065
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.66'
Starting Epoch 67: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[67 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.16856216; EvalErr[0]PerSample = 0.05906250; TotalTime = 34.2467s; SamplesPerSecond = 747.5
Finished Epoch[67 of 160]: [Training Set] TrainLossPerSample = 0.17300676; EvalErrPerSample = 0.061139997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9215
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.67'
Starting Epoch 68: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[68 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.16585386; EvalErr[0]PerSample = 0.05734375; TotalTime = 34.2464s; SamplesPerSecond = 747.5
Finished Epoch[68 of 160]: [Training Set] TrainLossPerSample = 0.17578007; EvalErrPerSample = 0.060519997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9115
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.68'
Starting Epoch 69: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[69 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15487971; EvalErr[0]PerSample = 0.05441406; TotalTime = 34.2490s; SamplesPerSecond = 747.5
Finished Epoch[69 of 160]: [Training Set] TrainLossPerSample = 0.16411984; EvalErrPerSample = 0.05844; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9135
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.69'
Starting Epoch 70: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[70 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15948469; EvalErr[0]PerSample = 0.05597656; TotalTime = 34.2446s; SamplesPerSecond = 747.6
Finished Epoch[70 of 160]: [Training Set] TrainLossPerSample = 0.16847; EvalErrPerSample = 0.058879998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9103
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.70'
Starting Epoch 71: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[71 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.16197550; EvalErr[0]PerSample = 0.05718750; TotalTime = 34.2458s; SamplesPerSecond = 747.5
Finished Epoch[71 of 160]: [Training Set] TrainLossPerSample = 0.17195615; EvalErrPerSample = 0.060839999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9166
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.71'
Starting Epoch 72: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[72 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15629568; EvalErr[0]PerSample = 0.05515625; TotalTime = 34.2503s; SamplesPerSecond = 747.4
Finished Epoch[72 of 160]: [Training Set] TrainLossPerSample = 0.17160599; EvalErrPerSample = 0.061219998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9158
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.72'
Starting Epoch 73: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[73 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15722611; EvalErr[0]PerSample = 0.05476562; TotalTime = 34.2420s; SamplesPerSecond = 747.6
Finished Epoch[73 of 160]: [Training Set] TrainLossPerSample = 0.16512014; EvalErrPerSample = 0.058259998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.8986
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.73'
Starting Epoch 74: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[74 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.16009672; EvalErr[0]PerSample = 0.05703125; TotalTime = 34.2495s; SamplesPerSecond = 747.5
Finished Epoch[74 of 160]: [Training Set] TrainLossPerSample = 0.16898924; EvalErrPerSample = 0.059019998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9233
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.74'
Starting Epoch 75: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[75 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15460204; EvalErr[0]PerSample = 0.05312500; TotalTime = 34.2539s; SamplesPerSecond = 747.4
Finished Epoch[75 of 160]: [Training Set] TrainLossPerSample = 0.16324201; EvalErrPerSample = 0.055919997; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9233
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.75'
Starting Epoch 76: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[76 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15667317; EvalErr[0]PerSample = 0.05515625; TotalTime = 34.2399s; SamplesPerSecond = 747.7
Finished Epoch[76 of 160]: [Training Set] TrainLossPerSample = 0.15858564; EvalErrPerSample = 0.055059999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9518
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.76'
Starting Epoch 77: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[77 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15659092; EvalErr[0]PerSample = 0.05410156; TotalTime = 34.2332s; SamplesPerSecond = 747.8
Finished Epoch[77 of 160]: [Training Set] TrainLossPerSample = 0.16720241; EvalErrPerSample = 0.058079999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9014
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.77'
Starting Epoch 78: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[78 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15273868; EvalErr[0]PerSample = 0.05164063; TotalTime = 34.2404s; SamplesPerSecond = 747.7
Finished Epoch[78 of 160]: [Training Set] TrainLossPerSample = 0.15992303; EvalErrPerSample = 0.055239998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.906
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.78'
Starting Epoch 79: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[79 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15322983; EvalErr[0]PerSample = 0.05476562; TotalTime = 34.2420s; SamplesPerSecond = 747.6
Finished Epoch[79 of 160]: [Training Set] TrainLossPerSample = 0.16380094; EvalErrPerSample = 0.058139998; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9021
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.79'
Starting Epoch 80: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[80 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.15410002; EvalErr[0]PerSample = 0.05335938; TotalTime = 34.2510s; SamplesPerSecond = 747.4
Finished Epoch[80 of 160]: [Training Set] TrainLossPerSample = 0.16132115; EvalErrPerSample = 0.05638; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9122
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.80'
Starting Epoch 81: learning rate per sample = 0.007813  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[81 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.14658320; EvalErr[0]PerSample = 0.05156250; TotalTime = 34.2506s; SamplesPerSecond = 747.4
Finished Epoch[81 of 160]: [Training Set] TrainLossPerSample = 0.15670048; EvalErrPerSample = 0.055119999; AvgLearningRatePerSample = 0.0078125; EpochTime=66.9019
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.81'
Starting Epoch 82: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[82 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.11055239; EvalErr[0]PerSample = 0.03714844; TotalTime = 34.2453s; SamplesPerSecond = 747.5
Finished Epoch[82 of 160]: [Training Set] TrainLossPerSample = 0.090582155; EvalErrPerSample = 0.03066; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.8937
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.82'
Starting Epoch 83: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[83 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.05391692; EvalErr[0]PerSample = 0.01675781; TotalTime = 34.2464s; SamplesPerSecond = 747.5
Finished Epoch[83 of 160]: [Training Set] TrainLossPerSample = 0.052728198; EvalErrPerSample = 0.01644; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9025
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.83'
Starting Epoch 84: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[84 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.04134419; EvalErr[0]PerSample = 0.01242188; TotalTime = 34.2487s; SamplesPerSecond = 747.5
Finished Epoch[84 of 160]: [Training Set] TrainLossPerSample = 0.04261167; EvalErrPerSample = 0.01278; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.922
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.84'
Starting Epoch 85: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[85 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03696221; EvalErr[0]PerSample = 0.01214844; TotalTime = 34.2502s; SamplesPerSecond = 747.4
Finished Epoch[85 of 160]: [Training Set] TrainLossPerSample = 0.035290603; EvalErrPerSample = 0.01108; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9713
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.85'
Starting Epoch 86: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[86 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.03103620; EvalErr[0]PerSample = 0.00906250; TotalTime = 34.2539s; SamplesPerSecond = 747.4
Finished Epoch[86 of 160]: [Training Set] TrainLossPerSample = 0.031053338; EvalErrPerSample = 0.0093200002; AvgLearningRatePerSample = 0.00078125001; EpochTime=67.0851
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.86'
Starting Epoch 87: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[87 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.02747848; EvalErr[0]PerSample = 0.00800781; TotalTime = 34.9682s; SamplesPerSecond = 732.1
Finished Epoch[87 of 160]: [Training Set] TrainLossPerSample = 0.028250355; EvalErrPerSample = 0.00832; AvgLearningRatePerSample = 0.00078125001; EpochTime=67.6314
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.87'
Starting Epoch 88: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[88 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.02383066; EvalErr[0]PerSample = 0.00714844; TotalTime = 34.2475s; SamplesPerSecond = 747.5
Finished Epoch[88 of 160]: [Training Set] TrainLossPerSample = 0.023733234; EvalErrPerSample = 0.0070599997; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9154
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.88'
Starting Epoch 89: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[89 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.02334737; EvalErr[0]PerSample = 0.00632813; TotalTime = 34.2406s; SamplesPerSecond = 747.7
Finished Epoch[89 of 160]: [Training Set] TrainLossPerSample = 0.022844482; EvalErrPerSample = 0.0063999998; AvgLearningRatePerSample = 0.00078125001; EpochTime=67.0741
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.89'
Starting Epoch 90: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[90 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.02094710; EvalErr[0]PerSample = 0.00589844; TotalTime = 34.2465s; SamplesPerSecond = 747.5
Finished Epoch[90 of 160]: [Training Set] TrainLossPerSample = 0.020934064; EvalErrPerSample = 0.0059599997; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9229
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.90'
Starting Epoch 91: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[91 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.02006884; EvalErr[0]PerSample = 0.00628906; TotalTime = 34.2548s; SamplesPerSecond = 747.3
Finished Epoch[91 of 160]: [Training Set] TrainLossPerSample = 0.019843206; EvalErrPerSample = 0.0061399997; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.914
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.91'
Starting Epoch 92: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[92 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01826200; EvalErr[0]PerSample = 0.00542969; TotalTime = 34.2810s; SamplesPerSecond = 746.8
Finished Epoch[92 of 160]: [Training Set] TrainLossPerSample = 0.018547757; EvalErrPerSample = 0.00538; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9512
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.92'
Starting Epoch 93: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[93 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01654859; EvalErr[0]PerSample = 0.00453125; TotalTime = 34.2943s; SamplesPerSecond = 746.5
Finished Epoch[93 of 160]: [Training Set] TrainLossPerSample = 0.01722255; EvalErrPerSample = 0.0049399999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9701
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.93'
Starting Epoch 94: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[94 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01585697; EvalErr[0]PerSample = 0.00441406; TotalTime = 34.2504s; SamplesPerSecond = 747.4
Finished Epoch[94 of 160]: [Training Set] TrainLossPerSample = 0.01515844; EvalErrPerSample = 0.0041799997; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.93
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.94'
Starting Epoch 95: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[95 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01532144; EvalErr[0]PerSample = 0.00441406; TotalTime = 34.2512s; SamplesPerSecond = 747.4
Finished Epoch[95 of 160]: [Training Set] TrainLossPerSample = 0.015015967; EvalErrPerSample = 0.0044; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9121
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.95'
Starting Epoch 96: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[96 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01399448; EvalErr[0]PerSample = 0.00406250; TotalTime = 34.2433s; SamplesPerSecond = 747.6
Finished Epoch[96 of 160]: [Training Set] TrainLossPerSample = 0.013210027; EvalErrPerSample = 0.00376; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.8997
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.96'
Starting Epoch 97: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[97 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01209825; EvalErr[0]PerSample = 0.00332031; TotalTime = 34.2567s; SamplesPerSecond = 747.3
Finished Epoch[97 of 160]: [Training Set] TrainLossPerSample = 0.012226926; EvalErrPerSample = 0.0032599999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9247
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.97'
Starting Epoch 98: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[98 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01230964; EvalErr[0]PerSample = 0.00343750; TotalTime = 34.2486s; SamplesPerSecond = 747.5
Finished Epoch[98 of 160]: [Training Set] TrainLossPerSample = 0.012122833; EvalErrPerSample = 0.0034599998; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9192
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.98'
Starting Epoch 99: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[99 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00988823; EvalErr[0]PerSample = 0.00230469; TotalTime = 34.2477s; SamplesPerSecond = 747.5
Finished Epoch[99 of 160]: [Training Set] TrainLossPerSample = 0.011153033; EvalErrPerSample = 0.00288; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9079
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.99'
Starting Epoch 100: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[100 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01078802; EvalErr[0]PerSample = 0.00328125; TotalTime = 34.2446s; SamplesPerSecond = 747.6
Finished Epoch[100 of 160]: [Training Set] TrainLossPerSample = 0.010805478; EvalErrPerSample = 0.0032199998; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9141
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.100'
Starting Epoch 101: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[101 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01043408; EvalErr[0]PerSample = 0.00285156; TotalTime = 34.2448s; SamplesPerSecond = 747.6
Finished Epoch[101 of 160]: [Training Set] TrainLossPerSample = 0.0097289206; EvalErrPerSample = 0.00254; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9115
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.101'
Starting Epoch 102: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[102 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01028690; EvalErr[0]PerSample = 0.00269531; TotalTime = 34.2500s; SamplesPerSecond = 747.4
Finished Epoch[102 of 160]: [Training Set] TrainLossPerSample = 0.010017196; EvalErrPerSample = 0.0026999998; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9075
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.102'
Starting Epoch 103: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[103 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.01031995; EvalErr[0]PerSample = 0.00316406; TotalTime = 34.2485s; SamplesPerSecond = 747.5
Finished Epoch[103 of 160]: [Training Set] TrainLossPerSample = 0.010233736; EvalErrPerSample = 0.0030199999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9094
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.103'
Starting Epoch 104: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[104 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00783067; EvalErr[0]PerSample = 0.00164062; TotalTime = 34.2752s; SamplesPerSecond = 746.9
Finished Epoch[104 of 160]: [Training Set] TrainLossPerSample = 0.0086551448; EvalErrPerSample = 0.00208; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9965
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.104'
Starting Epoch 105: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[105 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00939923; EvalErr[0]PerSample = 0.00253906; TotalTime = 34.2407s; SamplesPerSecond = 747.6
Finished Epoch[105 of 160]: [Training Set] TrainLossPerSample = 0.0096224733; EvalErrPerSample = 0.0026199999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.8974
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.105'
Starting Epoch 106: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[106 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00753223; EvalErr[0]PerSample = 0.00179688; TotalTime = 34.2848s; SamplesPerSecond = 746.7
Finished Epoch[106 of 160]: [Training Set] TrainLossPerSample = 0.0078934198; EvalErrPerSample = 0.00202; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9655
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.106'
Starting Epoch 107: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[107 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00865439; EvalErr[0]PerSample = 0.00238281; TotalTime = 34.2544s; SamplesPerSecond = 747.4
Finished Epoch[107 of 160]: [Training Set] TrainLossPerSample = 0.008151643; EvalErrPerSample = 0.00214; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9284
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.107'
Starting Epoch 108: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[108 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00694811; EvalErr[0]PerSample = 0.00148438; TotalTime = 34.2490s; SamplesPerSecond = 747.5
Finished Epoch[108 of 160]: [Training Set] TrainLossPerSample = 0.0073725204; EvalErrPerSample = 0.0016; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9107
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.108'
Starting Epoch 109: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[109 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00807542; EvalErr[0]PerSample = 0.00218750; TotalTime = 34.2420s; SamplesPerSecond = 747.6
Finished Epoch[109 of 160]: [Training Set] TrainLossPerSample = 0.0075115636; EvalErrPerSample = 0.00194; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9172
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.109'
Starting Epoch 110: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[110 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00747269; EvalErr[0]PerSample = 0.00214844; TotalTime = 34.2519s; SamplesPerSecond = 747.4
Finished Epoch[110 of 160]: [Training Set] TrainLossPerSample = 0.0070967474; EvalErrPerSample = 0.0017599999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9183
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.110'
Starting Epoch 111: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[111 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00696611; EvalErr[0]PerSample = 0.00175781; TotalTime = 34.2387s; SamplesPerSecond = 747.7
Finished Epoch[111 of 160]: [Training Set] TrainLossPerSample = 0.0071680127; EvalErrPerSample = 0.0018399999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9065
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.111'
Starting Epoch 112: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[112 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00660637; EvalErr[0]PerSample = 0.00167969; TotalTime = 34.2517s; SamplesPerSecond = 747.4
Finished Epoch[112 of 160]: [Training Set] TrainLossPerSample = 0.0069257859; EvalErrPerSample = 0.0018399999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9221
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.112'
Starting Epoch 113: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[113 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00683305; EvalErr[0]PerSample = 0.00179688; TotalTime = 34.2447s; SamplesPerSecond = 747.6
Finished Epoch[113 of 160]: [Training Set] TrainLossPerSample = 0.0071453024; EvalErrPerSample = 0.00182; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9078
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.113'
Starting Epoch 114: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[114 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00659715; EvalErr[0]PerSample = 0.00164062; TotalTime = 34.2397s; SamplesPerSecond = 747.7
Finished Epoch[114 of 160]: [Training Set] TrainLossPerSample = 0.0066223624; EvalErrPerSample = 0.0017199999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9022
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.114'
Starting Epoch 115: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[115 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00571319; EvalErr[0]PerSample = 0.00140625; TotalTime = 34.2379s; SamplesPerSecond = 747.7
Finished Epoch[115 of 160]: [Training Set] TrainLossPerSample = 0.0061274339; EvalErrPerSample = 0.0015199999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9117
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.115'
Starting Epoch 116: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[116 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00616163; EvalErr[0]PerSample = 0.00164062; TotalTime = 34.2441s; SamplesPerSecond = 747.6
Finished Epoch[116 of 160]: [Training Set] TrainLossPerSample = 0.0064637884; EvalErrPerSample = 0.00166; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.92
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.116'
Starting Epoch 117: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[117 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00667505; EvalErr[0]PerSample = 0.00171875; TotalTime = 34.2353s; SamplesPerSecond = 747.8
Finished Epoch[117 of 160]: [Training Set] TrainLossPerSample = 0.0063761352; EvalErrPerSample = 0.0016; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.8921
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.117'
Starting Epoch 118: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[118 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00584337; EvalErr[0]PerSample = 0.00144531; TotalTime = 34.2344s; SamplesPerSecond = 747.8
Finished Epoch[118 of 160]: [Training Set] TrainLossPerSample = 0.0061604949; EvalErrPerSample = 0.00162; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9005
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.118'
Starting Epoch 119: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[119 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00587101; EvalErr[0]PerSample = 0.00132813; TotalTime = 34.2448s; SamplesPerSecond = 747.6
Finished Epoch[119 of 160]: [Training Set] TrainLossPerSample = 0.0058231312; EvalErrPerSample = 0.0013799999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9065
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.119'
Starting Epoch 120: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[120 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00556109; EvalErr[0]PerSample = 0.00152344; TotalTime = 34.2181s; SamplesPerSecond = 748.1
Finished Epoch[120 of 160]: [Training Set] TrainLossPerSample = 0.0049992148; EvalErrPerSample = 0.0013; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9296
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.120'
Starting Epoch 121: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[121 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00544529; EvalErr[0]PerSample = 0.00148438; TotalTime = 34.2507s; SamplesPerSecond = 747.4
Finished Epoch[121 of 160]: [Training Set] TrainLossPerSample = 0.0059123267; EvalErrPerSample = 0.0016999999; AvgLearningRatePerSample = 0.00078125001; EpochTime=66.9099
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.121'
Starting Epoch 122: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[122 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00506212; EvalErr[0]PerSample = 0.00109375; TotalTime = 34.2380s; SamplesPerSecond = 747.7
Finished Epoch[122 of 160]: [Training Set] TrainLossPerSample = 0.0047056451; EvalErrPerSample = 0.00099999993; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8882
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.122'
Starting Epoch 123: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[123 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00436568; EvalErr[0]PerSample = 0.00093750; TotalTime = 34.2202s; SamplesPerSecond = 748.1
Finished Epoch[123 of 160]: [Training Set] TrainLossPerSample = 0.0045333277; EvalErrPerSample = 0.00102; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8649
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.123'
Starting Epoch 124: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[124 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00423286; EvalErr[0]PerSample = 0.00089844; TotalTime = 34.2368s; SamplesPerSecond = 747.7
Finished Epoch[124 of 160]: [Training Set] TrainLossPerSample = 0.0040925727; EvalErrPerSample = 0.00078; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8901
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.124'
Starting Epoch 125: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[125 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00428819; EvalErr[0]PerSample = 0.00089844; TotalTime = 34.2302s; SamplesPerSecond = 747.9
Finished Epoch[125 of 160]: [Training Set] TrainLossPerSample = 0.0039790319; EvalErrPerSample = 0.00083999999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8868
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.125'
Starting Epoch 126: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[126 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00386990; EvalErr[0]PerSample = 0.00070312; TotalTime = 34.2288s; SamplesPerSecond = 747.9
Finished Epoch[126 of 160]: [Training Set] TrainLossPerSample = 0.0041431645; EvalErrPerSample = 0.00102; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8935
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.126'
Starting Epoch 127: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[127 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00415913; EvalErr[0]PerSample = 0.00074219; TotalTime = 34.2434s; SamplesPerSecond = 747.6
Finished Epoch[127 of 160]: [Training Set] TrainLossPerSample = 0.0038879183; EvalErrPerSample = 0.00072000001; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9178
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.127'
Starting Epoch 128: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[128 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00381589; EvalErr[0]PerSample = 0.00074219; TotalTime = 34.2352s; SamplesPerSecond = 747.8
Finished Epoch[128 of 160]: [Training Set] TrainLossPerSample = 0.0037014519; EvalErrPerSample = 0.00065999996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8974
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.128'
Starting Epoch 129: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[129 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00390699; EvalErr[0]PerSample = 0.00093750; TotalTime = 34.2443s; SamplesPerSecond = 747.6
Finished Epoch[129 of 160]: [Training Set] TrainLossPerSample = 0.0036388342; EvalErrPerSample = 0.00073999999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9066
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.129'
Starting Epoch 130: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[130 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00401969; EvalErr[0]PerSample = 0.00113281; TotalTime = 34.2339s; SamplesPerSecond = 747.8
Finished Epoch[130 of 160]: [Training Set] TrainLossPerSample = 0.0038497401; EvalErrPerSample = 0.00089999998; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8803
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.130'
Starting Epoch 131: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[131 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00371109; EvalErr[0]PerSample = 0.00050781; TotalTime = 34.2393s; SamplesPerSecond = 747.7
Finished Epoch[131 of 160]: [Training Set] TrainLossPerSample = 0.0036305008; EvalErrPerSample = 0.00055999996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9068
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.131'
Starting Epoch 132: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[132 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00361982; EvalErr[0]PerSample = 0.00082031; TotalTime = 34.2404s; SamplesPerSecond = 747.7
Finished Epoch[132 of 160]: [Training Set] TrainLossPerSample = 0.0037875406; EvalErrPerSample = 0.00091999996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9025
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.132'
Starting Epoch 133: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[133 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00379993; EvalErr[0]PerSample = 0.00085938; TotalTime = 34.2434s; SamplesPerSecond = 747.6
Finished Epoch[133 of 160]: [Training Set] TrainLossPerSample = 0.0037811422; EvalErrPerSample = 0.00072000001; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8997
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.133'
Starting Epoch 134: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[134 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00324624; EvalErr[0]PerSample = 0.00042969; TotalTime = 34.2358s; SamplesPerSecond = 747.8
Finished Epoch[134 of 160]: [Training Set] TrainLossPerSample = 0.0031919111; EvalErrPerSample = 0.00052; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8704
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.134'
Starting Epoch 135: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[135 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00297883; EvalErr[0]PerSample = 0.00035156; TotalTime = 34.2219s; SamplesPerSecond = 748.1
Finished Epoch[135 of 160]: [Training Set] TrainLossPerSample = 0.0031994823; EvalErrPerSample = 0.00059999997; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9955
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.135'
Starting Epoch 136: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[136 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00355394; EvalErr[0]PerSample = 0.00066406; TotalTime = 34.9371s; SamplesPerSecond = 732.7
Finished Epoch[136 of 160]: [Training Set] TrainLossPerSample = 0.0036795642; EvalErrPerSample = 0.00078; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=67.6302
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.136'
Starting Epoch 137: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[137 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00359524; EvalErr[0]PerSample = 0.00066406; TotalTime = 34.2354s; SamplesPerSecond = 747.8
Finished Epoch[137 of 160]: [Training Set] TrainLossPerSample = 0.0035311766; EvalErrPerSample = 0.00068; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.891
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.137'
Starting Epoch 138: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[138 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00343087; EvalErr[0]PerSample = 0.00066406; TotalTime = 34.2621s; SamplesPerSecond = 747.2
Finished Epoch[138 of 160]: [Training Set] TrainLossPerSample = 0.0034796586; EvalErrPerSample = 0.00065999996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.916
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.138'
Starting Epoch 139: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[139 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00343002; EvalErr[0]PerSample = 0.00066406; TotalTime = 34.2436s; SamplesPerSecond = 747.6
Finished Epoch[139 of 160]: [Training Set] TrainLossPerSample = 0.0033328664; EvalErrPerSample = 0.00055999996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.923
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.139'
Starting Epoch 140: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[140 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00337591; EvalErr[0]PerSample = 0.00070312; TotalTime = 34.2353s; SamplesPerSecond = 747.8
Finished Epoch[140 of 160]: [Training Set] TrainLossPerSample = 0.0031642318; EvalErrPerSample = 0.00055999996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.926
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.140'
Starting Epoch 141: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[141 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00364618; EvalErr[0]PerSample = 0.00078125; TotalTime = 34.2214s; SamplesPerSecond = 748.1
Finished Epoch[141 of 160]: [Training Set] TrainLossPerSample = 0.0035639035; EvalErrPerSample = 0.00078; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8739
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.141'
Starting Epoch 142: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[142 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00340368; EvalErr[0]PerSample = 0.00046875; TotalTime = 34.2602s; SamplesPerSecond = 747.2
Finished Epoch[142 of 160]: [Training Set] TrainLossPerSample = 0.0033217999; EvalErrPerSample = 0.00043999997; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9173
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.142'
Starting Epoch 143: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[143 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00338313; EvalErr[0]PerSample = 0.00058594; TotalTime = 34.2287s; SamplesPerSecond = 747.9
Finished Epoch[143 of 160]: [Training Set] TrainLossPerSample = 0.003285937; EvalErrPerSample = 0.00055999996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8929
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.143'
Starting Epoch 144: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[144 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00350241; EvalErr[0]PerSample = 0.00097656; TotalTime = 34.2369s; SamplesPerSecond = 747.7
Finished Epoch[144 of 160]: [Training Set] TrainLossPerSample = 0.0033956808; EvalErrPerSample = 0.00087999995; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9109
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.144'
Starting Epoch 145: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[145 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00389780; EvalErr[0]PerSample = 0.00078125; TotalTime = 34.2499s; SamplesPerSecond = 747.4
Finished Epoch[145 of 160]: [Training Set] TrainLossPerSample = 0.003525309; EvalErrPerSample = 0.00073999999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9108
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.145'
Starting Epoch 146: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[146 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00273976; EvalErr[0]PerSample = 0.00050781; TotalTime = 34.2481s; SamplesPerSecond = 747.5
Finished Epoch[146 of 160]: [Training Set] TrainLossPerSample = 0.0029731863; EvalErrPerSample = 0.00049999997; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9057
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.146'
Starting Epoch 147: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[147 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00301678; EvalErr[0]PerSample = 0.00054688; TotalTime = 34.2455s; SamplesPerSecond = 747.5
Finished Epoch[147 of 160]: [Training Set] TrainLossPerSample = 0.0028605016; EvalErrPerSample = 0.00055999996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9068
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.147'
Starting Epoch 148: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[148 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00318503; EvalErr[0]PerSample = 0.00078125; TotalTime = 34.2349s; SamplesPerSecond = 747.8
Finished Epoch[148 of 160]: [Training Set] TrainLossPerSample = 0.0029674848; EvalErrPerSample = 0.00063999998; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8889
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.148'
Starting Epoch 149: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[149 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00341538; EvalErr[0]PerSample = 0.00070312; TotalTime = 34.2300s; SamplesPerSecond = 747.9
Finished Epoch[149 of 160]: [Training Set] TrainLossPerSample = 0.0034138309; EvalErrPerSample = 0.00062000001; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.973
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.149'
Starting Epoch 150: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[150 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00312641; EvalErr[0]PerSample = 0.00050781; TotalTime = 34.2394s; SamplesPerSecond = 747.7
Finished Epoch[150 of 160]: [Training Set] TrainLossPerSample = 0.0032544835; EvalErrPerSample = 0.00062000001; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8886
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.150'
Starting Epoch 151: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[151 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00294002; EvalErr[0]PerSample = 0.00046875; TotalTime = 34.2440s; SamplesPerSecond = 747.6
Finished Epoch[151 of 160]: [Training Set] TrainLossPerSample = 0.0029587755; EvalErrPerSample = 0.00049999997; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9165
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.151'
Starting Epoch 152: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[152 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00312315; EvalErr[0]PerSample = 0.00070312; TotalTime = 34.2407s; SamplesPerSecond = 747.6
Finished Epoch[152 of 160]: [Training Set] TrainLossPerSample = 0.0031671789; EvalErrPerSample = 0.00063999998; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8987
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.152'
Starting Epoch 153: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[153 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00293371; EvalErr[0]PerSample = 0.00042969; TotalTime = 34.2360s; SamplesPerSecond = 747.8
Finished Epoch[153 of 160]: [Training Set] TrainLossPerSample = 0.0029186283; EvalErrPerSample = 0.00036000001; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8934
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.153'
Starting Epoch 154: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[154 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00270366; EvalErr[0]PerSample = 0.00046875; TotalTime = 34.2303s; SamplesPerSecond = 747.9
Finished Epoch[154 of 160]: [Training Set] TrainLossPerSample = 0.0027337885; EvalErrPerSample = 0.00029999999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8932
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.154'
Starting Epoch 155: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[155 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00262628; EvalErr[0]PerSample = 0.00027344; TotalTime = 34.2340s; SamplesPerSecond = 747.8
Finished Epoch[155 of 160]: [Training Set] TrainLossPerSample = 0.002633905; EvalErrPerSample = 0.00023999999; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8889
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.155'
Starting Epoch 156: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[156 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00307139; EvalErr[0]PerSample = 0.00074219; TotalTime = 34.2388s; SamplesPerSecond = 747.7
Finished Epoch[156 of 160]: [Training Set] TrainLossPerSample = 0.0029770101; EvalErrPerSample = 0.00065999996; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8912
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.156'
Starting Epoch 157: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[157 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00275711; EvalErr[0]PerSample = 0.00031250; TotalTime = 34.2329s; SamplesPerSecond = 747.8
Finished Epoch[157 of 160]: [Training Set] TrainLossPerSample = 0.0026996653; EvalErrPerSample = 0.00034; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8768
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.157'
Starting Epoch 158: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[158 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00278720; EvalErr[0]PerSample = 0.00042969; TotalTime = 34.2421s; SamplesPerSecond = 747.6
Finished Epoch[158 of 160]: [Training Set] TrainLossPerSample = 0.0026968825; EvalErrPerSample = 0.00037999998; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9344
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.158'
Starting Epoch 159: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[159 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00272500; EvalErr[0]PerSample = 0.00031250; TotalTime = 34.2259s; SamplesPerSecond = 748.0
Finished Epoch[159 of 160]: [Training Set] TrainLossPerSample = 0.0027625638; EvalErrPerSample = 0.00037999998; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.9162
SGD: Saving checkpoint model './Output/Models/04_ResNet_56.159'
Starting Epoch 160: learning rate per sample = 0.000078  effective momentum = 0.900000  momentum as time constant = 1214.9 samples

Starting minibatch loop.
 Epoch[160 of 160]-Minibatch[   1- 200, 100.00%]: SamplesSeen = 25600; TrainLossPerSample =  0.00257069; EvalErr[0]PerSample = 0.00042969; TotalTime = 34.2364s; SamplesPerSecond = 747.7
Finished Epoch[160 of 160]: [Training Set] TrainLossPerSample = 0.0029211191; EvalErrPerSample = 0.00063999998; AvgLearningRatePerSample = 7.8124998e-005; EpochTime=66.8957
SGD: Saving checkpoint model './Output/Models/04_ResNet_56'
CNTKCommandTrainEnd: Train

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax
	Err = ErrorPrediction
	OutputNodes.z = Plus
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation


Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter -> [16 x 27]
Validating --> features = InputValue -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[16 x 27], features[32 x 32 x 3 x * {W=32, H=3, C=32}]) -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.c.c.sc[16 x 1], conv1.c.c.b[16 x 1], conv1.c.c.m[16 x 1], conv1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[16 x 144], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c1.c.c.sc[16 x 1], rn1_1.c1.c.c.b[16 x 1], rn1_1.c1.c.c.m[16 x 1], rn1_1.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[16 x 144], rn1_1.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c2.c.sc[16 x 1], rn1_1.c2.c.b[16 x 1], rn1_1.c2.c.m[16 x 1], rn1_1.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[16 x 144], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c1.c.c.sc[16 x 1], rn1_2.c1.c.c.b[16 x 1], rn1_2.c1.c.c.m[16 x 1], rn1_2.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[16 x 144], rn1_2.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c2.c.sc[16 x 1], rn1_2.c2.c.b[16 x 1], rn1_2.c2.c.m[16 x 1], rn1_2.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[16 x 144], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c1.c.c.sc[16 x 1], rn1_3.c1.c.c.b[16 x 1], rn1_3.c1.c.c.m[16 x 1], rn1_3.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[16 x 144], rn1_3.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c2.c.sc[16 x 1], rn1_3.c2.c.b[16 x 1], rn1_3.c2.c.m[16 x 1], rn1_3.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution(rn1_4.c1.c.W[16 x 144], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization(rn1_4.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c1.c.c.sc[16 x 1], rn1_4.c1.c.c.b[16 x 1], rn1_4.c1.c.c.m[16 x 1], rn1_4.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear(rn1_4.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution(rn1_4.c2.W[16 x 144], rn1_4.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization(rn1_4.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c2.c.sc[16 x 1], rn1_4.c2.c.b[16 x 1], rn1_4.c2.c.m[16 x 1], rn1_4.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus(rn1_4.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear(rn1_4.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution(rn1_5.c1.c.W[16 x 144], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization(rn1_5.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c1.c.c.sc[16 x 1], rn1_5.c1.c.c.b[16 x 1], rn1_5.c1.c.c.m[16 x 1], rn1_5.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear(rn1_5.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution(rn1_5.c2.W[16 x 144], rn1_5.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization(rn1_5.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c2.c.sc[16 x 1], rn1_5.c2.c.b[16 x 1], rn1_5.c2.c.m[16 x 1], rn1_5.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus(rn1_5.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear(rn1_5.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution(rn1_6.c1.c.W[16 x 144], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization(rn1_6.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c1.c.c.sc[16 x 1], rn1_6.c1.c.c.b[16 x 1], rn1_6.c1.c.c.m[16 x 1], rn1_6.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear(rn1_6.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution(rn1_6.c2.W[16 x 144], rn1_6.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization(rn1_6.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c2.c.sc[16 x 1], rn1_6.c2.c.b[16 x 1], rn1_6.c2.c.m[16 x 1], rn1_6.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus(rn1_6.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear(rn1_6.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution(rn1_7.c1.c.W[16 x 144], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization(rn1_7.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c1.c.c.sc[16 x 1], rn1_7.c1.c.c.b[16 x 1], rn1_7.c1.c.c.m[16 x 1], rn1_7.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear(rn1_7.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution(rn1_7.c2.W[16 x 144], rn1_7.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization(rn1_7.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c2.c.sc[16 x 1], rn1_7.c2.c.b[16 x 1], rn1_7.c2.c.m[16 x 1], rn1_7.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus(rn1_7.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear(rn1_7.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution(rn1_8.c1.c.W[16 x 144], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization(rn1_8.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c1.c.c.sc[16 x 1], rn1_8.c1.c.c.b[16 x 1], rn1_8.c1.c.c.m[16 x 1], rn1_8.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear(rn1_8.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution(rn1_8.c2.W[16 x 144], rn1_8.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization(rn1_8.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c2.c.sc[16 x 1], rn1_8.c2.c.b[16 x 1], rn1_8.c2.c.m[16 x 1], rn1_8.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus(rn1_8.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear(rn1_8.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution(rn1_9.c1.c.W[16 x 144], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization(rn1_9.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c1.c.c.sc[16 x 1], rn1_9.c1.c.c.b[16 x 1], rn1_9.c1.c.c.m[16 x 1], rn1_9.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear(rn1_9.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution(rn1_9.c2.W[16 x 144], rn1_9.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization(rn1_9.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c2.c.sc[16 x 1], rn1_9.c2.c.b[16 x 1], rn1_9.c2.c.m[16 x 1], rn1_9.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus(rn1_9.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear(rn1_9.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution(rn1_10.c1.c.W[16 x 144], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization(rn1_10.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c1.c.c.sc[16 x 1], rn1_10.c1.c.c.b[16 x 1], rn1_10.c1.c.c.m[16 x 1], rn1_10.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear(rn1_10.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution(rn1_10.c2.W[16 x 144], rn1_10.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization(rn1_10.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c2.c.sc[16 x 1], rn1_10.c2.c.b[16 x 1], rn1_10.c2.c.m[16 x 1], rn1_10.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus(rn1_10.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear(rn1_10.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution(rn1_11.c1.c.W[16 x 144], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization(rn1_11.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c1.c.c.sc[16 x 1], rn1_11.c1.c.c.b[16 x 1], rn1_11.c1.c.c.m[16 x 1], rn1_11.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear(rn1_11.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution(rn1_11.c2.W[16 x 144], rn1_11.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization(rn1_11.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c2.c.sc[16 x 1], rn1_11.c2.c.b[16 x 1], rn1_11.c2.c.m[16 x 1], rn1_11.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus(rn1_11.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear(rn1_11.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution(rn1_12.c1.c.W[16 x 144], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization(rn1_12.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c1.c.c.sc[16 x 1], rn1_12.c1.c.c.b[16 x 1], rn1_12.c1.c.c.m[16 x 1], rn1_12.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear(rn1_12.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution(rn1_12.c2.W[16 x 144], rn1_12.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization(rn1_12.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c2.c.sc[16 x 1], rn1_12.c2.c.b[16 x 1], rn1_12.c2.c.m[16 x 1], rn1_12.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus(rn1_12.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear(rn1_12.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution(rn1_13.c1.c.W[16 x 144], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization(rn1_13.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c1.c.c.sc[16 x 1], rn1_13.c1.c.c.b[16 x 1], rn1_13.c1.c.c.m[16 x 1], rn1_13.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear(rn1_13.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution(rn1_13.c2.W[16 x 144], rn1_13.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization(rn1_13.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c2.c.sc[16 x 1], rn1_13.c2.c.b[16 x 1], rn1_13.c2.c.m[16 x 1], rn1_13.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus(rn1_13.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear(rn1_13.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution(rn1_14.c1.c.W[16 x 144], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization(rn1_14.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c1.c.c.sc[16 x 1], rn1_14.c1.c.c.b[16 x 1], rn1_14.c1.c.c.m[16 x 1], rn1_14.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear(rn1_14.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution(rn1_14.c2.W[16 x 144], rn1_14.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization(rn1_14.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c2.c.sc[16 x 1], rn1_14.c2.c.b[16 x 1], rn1_14.c2.c.m[16 x 1], rn1_14.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus(rn1_14.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear(rn1_14.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution(rn1_15.c1.c.W[16 x 144], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization(rn1_15.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c1.c.c.sc[16 x 1], rn1_15.c1.c.c.b[16 x 1], rn1_15.c1.c.c.m[16 x 1], rn1_15.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear(rn1_15.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution(rn1_15.c2.W[16 x 144], rn1_15.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization(rn1_15.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c2.c.sc[16 x 1], rn1_15.c2.c.b[16 x 1], rn1_15.c2.c.m[16 x 1], rn1_15.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus(rn1_15.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear(rn1_15.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution(rn1_16.c1.c.W[16 x 144], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization(rn1_16.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c1.c.c.sc[16 x 1], rn1_16.c1.c.c.b[16 x 1], rn1_16.c1.c.c.m[16 x 1], rn1_16.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear(rn1_16.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution(rn1_16.c2.W[16 x 144], rn1_16.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization(rn1_16.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c2.c.sc[16 x 1], rn1_16.c2.c.b[16 x 1], rn1_16.c2.c.m[16 x 1], rn1_16.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus(rn1_16.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear(rn1_16.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution(rn1_17.c1.c.W[16 x 144], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization(rn1_17.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c1.c.c.sc[16 x 1], rn1_17.c1.c.c.b[16 x 1], rn1_17.c1.c.c.m[16 x 1], rn1_17.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear(rn1_17.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution(rn1_17.c2.W[16 x 144], rn1_17.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization(rn1_17.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c2.c.sc[16 x 1], rn1_17.c2.c.b[16 x 1], rn1_17.c2.c.m[16 x 1], rn1_17.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus(rn1_17.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear(rn1_17.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution(rn1_18.c1.c.W[16 x 144], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization(rn1_18.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c1.c.c.sc[16 x 1], rn1_18.c1.c.c.b[16 x 1], rn1_18.c1.c.c.m[16 x 1], rn1_18.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear(rn1_18.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution(rn1_18.c2.W[16 x 144], rn1_18.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization(rn1_18.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c2.c.sc[16 x 1], rn1_18.c2.c.b[16 x 1], rn1_18.c2.c.m[16 x 1], rn1_18.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus(rn1_18.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear(rn1_18.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[32 x 144], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c1.c.c.sc[32 x 1], rn2_1.c1.c.c.b[32 x 1], rn2_1.c1.c.c.m[32 x 1], rn2_1.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[32 x 288], rn2_1.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c2.c.sc[32 x 1], rn2_1.c2.c.b[32 x 1], rn2_1.c2.c.m[32 x 1], rn2_1.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[32 x 16], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.sc[32 x 1], rn2_1.c_proj.b[32 x 1], rn2_1.c_proj.m[32 x 1], rn2_1.c_proj.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[32 x 288], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c1.c.c.sc[32 x 1], rn2_2.c1.c.c.b[32 x 1], rn2_2.c1.c.c.m[32 x 1], rn2_2.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[32 x 288], rn2_2.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c2.c.sc[32 x 1], rn2_2.c2.c.b[32 x 1], rn2_2.c2.c.m[32 x 1], rn2_2.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[32 x 288], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c1.c.c.sc[32 x 1], rn2_3.c1.c.c.b[32 x 1], rn2_3.c1.c.c.m[32 x 1], rn2_3.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[32 x 288], rn2_3.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c2.c.sc[32 x 1], rn2_3.c2.c.b[32 x 1], rn2_3.c2.c.m[32 x 1], rn2_3.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[32 x 288], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c1.c.c.sc[32 x 1], rn2_4.c1.c.c.b[32 x 1], rn2_4.c1.c.c.m[32 x 1], rn2_4.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[32 x 288], rn2_4.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c2.c.sc[32 x 1], rn2_4.c2.c.b[32 x 1], rn2_4.c2.c.m[32 x 1], rn2_4.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution(rn2_5.c1.c.W[32 x 288], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization(rn2_5.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c1.c.c.sc[32 x 1], rn2_5.c1.c.c.b[32 x 1], rn2_5.c1.c.c.m[32 x 1], rn2_5.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear(rn2_5.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution(rn2_5.c2.W[32 x 288], rn2_5.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization(rn2_5.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c2.c.sc[32 x 1], rn2_5.c2.c.b[32 x 1], rn2_5.c2.c.m[32 x 1], rn2_5.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus(rn2_5.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear(rn2_5.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution(rn2_6.c1.c.W[32 x 288], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization(rn2_6.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c1.c.c.sc[32 x 1], rn2_6.c1.c.c.b[32 x 1], rn2_6.c1.c.c.m[32 x 1], rn2_6.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear(rn2_6.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution(rn2_6.c2.W[32 x 288], rn2_6.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization(rn2_6.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c2.c.sc[32 x 1], rn2_6.c2.c.b[32 x 1], rn2_6.c2.c.m[32 x 1], rn2_6.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus(rn2_6.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear(rn2_6.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution(rn2_7.c1.c.W[32 x 288], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization(rn2_7.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c1.c.c.sc[32 x 1], rn2_7.c1.c.c.b[32 x 1], rn2_7.c1.c.c.m[32 x 1], rn2_7.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear(rn2_7.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution(rn2_7.c2.W[32 x 288], rn2_7.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization(rn2_7.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c2.c.sc[32 x 1], rn2_7.c2.c.b[32 x 1], rn2_7.c2.c.m[32 x 1], rn2_7.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus(rn2_7.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear(rn2_7.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution(rn2_8.c1.c.W[32 x 288], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization(rn2_8.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c1.c.c.sc[32 x 1], rn2_8.c1.c.c.b[32 x 1], rn2_8.c1.c.c.m[32 x 1], rn2_8.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear(rn2_8.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution(rn2_8.c2.W[32 x 288], rn2_8.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization(rn2_8.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c2.c.sc[32 x 1], rn2_8.c2.c.b[32 x 1], rn2_8.c2.c.m[32 x 1], rn2_8.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus(rn2_8.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear(rn2_8.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution(rn2_9.c1.c.W[32 x 288], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization(rn2_9.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c1.c.c.sc[32 x 1], rn2_9.c1.c.c.b[32 x 1], rn2_9.c1.c.c.m[32 x 1], rn2_9.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear(rn2_9.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution(rn2_9.c2.W[32 x 288], rn2_9.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization(rn2_9.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c2.c.sc[32 x 1], rn2_9.c2.c.b[32 x 1], rn2_9.c2.c.m[32 x 1], rn2_9.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus(rn2_9.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear(rn2_9.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution(rn2_10.c1.c.W[32 x 288], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization(rn2_10.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c1.c.c.sc[32 x 1], rn2_10.c1.c.c.b[32 x 1], rn2_10.c1.c.c.m[32 x 1], rn2_10.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear(rn2_10.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution(rn2_10.c2.W[32 x 288], rn2_10.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization(rn2_10.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c2.c.sc[32 x 1], rn2_10.c2.c.b[32 x 1], rn2_10.c2.c.m[32 x 1], rn2_10.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus(rn2_10.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear(rn2_10.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution(rn2_11.c1.c.W[32 x 288], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization(rn2_11.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c1.c.c.sc[32 x 1], rn2_11.c1.c.c.b[32 x 1], rn2_11.c1.c.c.m[32 x 1], rn2_11.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear(rn2_11.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution(rn2_11.c2.W[32 x 288], rn2_11.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization(rn2_11.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c2.c.sc[32 x 1], rn2_11.c2.c.b[32 x 1], rn2_11.c2.c.m[32 x 1], rn2_11.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus(rn2_11.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear(rn2_11.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution(rn2_12.c1.c.W[32 x 288], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization(rn2_12.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c1.c.c.sc[32 x 1], rn2_12.c1.c.c.b[32 x 1], rn2_12.c1.c.c.m[32 x 1], rn2_12.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear(rn2_12.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution(rn2_12.c2.W[32 x 288], rn2_12.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization(rn2_12.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c2.c.sc[32 x 1], rn2_12.c2.c.b[32 x 1], rn2_12.c2.c.m[32 x 1], rn2_12.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus(rn2_12.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear(rn2_12.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution(rn2_13.c1.c.W[32 x 288], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization(rn2_13.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c1.c.c.sc[32 x 1], rn2_13.c1.c.c.b[32 x 1], rn2_13.c1.c.c.m[32 x 1], rn2_13.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear(rn2_13.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution(rn2_13.c2.W[32 x 288], rn2_13.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization(rn2_13.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c2.c.sc[32 x 1], rn2_13.c2.c.b[32 x 1], rn2_13.c2.c.m[32 x 1], rn2_13.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus(rn2_13.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear(rn2_13.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution(rn2_14.c1.c.W[32 x 288], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization(rn2_14.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c1.c.c.sc[32 x 1], rn2_14.c1.c.c.b[32 x 1], rn2_14.c1.c.c.m[32 x 1], rn2_14.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear(rn2_14.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution(rn2_14.c2.W[32 x 288], rn2_14.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization(rn2_14.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c2.c.sc[32 x 1], rn2_14.c2.c.b[32 x 1], rn2_14.c2.c.m[32 x 1], rn2_14.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus(rn2_14.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear(rn2_14.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution(rn2_15.c1.c.W[32 x 288], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization(rn2_15.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c1.c.c.sc[32 x 1], rn2_15.c1.c.c.b[32 x 1], rn2_15.c1.c.c.m[32 x 1], rn2_15.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear(rn2_15.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution(rn2_15.c2.W[32 x 288], rn2_15.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization(rn2_15.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c2.c.sc[32 x 1], rn2_15.c2.c.b[32 x 1], rn2_15.c2.c.m[32 x 1], rn2_15.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus(rn2_15.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear(rn2_15.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution(rn2_16.c1.c.W[32 x 288], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization(rn2_16.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c1.c.c.sc[32 x 1], rn2_16.c1.c.c.b[32 x 1], rn2_16.c1.c.c.m[32 x 1], rn2_16.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear(rn2_16.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution(rn2_16.c2.W[32 x 288], rn2_16.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization(rn2_16.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c2.c.sc[32 x 1], rn2_16.c2.c.b[32 x 1], rn2_16.c2.c.m[32 x 1], rn2_16.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus(rn2_16.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear(rn2_16.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution(rn2_17.c1.c.W[32 x 288], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization(rn2_17.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c1.c.c.sc[32 x 1], rn2_17.c1.c.c.b[32 x 1], rn2_17.c1.c.c.m[32 x 1], rn2_17.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear(rn2_17.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution(rn2_17.c2.W[32 x 288], rn2_17.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization(rn2_17.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c2.c.sc[32 x 1], rn2_17.c2.c.b[32 x 1], rn2_17.c2.c.m[32 x 1], rn2_17.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus(rn2_17.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear(rn2_17.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution(rn2_18.c1.c.W[32 x 288], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization(rn2_18.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c1.c.c.sc[32 x 1], rn2_18.c1.c.c.b[32 x 1], rn2_18.c1.c.c.m[32 x 1], rn2_18.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear(rn2_18.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution(rn2_18.c2.W[32 x 288], rn2_18.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization(rn2_18.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c2.c.sc[32 x 1], rn2_18.c2.c.b[32 x 1], rn2_18.c2.c.m[32 x 1], rn2_18.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus(rn2_18.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear(rn2_18.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[64 x 288], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c1.c.c.sc[64 x 1], rn3_1.c1.c.c.b[64 x 1], rn3_1.c1.c.c.m[64 x 1], rn3_1.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[64 x 576], rn3_1.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c2.c.sc[64 x 1], rn3_1.c2.c.b[64 x 1], rn3_1.c2.c.m[64 x 1], rn3_1.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[64 x 32], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.sc[64 x 1], rn3_1.c_proj.b[64 x 1], rn3_1.c_proj.m[64 x 1], rn3_1.c_proj.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[64 x 576], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c1.c.c.sc[64 x 1], rn3_2.c1.c.c.b[64 x 1], rn3_2.c1.c.c.m[64 x 1], rn3_2.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[64 x 576], rn3_2.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c2.c.sc[64 x 1], rn3_2.c2.c.b[64 x 1], rn3_2.c2.c.m[64 x 1], rn3_2.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[64 x 576], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c1.c.c.sc[64 x 1], rn3_3.c1.c.c.b[64 x 1], rn3_3.c1.c.c.m[64 x 1], rn3_3.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[64 x 576], rn3_3.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c2.c.sc[64 x 1], rn3_3.c2.c.b[64 x 1], rn3_3.c2.c.m[64 x 1], rn3_3.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[64 x 576], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c1.c.c.sc[64 x 1], rn3_4.c1.c.c.b[64 x 1], rn3_4.c1.c.c.m[64 x 1], rn3_4.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[64 x 576], rn3_4.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c2.c.sc[64 x 1], rn3_4.c2.c.b[64 x 1], rn3_4.c2.c.m[64 x 1], rn3_4.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[64 x 576], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c1.c.c.sc[64 x 1], rn3_5.c1.c.c.b[64 x 1], rn3_5.c1.c.c.m[64 x 1], rn3_5.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[64 x 576], rn3_5.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c2.c.sc[64 x 1], rn3_5.c2.c.b[64 x 1], rn3_5.c2.c.m[64 x 1], rn3_5.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[64 x 576], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c1.c.c.sc[64 x 1], rn3_6.c1.c.c.b[64 x 1], rn3_6.c1.c.c.m[64 x 1], rn3_6.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[64 x 576], rn3_6.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c2.c.sc[64 x 1], rn3_6.c2.c.b[64 x 1], rn3_6.c2.c.m[64 x 1], rn3_6.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution(rn3_7.c1.c.W[64 x 576], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization(rn3_7.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c1.c.c.sc[64 x 1], rn3_7.c1.c.c.b[64 x 1], rn3_7.c1.c.c.m[64 x 1], rn3_7.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear(rn3_7.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution(rn3_7.c2.W[64 x 576], rn3_7.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization(rn3_7.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c2.c.sc[64 x 1], rn3_7.c2.c.b[64 x 1], rn3_7.c2.c.m[64 x 1], rn3_7.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus(rn3_7.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear(rn3_7.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution(rn3_8.c1.c.W[64 x 576], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization(rn3_8.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c1.c.c.sc[64 x 1], rn3_8.c1.c.c.b[64 x 1], rn3_8.c1.c.c.m[64 x 1], rn3_8.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear(rn3_8.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution(rn3_8.c2.W[64 x 576], rn3_8.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization(rn3_8.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c2.c.sc[64 x 1], rn3_8.c2.c.b[64 x 1], rn3_8.c2.c.m[64 x 1], rn3_8.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus(rn3_8.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear(rn3_8.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution(rn3_9.c1.c.W[64 x 576], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization(rn3_9.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c1.c.c.sc[64 x 1], rn3_9.c1.c.c.b[64 x 1], rn3_9.c1.c.c.m[64 x 1], rn3_9.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear(rn3_9.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution(rn3_9.c2.W[64 x 576], rn3_9.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization(rn3_9.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c2.c.sc[64 x 1], rn3_9.c2.c.b[64 x 1], rn3_9.c2.c.m[64 x 1], rn3_9.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus(rn3_9.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear(rn3_9.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution(rn3_10.c1.c.W[64 x 576], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization(rn3_10.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c1.c.c.sc[64 x 1], rn3_10.c1.c.c.b[64 x 1], rn3_10.c1.c.c.m[64 x 1], rn3_10.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear(rn3_10.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution(rn3_10.c2.W[64 x 576], rn3_10.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization(rn3_10.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c2.c.sc[64 x 1], rn3_10.c2.c.b[64 x 1], rn3_10.c2.c.m[64 x 1], rn3_10.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus(rn3_10.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear(rn3_10.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution(rn3_11.c1.c.W[64 x 576], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization(rn3_11.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c1.c.c.sc[64 x 1], rn3_11.c1.c.c.b[64 x 1], rn3_11.c1.c.c.m[64 x 1], rn3_11.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear(rn3_11.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution(rn3_11.c2.W[64 x 576], rn3_11.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization(rn3_11.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c2.c.sc[64 x 1], rn3_11.c2.c.b[64 x 1], rn3_11.c2.c.m[64 x 1], rn3_11.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus(rn3_11.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear(rn3_11.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution(rn3_12.c1.c.W[64 x 576], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization(rn3_12.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c1.c.c.sc[64 x 1], rn3_12.c1.c.c.b[64 x 1], rn3_12.c1.c.c.m[64 x 1], rn3_12.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear(rn3_12.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution(rn3_12.c2.W[64 x 576], rn3_12.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization(rn3_12.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c2.c.sc[64 x 1], rn3_12.c2.c.b[64 x 1], rn3_12.c2.c.m[64 x 1], rn3_12.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus(rn3_12.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear(rn3_12.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution(rn3_13.c1.c.W[64 x 576], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization(rn3_13.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c1.c.c.sc[64 x 1], rn3_13.c1.c.c.b[64 x 1], rn3_13.c1.c.c.m[64 x 1], rn3_13.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear(rn3_13.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution(rn3_13.c2.W[64 x 576], rn3_13.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization(rn3_13.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c2.c.sc[64 x 1], rn3_13.c2.c.b[64 x 1], rn3_13.c2.c.m[64 x 1], rn3_13.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus(rn3_13.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear(rn3_13.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution(rn3_14.c1.c.W[64 x 576], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization(rn3_14.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c1.c.c.sc[64 x 1], rn3_14.c1.c.c.b[64 x 1], rn3_14.c1.c.c.m[64 x 1], rn3_14.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear(rn3_14.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution(rn3_14.c2.W[64 x 576], rn3_14.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization(rn3_14.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c2.c.sc[64 x 1], rn3_14.c2.c.b[64 x 1], rn3_14.c2.c.m[64 x 1], rn3_14.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus(rn3_14.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear(rn3_14.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution(rn3_15.c1.c.W[64 x 576], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization(rn3_15.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c1.c.c.sc[64 x 1], rn3_15.c1.c.c.b[64 x 1], rn3_15.c1.c.c.m[64 x 1], rn3_15.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear(rn3_15.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution(rn3_15.c2.W[64 x 576], rn3_15.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization(rn3_15.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c2.c.sc[64 x 1], rn3_15.c2.c.b[64 x 1], rn3_15.c2.c.m[64 x 1], rn3_15.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus(rn3_15.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear(rn3_15.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution(rn3_16.c1.c.W[64 x 576], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization(rn3_16.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c1.c.c.sc[64 x 1], rn3_16.c1.c.c.b[64 x 1], rn3_16.c1.c.c.m[64 x 1], rn3_16.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear(rn3_16.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution(rn3_16.c2.W[64 x 576], rn3_16.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization(rn3_16.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c2.c.sc[64 x 1], rn3_16.c2.c.b[64 x 1], rn3_16.c2.c.m[64 x 1], rn3_16.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus(rn3_16.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear(rn3_16.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution(rn3_17.c1.c.W[64 x 576], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization(rn3_17.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c1.c.c.sc[64 x 1], rn3_17.c1.c.c.b[64 x 1], rn3_17.c1.c.c.m[64 x 1], rn3_17.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear(rn3_17.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution(rn3_17.c2.W[64 x 576], rn3_17.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization(rn3_17.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c2.c.sc[64 x 1], rn3_17.c2.c.b[64 x 1], rn3_17.c2.c.m[64 x 1], rn3_17.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus(rn3_17.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear(rn3_17.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution(rn3_18.c1.c.W[64 x 576], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization(rn3_18.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c1.c.c.sc[64 x 1], rn3_18.c1.c.c.b[64 x 1], rn3_18.c1.c.c.m[64 x 1], rn3_18.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear(rn3_18.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution(rn3_18.c2.W[64 x 576], rn3_18.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization(rn3_18.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c2.c.sc[64 x 1], rn3_18.c2.c.b[64 x 1], rn3_18.c2.c.m[64 x 1], rn3_18.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus(rn3_18.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear(rn3_18.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling(rn3_18.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[10 x 64], pool[1 x 1 x 64 x *]) -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter -> [10]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10 x *], OutputNodes.b[10]) -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[10 x *], OutputNodes.z[10 x *]) -> [1]
Validating --> Err = ErrorPrediction(labels[10 x *], OutputNodes.z[10 x *]) -> [1]

Validating network. 390 nodes to process in pass 2.

Validating --> labels = InputValue -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter -> [16 x 27]
Validating --> features = InputValue -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[16 x 27], features[32 x 32 x 3 x * {W=32, H=3, C=32}]) -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.c.c.sc[16 x 1], conv1.c.c.b[16 x 1], conv1.c.c.m[16 x 1], conv1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[16 x 144], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c1.c.c.sc[16 x 1], rn1_1.c1.c.c.b[16 x 1], rn1_1.c1.c.c.m[16 x 1], rn1_1.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[16 x 144], rn1_1.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c2.c.sc[16 x 1], rn1_1.c2.c.b[16 x 1], rn1_1.c2.c.m[16 x 1], rn1_1.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[16 x 144], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c1.c.c.sc[16 x 1], rn1_2.c1.c.c.b[16 x 1], rn1_2.c1.c.c.m[16 x 1], rn1_2.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[16 x 144], rn1_2.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c2.c.sc[16 x 1], rn1_2.c2.c.b[16 x 1], rn1_2.c2.c.m[16 x 1], rn1_2.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[16 x 144], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c1.c.c.sc[16 x 1], rn1_3.c1.c.c.b[16 x 1], rn1_3.c1.c.c.m[16 x 1], rn1_3.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[16 x 144], rn1_3.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c2.c.sc[16 x 1], rn1_3.c2.c.b[16 x 1], rn1_3.c2.c.m[16 x 1], rn1_3.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution(rn1_4.c1.c.W[16 x 144], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization(rn1_4.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c1.c.c.sc[16 x 1], rn1_4.c1.c.c.b[16 x 1], rn1_4.c1.c.c.m[16 x 1], rn1_4.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear(rn1_4.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution(rn1_4.c2.W[16 x 144], rn1_4.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization(rn1_4.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c2.c.sc[16 x 1], rn1_4.c2.c.b[16 x 1], rn1_4.c2.c.m[16 x 1], rn1_4.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus(rn1_4.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear(rn1_4.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution(rn1_5.c1.c.W[16 x 144], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization(rn1_5.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c1.c.c.sc[16 x 1], rn1_5.c1.c.c.b[16 x 1], rn1_5.c1.c.c.m[16 x 1], rn1_5.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear(rn1_5.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution(rn1_5.c2.W[16 x 144], rn1_5.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization(rn1_5.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c2.c.sc[16 x 1], rn1_5.c2.c.b[16 x 1], rn1_5.c2.c.m[16 x 1], rn1_5.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus(rn1_5.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear(rn1_5.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution(rn1_6.c1.c.W[16 x 144], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization(rn1_6.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c1.c.c.sc[16 x 1], rn1_6.c1.c.c.b[16 x 1], rn1_6.c1.c.c.m[16 x 1], rn1_6.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear(rn1_6.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution(rn1_6.c2.W[16 x 144], rn1_6.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization(rn1_6.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c2.c.sc[16 x 1], rn1_6.c2.c.b[16 x 1], rn1_6.c2.c.m[16 x 1], rn1_6.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus(rn1_6.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear(rn1_6.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution(rn1_7.c1.c.W[16 x 144], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization(rn1_7.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c1.c.c.sc[16 x 1], rn1_7.c1.c.c.b[16 x 1], rn1_7.c1.c.c.m[16 x 1], rn1_7.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear(rn1_7.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution(rn1_7.c2.W[16 x 144], rn1_7.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization(rn1_7.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c2.c.sc[16 x 1], rn1_7.c2.c.b[16 x 1], rn1_7.c2.c.m[16 x 1], rn1_7.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus(rn1_7.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear(rn1_7.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution(rn1_8.c1.c.W[16 x 144], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization(rn1_8.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c1.c.c.sc[16 x 1], rn1_8.c1.c.c.b[16 x 1], rn1_8.c1.c.c.m[16 x 1], rn1_8.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear(rn1_8.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution(rn1_8.c2.W[16 x 144], rn1_8.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization(rn1_8.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c2.c.sc[16 x 1], rn1_8.c2.c.b[16 x 1], rn1_8.c2.c.m[16 x 1], rn1_8.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus(rn1_8.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear(rn1_8.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution(rn1_9.c1.c.W[16 x 144], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization(rn1_9.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c1.c.c.sc[16 x 1], rn1_9.c1.c.c.b[16 x 1], rn1_9.c1.c.c.m[16 x 1], rn1_9.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear(rn1_9.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution(rn1_9.c2.W[16 x 144], rn1_9.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization(rn1_9.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c2.c.sc[16 x 1], rn1_9.c2.c.b[16 x 1], rn1_9.c2.c.m[16 x 1], rn1_9.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus(rn1_9.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear(rn1_9.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution(rn1_10.c1.c.W[16 x 144], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization(rn1_10.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c1.c.c.sc[16 x 1], rn1_10.c1.c.c.b[16 x 1], rn1_10.c1.c.c.m[16 x 1], rn1_10.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear(rn1_10.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution(rn1_10.c2.W[16 x 144], rn1_10.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization(rn1_10.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c2.c.sc[16 x 1], rn1_10.c2.c.b[16 x 1], rn1_10.c2.c.m[16 x 1], rn1_10.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus(rn1_10.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear(rn1_10.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution(rn1_11.c1.c.W[16 x 144], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization(rn1_11.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c1.c.c.sc[16 x 1], rn1_11.c1.c.c.b[16 x 1], rn1_11.c1.c.c.m[16 x 1], rn1_11.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear(rn1_11.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution(rn1_11.c2.W[16 x 144], rn1_11.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization(rn1_11.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c2.c.sc[16 x 1], rn1_11.c2.c.b[16 x 1], rn1_11.c2.c.m[16 x 1], rn1_11.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus(rn1_11.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear(rn1_11.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution(rn1_12.c1.c.W[16 x 144], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization(rn1_12.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c1.c.c.sc[16 x 1], rn1_12.c1.c.c.b[16 x 1], rn1_12.c1.c.c.m[16 x 1], rn1_12.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear(rn1_12.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution(rn1_12.c2.W[16 x 144], rn1_12.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization(rn1_12.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c2.c.sc[16 x 1], rn1_12.c2.c.b[16 x 1], rn1_12.c2.c.m[16 x 1], rn1_12.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus(rn1_12.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear(rn1_12.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution(rn1_13.c1.c.W[16 x 144], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization(rn1_13.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c1.c.c.sc[16 x 1], rn1_13.c1.c.c.b[16 x 1], rn1_13.c1.c.c.m[16 x 1], rn1_13.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear(rn1_13.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution(rn1_13.c2.W[16 x 144], rn1_13.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization(rn1_13.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c2.c.sc[16 x 1], rn1_13.c2.c.b[16 x 1], rn1_13.c2.c.m[16 x 1], rn1_13.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus(rn1_13.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear(rn1_13.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution(rn1_14.c1.c.W[16 x 144], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization(rn1_14.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c1.c.c.sc[16 x 1], rn1_14.c1.c.c.b[16 x 1], rn1_14.c1.c.c.m[16 x 1], rn1_14.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear(rn1_14.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution(rn1_14.c2.W[16 x 144], rn1_14.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization(rn1_14.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c2.c.sc[16 x 1], rn1_14.c2.c.b[16 x 1], rn1_14.c2.c.m[16 x 1], rn1_14.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus(rn1_14.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear(rn1_14.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution(rn1_15.c1.c.W[16 x 144], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization(rn1_15.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c1.c.c.sc[16 x 1], rn1_15.c1.c.c.b[16 x 1], rn1_15.c1.c.c.m[16 x 1], rn1_15.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear(rn1_15.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution(rn1_15.c2.W[16 x 144], rn1_15.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization(rn1_15.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c2.c.sc[16 x 1], rn1_15.c2.c.b[16 x 1], rn1_15.c2.c.m[16 x 1], rn1_15.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus(rn1_15.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear(rn1_15.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution(rn1_16.c1.c.W[16 x 144], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization(rn1_16.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c1.c.c.sc[16 x 1], rn1_16.c1.c.c.b[16 x 1], rn1_16.c1.c.c.m[16 x 1], rn1_16.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear(rn1_16.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution(rn1_16.c2.W[16 x 144], rn1_16.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization(rn1_16.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c2.c.sc[16 x 1], rn1_16.c2.c.b[16 x 1], rn1_16.c2.c.m[16 x 1], rn1_16.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus(rn1_16.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear(rn1_16.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution(rn1_17.c1.c.W[16 x 144], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization(rn1_17.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c1.c.c.sc[16 x 1], rn1_17.c1.c.c.b[16 x 1], rn1_17.c1.c.c.m[16 x 1], rn1_17.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear(rn1_17.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution(rn1_17.c2.W[16 x 144], rn1_17.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization(rn1_17.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c2.c.sc[16 x 1], rn1_17.c2.c.b[16 x 1], rn1_17.c2.c.m[16 x 1], rn1_17.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus(rn1_17.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear(rn1_17.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution(rn1_18.c1.c.W[16 x 144], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization(rn1_18.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c1.c.c.sc[16 x 1], rn1_18.c1.c.c.b[16 x 1], rn1_18.c1.c.c.m[16 x 1], rn1_18.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear(rn1_18.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution(rn1_18.c2.W[16 x 144], rn1_18.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization(rn1_18.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c2.c.sc[16 x 1], rn1_18.c2.c.b[16 x 1], rn1_18.c2.c.m[16 x 1], rn1_18.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus(rn1_18.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear(rn1_18.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[32 x 144], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c1.c.c.sc[32 x 1], rn2_1.c1.c.c.b[32 x 1], rn2_1.c1.c.c.m[32 x 1], rn2_1.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[32 x 288], rn2_1.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c2.c.sc[32 x 1], rn2_1.c2.c.b[32 x 1], rn2_1.c2.c.m[32 x 1], rn2_1.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[32 x 16], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.sc[32 x 1], rn2_1.c_proj.b[32 x 1], rn2_1.c_proj.m[32 x 1], rn2_1.c_proj.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[32 x 288], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c1.c.c.sc[32 x 1], rn2_2.c1.c.c.b[32 x 1], rn2_2.c1.c.c.m[32 x 1], rn2_2.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[32 x 288], rn2_2.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c2.c.sc[32 x 1], rn2_2.c2.c.b[32 x 1], rn2_2.c2.c.m[32 x 1], rn2_2.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[32 x 288], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c1.c.c.sc[32 x 1], rn2_3.c1.c.c.b[32 x 1], rn2_3.c1.c.c.m[32 x 1], rn2_3.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[32 x 288], rn2_3.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c2.c.sc[32 x 1], rn2_3.c2.c.b[32 x 1], rn2_3.c2.c.m[32 x 1], rn2_3.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[32 x 288], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c1.c.c.sc[32 x 1], rn2_4.c1.c.c.b[32 x 1], rn2_4.c1.c.c.m[32 x 1], rn2_4.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[32 x 288], rn2_4.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c2.c.sc[32 x 1], rn2_4.c2.c.b[32 x 1], rn2_4.c2.c.m[32 x 1], rn2_4.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution(rn2_5.c1.c.W[32 x 288], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization(rn2_5.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c1.c.c.sc[32 x 1], rn2_5.c1.c.c.b[32 x 1], rn2_5.c1.c.c.m[32 x 1], rn2_5.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear(rn2_5.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution(rn2_5.c2.W[32 x 288], rn2_5.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization(rn2_5.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c2.c.sc[32 x 1], rn2_5.c2.c.b[32 x 1], rn2_5.c2.c.m[32 x 1], rn2_5.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus(rn2_5.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear(rn2_5.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution(rn2_6.c1.c.W[32 x 288], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization(rn2_6.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c1.c.c.sc[32 x 1], rn2_6.c1.c.c.b[32 x 1], rn2_6.c1.c.c.m[32 x 1], rn2_6.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear(rn2_6.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution(rn2_6.c2.W[32 x 288], rn2_6.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization(rn2_6.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c2.c.sc[32 x 1], rn2_6.c2.c.b[32 x 1], rn2_6.c2.c.m[32 x 1], rn2_6.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus(rn2_6.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear(rn2_6.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution(rn2_7.c1.c.W[32 x 288], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization(rn2_7.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c1.c.c.sc[32 x 1], rn2_7.c1.c.c.b[32 x 1], rn2_7.c1.c.c.m[32 x 1], rn2_7.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear(rn2_7.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution(rn2_7.c2.W[32 x 288], rn2_7.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization(rn2_7.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c2.c.sc[32 x 1], rn2_7.c2.c.b[32 x 1], rn2_7.c2.c.m[32 x 1], rn2_7.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus(rn2_7.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear(rn2_7.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution(rn2_8.c1.c.W[32 x 288], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization(rn2_8.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c1.c.c.sc[32 x 1], rn2_8.c1.c.c.b[32 x 1], rn2_8.c1.c.c.m[32 x 1], rn2_8.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear(rn2_8.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution(rn2_8.c2.W[32 x 288], rn2_8.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization(rn2_8.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c2.c.sc[32 x 1], rn2_8.c2.c.b[32 x 1], rn2_8.c2.c.m[32 x 1], rn2_8.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus(rn2_8.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear(rn2_8.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution(rn2_9.c1.c.W[32 x 288], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization(rn2_9.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c1.c.c.sc[32 x 1], rn2_9.c1.c.c.b[32 x 1], rn2_9.c1.c.c.m[32 x 1], rn2_9.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear(rn2_9.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution(rn2_9.c2.W[32 x 288], rn2_9.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization(rn2_9.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c2.c.sc[32 x 1], rn2_9.c2.c.b[32 x 1], rn2_9.c2.c.m[32 x 1], rn2_9.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus(rn2_9.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear(rn2_9.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution(rn2_10.c1.c.W[32 x 288], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization(rn2_10.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c1.c.c.sc[32 x 1], rn2_10.c1.c.c.b[32 x 1], rn2_10.c1.c.c.m[32 x 1], rn2_10.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear(rn2_10.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution(rn2_10.c2.W[32 x 288], rn2_10.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization(rn2_10.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c2.c.sc[32 x 1], rn2_10.c2.c.b[32 x 1], rn2_10.c2.c.m[32 x 1], rn2_10.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus(rn2_10.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear(rn2_10.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution(rn2_11.c1.c.W[32 x 288], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization(rn2_11.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c1.c.c.sc[32 x 1], rn2_11.c1.c.c.b[32 x 1], rn2_11.c1.c.c.m[32 x 1], rn2_11.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear(rn2_11.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution(rn2_11.c2.W[32 x 288], rn2_11.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization(rn2_11.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c2.c.sc[32 x 1], rn2_11.c2.c.b[32 x 1], rn2_11.c2.c.m[32 x 1], rn2_11.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus(rn2_11.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear(rn2_11.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution(rn2_12.c1.c.W[32 x 288], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization(rn2_12.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c1.c.c.sc[32 x 1], rn2_12.c1.c.c.b[32 x 1], rn2_12.c1.c.c.m[32 x 1], rn2_12.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear(rn2_12.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution(rn2_12.c2.W[32 x 288], rn2_12.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization(rn2_12.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c2.c.sc[32 x 1], rn2_12.c2.c.b[32 x 1], rn2_12.c2.c.m[32 x 1], rn2_12.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus(rn2_12.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear(rn2_12.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution(rn2_13.c1.c.W[32 x 288], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization(rn2_13.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c1.c.c.sc[32 x 1], rn2_13.c1.c.c.b[32 x 1], rn2_13.c1.c.c.m[32 x 1], rn2_13.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear(rn2_13.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution(rn2_13.c2.W[32 x 288], rn2_13.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization(rn2_13.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c2.c.sc[32 x 1], rn2_13.c2.c.b[32 x 1], rn2_13.c2.c.m[32 x 1], rn2_13.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus(rn2_13.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear(rn2_13.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution(rn2_14.c1.c.W[32 x 288], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization(rn2_14.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c1.c.c.sc[32 x 1], rn2_14.c1.c.c.b[32 x 1], rn2_14.c1.c.c.m[32 x 1], rn2_14.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear(rn2_14.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution(rn2_14.c2.W[32 x 288], rn2_14.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization(rn2_14.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c2.c.sc[32 x 1], rn2_14.c2.c.b[32 x 1], rn2_14.c2.c.m[32 x 1], rn2_14.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus(rn2_14.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear(rn2_14.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution(rn2_15.c1.c.W[32 x 288], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization(rn2_15.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c1.c.c.sc[32 x 1], rn2_15.c1.c.c.b[32 x 1], rn2_15.c1.c.c.m[32 x 1], rn2_15.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear(rn2_15.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution(rn2_15.c2.W[32 x 288], rn2_15.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization(rn2_15.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c2.c.sc[32 x 1], rn2_15.c2.c.b[32 x 1], rn2_15.c2.c.m[32 x 1], rn2_15.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus(rn2_15.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear(rn2_15.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution(rn2_16.c1.c.W[32 x 288], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization(rn2_16.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c1.c.c.sc[32 x 1], rn2_16.c1.c.c.b[32 x 1], rn2_16.c1.c.c.m[32 x 1], rn2_16.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear(rn2_16.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution(rn2_16.c2.W[32 x 288], rn2_16.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization(rn2_16.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c2.c.sc[32 x 1], rn2_16.c2.c.b[32 x 1], rn2_16.c2.c.m[32 x 1], rn2_16.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus(rn2_16.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear(rn2_16.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution(rn2_17.c1.c.W[32 x 288], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization(rn2_17.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c1.c.c.sc[32 x 1], rn2_17.c1.c.c.b[32 x 1], rn2_17.c1.c.c.m[32 x 1], rn2_17.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear(rn2_17.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution(rn2_17.c2.W[32 x 288], rn2_17.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization(rn2_17.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c2.c.sc[32 x 1], rn2_17.c2.c.b[32 x 1], rn2_17.c2.c.m[32 x 1], rn2_17.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus(rn2_17.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear(rn2_17.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution(rn2_18.c1.c.W[32 x 288], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization(rn2_18.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c1.c.c.sc[32 x 1], rn2_18.c1.c.c.b[32 x 1], rn2_18.c1.c.c.m[32 x 1], rn2_18.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear(rn2_18.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution(rn2_18.c2.W[32 x 288], rn2_18.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization(rn2_18.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c2.c.sc[32 x 1], rn2_18.c2.c.b[32 x 1], rn2_18.c2.c.m[32 x 1], rn2_18.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus(rn2_18.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear(rn2_18.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[64 x 288], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c1.c.c.sc[64 x 1], rn3_1.c1.c.c.b[64 x 1], rn3_1.c1.c.c.m[64 x 1], rn3_1.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[64 x 576], rn3_1.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c2.c.sc[64 x 1], rn3_1.c2.c.b[64 x 1], rn3_1.c2.c.m[64 x 1], rn3_1.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[64 x 32], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.sc[64 x 1], rn3_1.c_proj.b[64 x 1], rn3_1.c_proj.m[64 x 1], rn3_1.c_proj.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[64 x 576], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c1.c.c.sc[64 x 1], rn3_2.c1.c.c.b[64 x 1], rn3_2.c1.c.c.m[64 x 1], rn3_2.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[64 x 576], rn3_2.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c2.c.sc[64 x 1], rn3_2.c2.c.b[64 x 1], rn3_2.c2.c.m[64 x 1], rn3_2.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[64 x 576], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c1.c.c.sc[64 x 1], rn3_3.c1.c.c.b[64 x 1], rn3_3.c1.c.c.m[64 x 1], rn3_3.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[64 x 576], rn3_3.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c2.c.sc[64 x 1], rn3_3.c2.c.b[64 x 1], rn3_3.c2.c.m[64 x 1], rn3_3.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[64 x 576], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c1.c.c.sc[64 x 1], rn3_4.c1.c.c.b[64 x 1], rn3_4.c1.c.c.m[64 x 1], rn3_4.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[64 x 576], rn3_4.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c2.c.sc[64 x 1], rn3_4.c2.c.b[64 x 1], rn3_4.c2.c.m[64 x 1], rn3_4.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[64 x 576], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c1.c.c.sc[64 x 1], rn3_5.c1.c.c.b[64 x 1], rn3_5.c1.c.c.m[64 x 1], rn3_5.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[64 x 576], rn3_5.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c2.c.sc[64 x 1], rn3_5.c2.c.b[64 x 1], rn3_5.c2.c.m[64 x 1], rn3_5.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[64 x 576], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c1.c.c.sc[64 x 1], rn3_6.c1.c.c.b[64 x 1], rn3_6.c1.c.c.m[64 x 1], rn3_6.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[64 x 576], rn3_6.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c2.c.sc[64 x 1], rn3_6.c2.c.b[64 x 1], rn3_6.c2.c.m[64 x 1], rn3_6.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution(rn3_7.c1.c.W[64 x 576], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization(rn3_7.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c1.c.c.sc[64 x 1], rn3_7.c1.c.c.b[64 x 1], rn3_7.c1.c.c.m[64 x 1], rn3_7.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear(rn3_7.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution(rn3_7.c2.W[64 x 576], rn3_7.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization(rn3_7.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c2.c.sc[64 x 1], rn3_7.c2.c.b[64 x 1], rn3_7.c2.c.m[64 x 1], rn3_7.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus(rn3_7.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear(rn3_7.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution(rn3_8.c1.c.W[64 x 576], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization(rn3_8.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c1.c.c.sc[64 x 1], rn3_8.c1.c.c.b[64 x 1], rn3_8.c1.c.c.m[64 x 1], rn3_8.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear(rn3_8.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution(rn3_8.c2.W[64 x 576], rn3_8.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization(rn3_8.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c2.c.sc[64 x 1], rn3_8.c2.c.b[64 x 1], rn3_8.c2.c.m[64 x 1], rn3_8.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus(rn3_8.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear(rn3_8.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution(rn3_9.c1.c.W[64 x 576], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization(rn3_9.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c1.c.c.sc[64 x 1], rn3_9.c1.c.c.b[64 x 1], rn3_9.c1.c.c.m[64 x 1], rn3_9.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear(rn3_9.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution(rn3_9.c2.W[64 x 576], rn3_9.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization(rn3_9.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c2.c.sc[64 x 1], rn3_9.c2.c.b[64 x 1], rn3_9.c2.c.m[64 x 1], rn3_9.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus(rn3_9.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear(rn3_9.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution(rn3_10.c1.c.W[64 x 576], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization(rn3_10.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c1.c.c.sc[64 x 1], rn3_10.c1.c.c.b[64 x 1], rn3_10.c1.c.c.m[64 x 1], rn3_10.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear(rn3_10.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution(rn3_10.c2.W[64 x 576], rn3_10.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization(rn3_10.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c2.c.sc[64 x 1], rn3_10.c2.c.b[64 x 1], rn3_10.c2.c.m[64 x 1], rn3_10.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus(rn3_10.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear(rn3_10.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution(rn3_11.c1.c.W[64 x 576], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization(rn3_11.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c1.c.c.sc[64 x 1], rn3_11.c1.c.c.b[64 x 1], rn3_11.c1.c.c.m[64 x 1], rn3_11.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear(rn3_11.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution(rn3_11.c2.W[64 x 576], rn3_11.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization(rn3_11.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c2.c.sc[64 x 1], rn3_11.c2.c.b[64 x 1], rn3_11.c2.c.m[64 x 1], rn3_11.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus(rn3_11.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear(rn3_11.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution(rn3_12.c1.c.W[64 x 576], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization(rn3_12.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c1.c.c.sc[64 x 1], rn3_12.c1.c.c.b[64 x 1], rn3_12.c1.c.c.m[64 x 1], rn3_12.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear(rn3_12.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution(rn3_12.c2.W[64 x 576], rn3_12.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization(rn3_12.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c2.c.sc[64 x 1], rn3_12.c2.c.b[64 x 1], rn3_12.c2.c.m[64 x 1], rn3_12.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus(rn3_12.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear(rn3_12.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution(rn3_13.c1.c.W[64 x 576], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization(rn3_13.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c1.c.c.sc[64 x 1], rn3_13.c1.c.c.b[64 x 1], rn3_13.c1.c.c.m[64 x 1], rn3_13.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear(rn3_13.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution(rn3_13.c2.W[64 x 576], rn3_13.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization(rn3_13.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c2.c.sc[64 x 1], rn3_13.c2.c.b[64 x 1], rn3_13.c2.c.m[64 x 1], rn3_13.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus(rn3_13.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear(rn3_13.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution(rn3_14.c1.c.W[64 x 576], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization(rn3_14.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c1.c.c.sc[64 x 1], rn3_14.c1.c.c.b[64 x 1], rn3_14.c1.c.c.m[64 x 1], rn3_14.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear(rn3_14.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution(rn3_14.c2.W[64 x 576], rn3_14.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization(rn3_14.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c2.c.sc[64 x 1], rn3_14.c2.c.b[64 x 1], rn3_14.c2.c.m[64 x 1], rn3_14.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus(rn3_14.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear(rn3_14.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution(rn3_15.c1.c.W[64 x 576], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization(rn3_15.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c1.c.c.sc[64 x 1], rn3_15.c1.c.c.b[64 x 1], rn3_15.c1.c.c.m[64 x 1], rn3_15.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear(rn3_15.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution(rn3_15.c2.W[64 x 576], rn3_15.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization(rn3_15.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c2.c.sc[64 x 1], rn3_15.c2.c.b[64 x 1], rn3_15.c2.c.m[64 x 1], rn3_15.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus(rn3_15.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear(rn3_15.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution(rn3_16.c1.c.W[64 x 576], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization(rn3_16.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c1.c.c.sc[64 x 1], rn3_16.c1.c.c.b[64 x 1], rn3_16.c1.c.c.m[64 x 1], rn3_16.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear(rn3_16.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution(rn3_16.c2.W[64 x 576], rn3_16.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization(rn3_16.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c2.c.sc[64 x 1], rn3_16.c2.c.b[64 x 1], rn3_16.c2.c.m[64 x 1], rn3_16.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus(rn3_16.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear(rn3_16.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution(rn3_17.c1.c.W[64 x 576], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization(rn3_17.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c1.c.c.sc[64 x 1], rn3_17.c1.c.c.b[64 x 1], rn3_17.c1.c.c.m[64 x 1], rn3_17.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear(rn3_17.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution(rn3_17.c2.W[64 x 576], rn3_17.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization(rn3_17.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c2.c.sc[64 x 1], rn3_17.c2.c.b[64 x 1], rn3_17.c2.c.m[64 x 1], rn3_17.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus(rn3_17.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear(rn3_17.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution(rn3_18.c1.c.W[64 x 576], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization(rn3_18.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c1.c.c.sc[64 x 1], rn3_18.c1.c.c.b[64 x 1], rn3_18.c1.c.c.m[64 x 1], rn3_18.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear(rn3_18.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution(rn3_18.c2.W[64 x 576], rn3_18.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization(rn3_18.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c2.c.sc[64 x 1], rn3_18.c2.c.b[64 x 1], rn3_18.c2.c.m[64 x 1], rn3_18.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus(rn3_18.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear(rn3_18.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling(rn3_18.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[10 x 64], pool[1 x 1 x 64 x *]) -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter -> [10]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10 x *], OutputNodes.b[10]) -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[10 x *], OutputNodes.z[10 x *]) -> [1]
Validating --> Err = ErrorPrediction(labels[10 x *], OutputNodes.z[10 x *]) -> [1]

Validating network, final pass.

Validating --> labels = InputValue -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter -> [16 x 27]
Validating --> features = InputValue -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[16 x 27], features[32 x 32 x 3 x * {W=32, H=3, C=32}]) -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.c.c.sc[16 x 1], conv1.c.c.b[16 x 1], conv1.c.c.m[16 x 1], conv1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[16 x 144], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c1.c.c.sc[16 x 1], rn1_1.c1.c.c.b[16 x 1], rn1_1.c1.c.c.m[16 x 1], rn1_1.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[16 x 144], rn1_1.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c2.c.sc[16 x 1], rn1_1.c2.c.b[16 x 1], rn1_1.c2.c.m[16 x 1], rn1_1.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[16 x 144], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c1.c.c.sc[16 x 1], rn1_2.c1.c.c.b[16 x 1], rn1_2.c1.c.c.m[16 x 1], rn1_2.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[16 x 144], rn1_2.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c2.c.sc[16 x 1], rn1_2.c2.c.b[16 x 1], rn1_2.c2.c.m[16 x 1], rn1_2.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[16 x 144], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c1.c.c.sc[16 x 1], rn1_3.c1.c.c.b[16 x 1], rn1_3.c1.c.c.m[16 x 1], rn1_3.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[16 x 144], rn1_3.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c2.c.sc[16 x 1], rn1_3.c2.c.b[16 x 1], rn1_3.c2.c.m[16 x 1], rn1_3.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution(rn1_4.c1.c.W[16 x 144], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization(rn1_4.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c1.c.c.sc[16 x 1], rn1_4.c1.c.c.b[16 x 1], rn1_4.c1.c.c.m[16 x 1], rn1_4.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear(rn1_4.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution(rn1_4.c2.W[16 x 144], rn1_4.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization(rn1_4.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c2.c.sc[16 x 1], rn1_4.c2.c.b[16 x 1], rn1_4.c2.c.m[16 x 1], rn1_4.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus(rn1_4.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear(rn1_4.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution(rn1_5.c1.c.W[16 x 144], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization(rn1_5.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c1.c.c.sc[16 x 1], rn1_5.c1.c.c.b[16 x 1], rn1_5.c1.c.c.m[16 x 1], rn1_5.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear(rn1_5.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution(rn1_5.c2.W[16 x 144], rn1_5.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization(rn1_5.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c2.c.sc[16 x 1], rn1_5.c2.c.b[16 x 1], rn1_5.c2.c.m[16 x 1], rn1_5.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus(rn1_5.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear(rn1_5.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution(rn1_6.c1.c.W[16 x 144], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization(rn1_6.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c1.c.c.sc[16 x 1], rn1_6.c1.c.c.b[16 x 1], rn1_6.c1.c.c.m[16 x 1], rn1_6.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear(rn1_6.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution(rn1_6.c2.W[16 x 144], rn1_6.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization(rn1_6.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c2.c.sc[16 x 1], rn1_6.c2.c.b[16 x 1], rn1_6.c2.c.m[16 x 1], rn1_6.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus(rn1_6.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear(rn1_6.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution(rn1_7.c1.c.W[16 x 144], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization(rn1_7.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c1.c.c.sc[16 x 1], rn1_7.c1.c.c.b[16 x 1], rn1_7.c1.c.c.m[16 x 1], rn1_7.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear(rn1_7.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution(rn1_7.c2.W[16 x 144], rn1_7.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization(rn1_7.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c2.c.sc[16 x 1], rn1_7.c2.c.b[16 x 1], rn1_7.c2.c.m[16 x 1], rn1_7.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus(rn1_7.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear(rn1_7.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution(rn1_8.c1.c.W[16 x 144], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization(rn1_8.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c1.c.c.sc[16 x 1], rn1_8.c1.c.c.b[16 x 1], rn1_8.c1.c.c.m[16 x 1], rn1_8.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear(rn1_8.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution(rn1_8.c2.W[16 x 144], rn1_8.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization(rn1_8.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c2.c.sc[16 x 1], rn1_8.c2.c.b[16 x 1], rn1_8.c2.c.m[16 x 1], rn1_8.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus(rn1_8.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear(rn1_8.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution(rn1_9.c1.c.W[16 x 144], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization(rn1_9.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c1.c.c.sc[16 x 1], rn1_9.c1.c.c.b[16 x 1], rn1_9.c1.c.c.m[16 x 1], rn1_9.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear(rn1_9.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution(rn1_9.c2.W[16 x 144], rn1_9.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization(rn1_9.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c2.c.sc[16 x 1], rn1_9.c2.c.b[16 x 1], rn1_9.c2.c.m[16 x 1], rn1_9.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus(rn1_9.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear(rn1_9.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution(rn1_10.c1.c.W[16 x 144], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization(rn1_10.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c1.c.c.sc[16 x 1], rn1_10.c1.c.c.b[16 x 1], rn1_10.c1.c.c.m[16 x 1], rn1_10.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear(rn1_10.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution(rn1_10.c2.W[16 x 144], rn1_10.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization(rn1_10.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c2.c.sc[16 x 1], rn1_10.c2.c.b[16 x 1], rn1_10.c2.c.m[16 x 1], rn1_10.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus(rn1_10.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear(rn1_10.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution(rn1_11.c1.c.W[16 x 144], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization(rn1_11.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c1.c.c.sc[16 x 1], rn1_11.c1.c.c.b[16 x 1], rn1_11.c1.c.c.m[16 x 1], rn1_11.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear(rn1_11.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution(rn1_11.c2.W[16 x 144], rn1_11.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization(rn1_11.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c2.c.sc[16 x 1], rn1_11.c2.c.b[16 x 1], rn1_11.c2.c.m[16 x 1], rn1_11.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus(rn1_11.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear(rn1_11.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution(rn1_12.c1.c.W[16 x 144], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization(rn1_12.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c1.c.c.sc[16 x 1], rn1_12.c1.c.c.b[16 x 1], rn1_12.c1.c.c.m[16 x 1], rn1_12.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear(rn1_12.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution(rn1_12.c2.W[16 x 144], rn1_12.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization(rn1_12.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c2.c.sc[16 x 1], rn1_12.c2.c.b[16 x 1], rn1_12.c2.c.m[16 x 1], rn1_12.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus(rn1_12.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear(rn1_12.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution(rn1_13.c1.c.W[16 x 144], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization(rn1_13.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c1.c.c.sc[16 x 1], rn1_13.c1.c.c.b[16 x 1], rn1_13.c1.c.c.m[16 x 1], rn1_13.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear(rn1_13.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution(rn1_13.c2.W[16 x 144], rn1_13.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization(rn1_13.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c2.c.sc[16 x 1], rn1_13.c2.c.b[16 x 1], rn1_13.c2.c.m[16 x 1], rn1_13.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus(rn1_13.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear(rn1_13.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution(rn1_14.c1.c.W[16 x 144], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization(rn1_14.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c1.c.c.sc[16 x 1], rn1_14.c1.c.c.b[16 x 1], rn1_14.c1.c.c.m[16 x 1], rn1_14.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear(rn1_14.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution(rn1_14.c2.W[16 x 144], rn1_14.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization(rn1_14.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c2.c.sc[16 x 1], rn1_14.c2.c.b[16 x 1], rn1_14.c2.c.m[16 x 1], rn1_14.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus(rn1_14.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear(rn1_14.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution(rn1_15.c1.c.W[16 x 144], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization(rn1_15.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c1.c.c.sc[16 x 1], rn1_15.c1.c.c.b[16 x 1], rn1_15.c1.c.c.m[16 x 1], rn1_15.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear(rn1_15.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution(rn1_15.c2.W[16 x 144], rn1_15.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization(rn1_15.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c2.c.sc[16 x 1], rn1_15.c2.c.b[16 x 1], rn1_15.c2.c.m[16 x 1], rn1_15.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus(rn1_15.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear(rn1_15.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution(rn1_16.c1.c.W[16 x 144], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization(rn1_16.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c1.c.c.sc[16 x 1], rn1_16.c1.c.c.b[16 x 1], rn1_16.c1.c.c.m[16 x 1], rn1_16.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear(rn1_16.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution(rn1_16.c2.W[16 x 144], rn1_16.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization(rn1_16.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c2.c.sc[16 x 1], rn1_16.c2.c.b[16 x 1], rn1_16.c2.c.m[16 x 1], rn1_16.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus(rn1_16.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear(rn1_16.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution(rn1_17.c1.c.W[16 x 144], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization(rn1_17.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c1.c.c.sc[16 x 1], rn1_17.c1.c.c.b[16 x 1], rn1_17.c1.c.c.m[16 x 1], rn1_17.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear(rn1_17.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution(rn1_17.c2.W[16 x 144], rn1_17.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization(rn1_17.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c2.c.sc[16 x 1], rn1_17.c2.c.b[16 x 1], rn1_17.c2.c.m[16 x 1], rn1_17.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus(rn1_17.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear(rn1_17.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution(rn1_18.c1.c.W[16 x 144], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization(rn1_18.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c1.c.c.sc[16 x 1], rn1_18.c1.c.c.b[16 x 1], rn1_18.c1.c.c.m[16 x 1], rn1_18.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear(rn1_18.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution(rn1_18.c2.W[16 x 144], rn1_18.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization(rn1_18.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c2.c.sc[16 x 1], rn1_18.c2.c.b[16 x 1], rn1_18.c2.c.m[16 x 1], rn1_18.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus(rn1_18.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear(rn1_18.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[32 x 144], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c1.c.c.sc[32 x 1], rn2_1.c1.c.c.b[32 x 1], rn2_1.c1.c.c.m[32 x 1], rn2_1.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[32 x 288], rn2_1.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c2.c.sc[32 x 1], rn2_1.c2.c.b[32 x 1], rn2_1.c2.c.m[32 x 1], rn2_1.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[32 x 16], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.sc[32 x 1], rn2_1.c_proj.b[32 x 1], rn2_1.c_proj.m[32 x 1], rn2_1.c_proj.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[32 x 288], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c1.c.c.sc[32 x 1], rn2_2.c1.c.c.b[32 x 1], rn2_2.c1.c.c.m[32 x 1], rn2_2.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[32 x 288], rn2_2.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c2.c.sc[32 x 1], rn2_2.c2.c.b[32 x 1], rn2_2.c2.c.m[32 x 1], rn2_2.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[32 x 288], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c1.c.c.sc[32 x 1], rn2_3.c1.c.c.b[32 x 1], rn2_3.c1.c.c.m[32 x 1], rn2_3.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[32 x 288], rn2_3.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c2.c.sc[32 x 1], rn2_3.c2.c.b[32 x 1], rn2_3.c2.c.m[32 x 1], rn2_3.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[32 x 288], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c1.c.c.sc[32 x 1], rn2_4.c1.c.c.b[32 x 1], rn2_4.c1.c.c.m[32 x 1], rn2_4.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[32 x 288], rn2_4.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c2.c.sc[32 x 1], rn2_4.c2.c.b[32 x 1], rn2_4.c2.c.m[32 x 1], rn2_4.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution(rn2_5.c1.c.W[32 x 288], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization(rn2_5.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c1.c.c.sc[32 x 1], rn2_5.c1.c.c.b[32 x 1], rn2_5.c1.c.c.m[32 x 1], rn2_5.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear(rn2_5.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution(rn2_5.c2.W[32 x 288], rn2_5.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization(rn2_5.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c2.c.sc[32 x 1], rn2_5.c2.c.b[32 x 1], rn2_5.c2.c.m[32 x 1], rn2_5.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus(rn2_5.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear(rn2_5.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution(rn2_6.c1.c.W[32 x 288], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization(rn2_6.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c1.c.c.sc[32 x 1], rn2_6.c1.c.c.b[32 x 1], rn2_6.c1.c.c.m[32 x 1], rn2_6.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear(rn2_6.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution(rn2_6.c2.W[32 x 288], rn2_6.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization(rn2_6.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c2.c.sc[32 x 1], rn2_6.c2.c.b[32 x 1], rn2_6.c2.c.m[32 x 1], rn2_6.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus(rn2_6.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear(rn2_6.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution(rn2_7.c1.c.W[32 x 288], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization(rn2_7.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c1.c.c.sc[32 x 1], rn2_7.c1.c.c.b[32 x 1], rn2_7.c1.c.c.m[32 x 1], rn2_7.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear(rn2_7.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution(rn2_7.c2.W[32 x 288], rn2_7.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization(rn2_7.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c2.c.sc[32 x 1], rn2_7.c2.c.b[32 x 1], rn2_7.c2.c.m[32 x 1], rn2_7.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus(rn2_7.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear(rn2_7.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution(rn2_8.c1.c.W[32 x 288], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization(rn2_8.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c1.c.c.sc[32 x 1], rn2_8.c1.c.c.b[32 x 1], rn2_8.c1.c.c.m[32 x 1], rn2_8.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear(rn2_8.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution(rn2_8.c2.W[32 x 288], rn2_8.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization(rn2_8.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c2.c.sc[32 x 1], rn2_8.c2.c.b[32 x 1], rn2_8.c2.c.m[32 x 1], rn2_8.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus(rn2_8.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear(rn2_8.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution(rn2_9.c1.c.W[32 x 288], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization(rn2_9.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c1.c.c.sc[32 x 1], rn2_9.c1.c.c.b[32 x 1], rn2_9.c1.c.c.m[32 x 1], rn2_9.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear(rn2_9.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution(rn2_9.c2.W[32 x 288], rn2_9.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization(rn2_9.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c2.c.sc[32 x 1], rn2_9.c2.c.b[32 x 1], rn2_9.c2.c.m[32 x 1], rn2_9.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus(rn2_9.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear(rn2_9.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution(rn2_10.c1.c.W[32 x 288], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization(rn2_10.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c1.c.c.sc[32 x 1], rn2_10.c1.c.c.b[32 x 1], rn2_10.c1.c.c.m[32 x 1], rn2_10.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear(rn2_10.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution(rn2_10.c2.W[32 x 288], rn2_10.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization(rn2_10.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c2.c.sc[32 x 1], rn2_10.c2.c.b[32 x 1], rn2_10.c2.c.m[32 x 1], rn2_10.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus(rn2_10.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear(rn2_10.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution(rn2_11.c1.c.W[32 x 288], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization(rn2_11.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c1.c.c.sc[32 x 1], rn2_11.c1.c.c.b[32 x 1], rn2_11.c1.c.c.m[32 x 1], rn2_11.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear(rn2_11.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution(rn2_11.c2.W[32 x 288], rn2_11.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization(rn2_11.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c2.c.sc[32 x 1], rn2_11.c2.c.b[32 x 1], rn2_11.c2.c.m[32 x 1], rn2_11.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus(rn2_11.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear(rn2_11.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution(rn2_12.c1.c.W[32 x 288], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization(rn2_12.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c1.c.c.sc[32 x 1], rn2_12.c1.c.c.b[32 x 1], rn2_12.c1.c.c.m[32 x 1], rn2_12.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear(rn2_12.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution(rn2_12.c2.W[32 x 288], rn2_12.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization(rn2_12.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c2.c.sc[32 x 1], rn2_12.c2.c.b[32 x 1], rn2_12.c2.c.m[32 x 1], rn2_12.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus(rn2_12.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear(rn2_12.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution(rn2_13.c1.c.W[32 x 288], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization(rn2_13.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c1.c.c.sc[32 x 1], rn2_13.c1.c.c.b[32 x 1], rn2_13.c1.c.c.m[32 x 1], rn2_13.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear(rn2_13.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution(rn2_13.c2.W[32 x 288], rn2_13.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization(rn2_13.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c2.c.sc[32 x 1], rn2_13.c2.c.b[32 x 1], rn2_13.c2.c.m[32 x 1], rn2_13.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus(rn2_13.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear(rn2_13.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution(rn2_14.c1.c.W[32 x 288], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization(rn2_14.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c1.c.c.sc[32 x 1], rn2_14.c1.c.c.b[32 x 1], rn2_14.c1.c.c.m[32 x 1], rn2_14.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear(rn2_14.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution(rn2_14.c2.W[32 x 288], rn2_14.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization(rn2_14.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c2.c.sc[32 x 1], rn2_14.c2.c.b[32 x 1], rn2_14.c2.c.m[32 x 1], rn2_14.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus(rn2_14.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear(rn2_14.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution(rn2_15.c1.c.W[32 x 288], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization(rn2_15.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c1.c.c.sc[32 x 1], rn2_15.c1.c.c.b[32 x 1], rn2_15.c1.c.c.m[32 x 1], rn2_15.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear(rn2_15.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution(rn2_15.c2.W[32 x 288], rn2_15.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization(rn2_15.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c2.c.sc[32 x 1], rn2_15.c2.c.b[32 x 1], rn2_15.c2.c.m[32 x 1], rn2_15.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus(rn2_15.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear(rn2_15.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution(rn2_16.c1.c.W[32 x 288], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization(rn2_16.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c1.c.c.sc[32 x 1], rn2_16.c1.c.c.b[32 x 1], rn2_16.c1.c.c.m[32 x 1], rn2_16.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear(rn2_16.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution(rn2_16.c2.W[32 x 288], rn2_16.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization(rn2_16.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c2.c.sc[32 x 1], rn2_16.c2.c.b[32 x 1], rn2_16.c2.c.m[32 x 1], rn2_16.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus(rn2_16.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear(rn2_16.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution(rn2_17.c1.c.W[32 x 288], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization(rn2_17.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c1.c.c.sc[32 x 1], rn2_17.c1.c.c.b[32 x 1], rn2_17.c1.c.c.m[32 x 1], rn2_17.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear(rn2_17.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution(rn2_17.c2.W[32 x 288], rn2_17.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization(rn2_17.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c2.c.sc[32 x 1], rn2_17.c2.c.b[32 x 1], rn2_17.c2.c.m[32 x 1], rn2_17.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus(rn2_17.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear(rn2_17.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution(rn2_18.c1.c.W[32 x 288], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization(rn2_18.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c1.c.c.sc[32 x 1], rn2_18.c1.c.c.b[32 x 1], rn2_18.c1.c.c.m[32 x 1], rn2_18.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear(rn2_18.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution(rn2_18.c2.W[32 x 288], rn2_18.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization(rn2_18.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c2.c.sc[32 x 1], rn2_18.c2.c.b[32 x 1], rn2_18.c2.c.m[32 x 1], rn2_18.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus(rn2_18.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear(rn2_18.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[64 x 288], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c1.c.c.sc[64 x 1], rn3_1.c1.c.c.b[64 x 1], rn3_1.c1.c.c.m[64 x 1], rn3_1.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[64 x 576], rn3_1.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c2.c.sc[64 x 1], rn3_1.c2.c.b[64 x 1], rn3_1.c2.c.m[64 x 1], rn3_1.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[64 x 32], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.sc[64 x 1], rn3_1.c_proj.b[64 x 1], rn3_1.c_proj.m[64 x 1], rn3_1.c_proj.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[64 x 576], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c1.c.c.sc[64 x 1], rn3_2.c1.c.c.b[64 x 1], rn3_2.c1.c.c.m[64 x 1], rn3_2.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[64 x 576], rn3_2.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c2.c.sc[64 x 1], rn3_2.c2.c.b[64 x 1], rn3_2.c2.c.m[64 x 1], rn3_2.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[64 x 576], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c1.c.c.sc[64 x 1], rn3_3.c1.c.c.b[64 x 1], rn3_3.c1.c.c.m[64 x 1], rn3_3.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[64 x 576], rn3_3.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c2.c.sc[64 x 1], rn3_3.c2.c.b[64 x 1], rn3_3.c2.c.m[64 x 1], rn3_3.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[64 x 576], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c1.c.c.sc[64 x 1], rn3_4.c1.c.c.b[64 x 1], rn3_4.c1.c.c.m[64 x 1], rn3_4.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[64 x 576], rn3_4.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c2.c.sc[64 x 1], rn3_4.c2.c.b[64 x 1], rn3_4.c2.c.m[64 x 1], rn3_4.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[64 x 576], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c1.c.c.sc[64 x 1], rn3_5.c1.c.c.b[64 x 1], rn3_5.c1.c.c.m[64 x 1], rn3_5.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[64 x 576], rn3_5.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c2.c.sc[64 x 1], rn3_5.c2.c.b[64 x 1], rn3_5.c2.c.m[64 x 1], rn3_5.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[64 x 576], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c1.c.c.sc[64 x 1], rn3_6.c1.c.c.b[64 x 1], rn3_6.c1.c.c.m[64 x 1], rn3_6.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[64 x 576], rn3_6.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c2.c.sc[64 x 1], rn3_6.c2.c.b[64 x 1], rn3_6.c2.c.m[64 x 1], rn3_6.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution(rn3_7.c1.c.W[64 x 576], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization(rn3_7.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c1.c.c.sc[64 x 1], rn3_7.c1.c.c.b[64 x 1], rn3_7.c1.c.c.m[64 x 1], rn3_7.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear(rn3_7.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution(rn3_7.c2.W[64 x 576], rn3_7.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization(rn3_7.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c2.c.sc[64 x 1], rn3_7.c2.c.b[64 x 1], rn3_7.c2.c.m[64 x 1], rn3_7.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus(rn3_7.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear(rn3_7.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution(rn3_8.c1.c.W[64 x 576], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization(rn3_8.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c1.c.c.sc[64 x 1], rn3_8.c1.c.c.b[64 x 1], rn3_8.c1.c.c.m[64 x 1], rn3_8.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear(rn3_8.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution(rn3_8.c2.W[64 x 576], rn3_8.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization(rn3_8.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c2.c.sc[64 x 1], rn3_8.c2.c.b[64 x 1], rn3_8.c2.c.m[64 x 1], rn3_8.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus(rn3_8.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear(rn3_8.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution(rn3_9.c1.c.W[64 x 576], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization(rn3_9.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c1.c.c.sc[64 x 1], rn3_9.c1.c.c.b[64 x 1], rn3_9.c1.c.c.m[64 x 1], rn3_9.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear(rn3_9.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution(rn3_9.c2.W[64 x 576], rn3_9.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization(rn3_9.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c2.c.sc[64 x 1], rn3_9.c2.c.b[64 x 1], rn3_9.c2.c.m[64 x 1], rn3_9.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus(rn3_9.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear(rn3_9.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution(rn3_10.c1.c.W[64 x 576], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization(rn3_10.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c1.c.c.sc[64 x 1], rn3_10.c1.c.c.b[64 x 1], rn3_10.c1.c.c.m[64 x 1], rn3_10.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear(rn3_10.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution(rn3_10.c2.W[64 x 576], rn3_10.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization(rn3_10.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c2.c.sc[64 x 1], rn3_10.c2.c.b[64 x 1], rn3_10.c2.c.m[64 x 1], rn3_10.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus(rn3_10.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear(rn3_10.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution(rn3_11.c1.c.W[64 x 576], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization(rn3_11.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c1.c.c.sc[64 x 1], rn3_11.c1.c.c.b[64 x 1], rn3_11.c1.c.c.m[64 x 1], rn3_11.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear(rn3_11.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution(rn3_11.c2.W[64 x 576], rn3_11.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization(rn3_11.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c2.c.sc[64 x 1], rn3_11.c2.c.b[64 x 1], rn3_11.c2.c.m[64 x 1], rn3_11.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus(rn3_11.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear(rn3_11.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution(rn3_12.c1.c.W[64 x 576], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization(rn3_12.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c1.c.c.sc[64 x 1], rn3_12.c1.c.c.b[64 x 1], rn3_12.c1.c.c.m[64 x 1], rn3_12.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear(rn3_12.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution(rn3_12.c2.W[64 x 576], rn3_12.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization(rn3_12.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c2.c.sc[64 x 1], rn3_12.c2.c.b[64 x 1], rn3_12.c2.c.m[64 x 1], rn3_12.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus(rn3_12.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear(rn3_12.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution(rn3_13.c1.c.W[64 x 576], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization(rn3_13.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c1.c.c.sc[64 x 1], rn3_13.c1.c.c.b[64 x 1], rn3_13.c1.c.c.m[64 x 1], rn3_13.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear(rn3_13.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution(rn3_13.c2.W[64 x 576], rn3_13.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization(rn3_13.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c2.c.sc[64 x 1], rn3_13.c2.c.b[64 x 1], rn3_13.c2.c.m[64 x 1], rn3_13.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus(rn3_13.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear(rn3_13.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution(rn3_14.c1.c.W[64 x 576], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization(rn3_14.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c1.c.c.sc[64 x 1], rn3_14.c1.c.c.b[64 x 1], rn3_14.c1.c.c.m[64 x 1], rn3_14.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear(rn3_14.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution(rn3_14.c2.W[64 x 576], rn3_14.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization(rn3_14.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c2.c.sc[64 x 1], rn3_14.c2.c.b[64 x 1], rn3_14.c2.c.m[64 x 1], rn3_14.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus(rn3_14.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear(rn3_14.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution(rn3_15.c1.c.W[64 x 576], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization(rn3_15.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c1.c.c.sc[64 x 1], rn3_15.c1.c.c.b[64 x 1], rn3_15.c1.c.c.m[64 x 1], rn3_15.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear(rn3_15.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution(rn3_15.c2.W[64 x 576], rn3_15.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization(rn3_15.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c2.c.sc[64 x 1], rn3_15.c2.c.b[64 x 1], rn3_15.c2.c.m[64 x 1], rn3_15.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus(rn3_15.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear(rn3_15.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution(rn3_16.c1.c.W[64 x 576], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization(rn3_16.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c1.c.c.sc[64 x 1], rn3_16.c1.c.c.b[64 x 1], rn3_16.c1.c.c.m[64 x 1], rn3_16.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear(rn3_16.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution(rn3_16.c2.W[64 x 576], rn3_16.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization(rn3_16.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c2.c.sc[64 x 1], rn3_16.c2.c.b[64 x 1], rn3_16.c2.c.m[64 x 1], rn3_16.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus(rn3_16.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear(rn3_16.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution(rn3_17.c1.c.W[64 x 576], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization(rn3_17.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c1.c.c.sc[64 x 1], rn3_17.c1.c.c.b[64 x 1], rn3_17.c1.c.c.m[64 x 1], rn3_17.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear(rn3_17.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution(rn3_17.c2.W[64 x 576], rn3_17.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization(rn3_17.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c2.c.sc[64 x 1], rn3_17.c2.c.b[64 x 1], rn3_17.c2.c.m[64 x 1], rn3_17.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus(rn3_17.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear(rn3_17.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution(rn3_18.c1.c.W[64 x 576], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization(rn3_18.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c1.c.c.sc[64 x 1], rn3_18.c1.c.c.b[64 x 1], rn3_18.c1.c.c.m[64 x 1], rn3_18.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear(rn3_18.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution(rn3_18.c2.W[64 x 576], rn3_18.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization(rn3_18.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c2.c.sc[64 x 1], rn3_18.c2.c.b[64 x 1], rn3_18.c2.c.m[64 x 1], rn3_18.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus(rn3_18.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear(rn3_18.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling(rn3_18.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[10 x 64], pool[1 x 1 x 64 x *]) -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter -> [10]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10 x *], OutputNodes.b[10]) -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[10 x *], OutputNodes.z[10 x *]) -> [1]
Validating --> Err = ErrorPrediction(labels[10 x *], OutputNodes.z[10 x *]) -> [1]

559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax
	Err = ErrorPrediction
	OutputNodes.z = Plus
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation


Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter -> [16 x 27]
Validating --> features = InputValue -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[16 x 27], features[32 x 32 x 3 x * {W=32, H=3, C=32}]) -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.c.c.sc[16 x 1], conv1.c.c.b[16 x 1], conv1.c.c.m[16 x 1], conv1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[16 x 144], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c1.c.c.sc[16 x 1], rn1_1.c1.c.c.b[16 x 1], rn1_1.c1.c.c.m[16 x 1], rn1_1.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[16 x 144], rn1_1.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c2.c.sc[16 x 1], rn1_1.c2.c.b[16 x 1], rn1_1.c2.c.m[16 x 1], rn1_1.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[16 x 144], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c1.c.c.sc[16 x 1], rn1_2.c1.c.c.b[16 x 1], rn1_2.c1.c.c.m[16 x 1], rn1_2.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[16 x 144], rn1_2.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c2.c.sc[16 x 1], rn1_2.c2.c.b[16 x 1], rn1_2.c2.c.m[16 x 1], rn1_2.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[16 x 144], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c1.c.c.sc[16 x 1], rn1_3.c1.c.c.b[16 x 1], rn1_3.c1.c.c.m[16 x 1], rn1_3.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[16 x 144], rn1_3.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c2.c.sc[16 x 1], rn1_3.c2.c.b[16 x 1], rn1_3.c2.c.m[16 x 1], rn1_3.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution(rn1_4.c1.c.W[16 x 144], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization(rn1_4.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c1.c.c.sc[16 x 1], rn1_4.c1.c.c.b[16 x 1], rn1_4.c1.c.c.m[16 x 1], rn1_4.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear(rn1_4.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution(rn1_4.c2.W[16 x 144], rn1_4.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization(rn1_4.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c2.c.sc[16 x 1], rn1_4.c2.c.b[16 x 1], rn1_4.c2.c.m[16 x 1], rn1_4.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus(rn1_4.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear(rn1_4.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution(rn1_5.c1.c.W[16 x 144], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization(rn1_5.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c1.c.c.sc[16 x 1], rn1_5.c1.c.c.b[16 x 1], rn1_5.c1.c.c.m[16 x 1], rn1_5.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear(rn1_5.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution(rn1_5.c2.W[16 x 144], rn1_5.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization(rn1_5.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c2.c.sc[16 x 1], rn1_5.c2.c.b[16 x 1], rn1_5.c2.c.m[16 x 1], rn1_5.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus(rn1_5.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear(rn1_5.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution(rn1_6.c1.c.W[16 x 144], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization(rn1_6.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c1.c.c.sc[16 x 1], rn1_6.c1.c.c.b[16 x 1], rn1_6.c1.c.c.m[16 x 1], rn1_6.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear(rn1_6.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution(rn1_6.c2.W[16 x 144], rn1_6.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization(rn1_6.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c2.c.sc[16 x 1], rn1_6.c2.c.b[16 x 1], rn1_6.c2.c.m[16 x 1], rn1_6.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus(rn1_6.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear(rn1_6.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution(rn1_7.c1.c.W[16 x 144], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization(rn1_7.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c1.c.c.sc[16 x 1], rn1_7.c1.c.c.b[16 x 1], rn1_7.c1.c.c.m[16 x 1], rn1_7.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear(rn1_7.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution(rn1_7.c2.W[16 x 144], rn1_7.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization(rn1_7.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c2.c.sc[16 x 1], rn1_7.c2.c.b[16 x 1], rn1_7.c2.c.m[16 x 1], rn1_7.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus(rn1_7.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear(rn1_7.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution(rn1_8.c1.c.W[16 x 144], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization(rn1_8.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c1.c.c.sc[16 x 1], rn1_8.c1.c.c.b[16 x 1], rn1_8.c1.c.c.m[16 x 1], rn1_8.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear(rn1_8.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution(rn1_8.c2.W[16 x 144], rn1_8.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization(rn1_8.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c2.c.sc[16 x 1], rn1_8.c2.c.b[16 x 1], rn1_8.c2.c.m[16 x 1], rn1_8.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus(rn1_8.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear(rn1_8.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution(rn1_9.c1.c.W[16 x 144], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization(rn1_9.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c1.c.c.sc[16 x 1], rn1_9.c1.c.c.b[16 x 1], rn1_9.c1.c.c.m[16 x 1], rn1_9.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear(rn1_9.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution(rn1_9.c2.W[16 x 144], rn1_9.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization(rn1_9.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c2.c.sc[16 x 1], rn1_9.c2.c.b[16 x 1], rn1_9.c2.c.m[16 x 1], rn1_9.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus(rn1_9.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear(rn1_9.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution(rn1_10.c1.c.W[16 x 144], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization(rn1_10.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c1.c.c.sc[16 x 1], rn1_10.c1.c.c.b[16 x 1], rn1_10.c1.c.c.m[16 x 1], rn1_10.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear(rn1_10.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution(rn1_10.c2.W[16 x 144], rn1_10.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization(rn1_10.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c2.c.sc[16 x 1], rn1_10.c2.c.b[16 x 1], rn1_10.c2.c.m[16 x 1], rn1_10.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus(rn1_10.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear(rn1_10.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution(rn1_11.c1.c.W[16 x 144], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization(rn1_11.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c1.c.c.sc[16 x 1], rn1_11.c1.c.c.b[16 x 1], rn1_11.c1.c.c.m[16 x 1], rn1_11.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear(rn1_11.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution(rn1_11.c2.W[16 x 144], rn1_11.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization(rn1_11.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c2.c.sc[16 x 1], rn1_11.c2.c.b[16 x 1], rn1_11.c2.c.m[16 x 1], rn1_11.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus(rn1_11.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear(rn1_11.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution(rn1_12.c1.c.W[16 x 144], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization(rn1_12.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c1.c.c.sc[16 x 1], rn1_12.c1.c.c.b[16 x 1], rn1_12.c1.c.c.m[16 x 1], rn1_12.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear(rn1_12.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution(rn1_12.c2.W[16 x 144], rn1_12.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization(rn1_12.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c2.c.sc[16 x 1], rn1_12.c2.c.b[16 x 1], rn1_12.c2.c.m[16 x 1], rn1_12.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus(rn1_12.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear(rn1_12.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution(rn1_13.c1.c.W[16 x 144], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization(rn1_13.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c1.c.c.sc[16 x 1], rn1_13.c1.c.c.b[16 x 1], rn1_13.c1.c.c.m[16 x 1], rn1_13.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear(rn1_13.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution(rn1_13.c2.W[16 x 144], rn1_13.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization(rn1_13.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c2.c.sc[16 x 1], rn1_13.c2.c.b[16 x 1], rn1_13.c2.c.m[16 x 1], rn1_13.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus(rn1_13.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear(rn1_13.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution(rn1_14.c1.c.W[16 x 144], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization(rn1_14.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c1.c.c.sc[16 x 1], rn1_14.c1.c.c.b[16 x 1], rn1_14.c1.c.c.m[16 x 1], rn1_14.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear(rn1_14.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution(rn1_14.c2.W[16 x 144], rn1_14.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization(rn1_14.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c2.c.sc[16 x 1], rn1_14.c2.c.b[16 x 1], rn1_14.c2.c.m[16 x 1], rn1_14.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus(rn1_14.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear(rn1_14.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution(rn1_15.c1.c.W[16 x 144], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization(rn1_15.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c1.c.c.sc[16 x 1], rn1_15.c1.c.c.b[16 x 1], rn1_15.c1.c.c.m[16 x 1], rn1_15.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear(rn1_15.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution(rn1_15.c2.W[16 x 144], rn1_15.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization(rn1_15.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c2.c.sc[16 x 1], rn1_15.c2.c.b[16 x 1], rn1_15.c2.c.m[16 x 1], rn1_15.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus(rn1_15.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear(rn1_15.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution(rn1_16.c1.c.W[16 x 144], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization(rn1_16.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c1.c.c.sc[16 x 1], rn1_16.c1.c.c.b[16 x 1], rn1_16.c1.c.c.m[16 x 1], rn1_16.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear(rn1_16.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution(rn1_16.c2.W[16 x 144], rn1_16.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization(rn1_16.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c2.c.sc[16 x 1], rn1_16.c2.c.b[16 x 1], rn1_16.c2.c.m[16 x 1], rn1_16.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus(rn1_16.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear(rn1_16.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution(rn1_17.c1.c.W[16 x 144], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization(rn1_17.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c1.c.c.sc[16 x 1], rn1_17.c1.c.c.b[16 x 1], rn1_17.c1.c.c.m[16 x 1], rn1_17.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear(rn1_17.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution(rn1_17.c2.W[16 x 144], rn1_17.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization(rn1_17.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c2.c.sc[16 x 1], rn1_17.c2.c.b[16 x 1], rn1_17.c2.c.m[16 x 1], rn1_17.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus(rn1_17.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear(rn1_17.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution(rn1_18.c1.c.W[16 x 144], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization(rn1_18.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c1.c.c.sc[16 x 1], rn1_18.c1.c.c.b[16 x 1], rn1_18.c1.c.c.m[16 x 1], rn1_18.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear(rn1_18.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution(rn1_18.c2.W[16 x 144], rn1_18.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization(rn1_18.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c2.c.sc[16 x 1], rn1_18.c2.c.b[16 x 1], rn1_18.c2.c.m[16 x 1], rn1_18.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus(rn1_18.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear(rn1_18.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[32 x 144], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c1.c.c.sc[32 x 1], rn2_1.c1.c.c.b[32 x 1], rn2_1.c1.c.c.m[32 x 1], rn2_1.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[32 x 288], rn2_1.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c2.c.sc[32 x 1], rn2_1.c2.c.b[32 x 1], rn2_1.c2.c.m[32 x 1], rn2_1.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[32 x 16], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.sc[32 x 1], rn2_1.c_proj.b[32 x 1], rn2_1.c_proj.m[32 x 1], rn2_1.c_proj.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[32 x 288], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c1.c.c.sc[32 x 1], rn2_2.c1.c.c.b[32 x 1], rn2_2.c1.c.c.m[32 x 1], rn2_2.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[32 x 288], rn2_2.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c2.c.sc[32 x 1], rn2_2.c2.c.b[32 x 1], rn2_2.c2.c.m[32 x 1], rn2_2.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[32 x 288], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c1.c.c.sc[32 x 1], rn2_3.c1.c.c.b[32 x 1], rn2_3.c1.c.c.m[32 x 1], rn2_3.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[32 x 288], rn2_3.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c2.c.sc[32 x 1], rn2_3.c2.c.b[32 x 1], rn2_3.c2.c.m[32 x 1], rn2_3.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[32 x 288], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c1.c.c.sc[32 x 1], rn2_4.c1.c.c.b[32 x 1], rn2_4.c1.c.c.m[32 x 1], rn2_4.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[32 x 288], rn2_4.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c2.c.sc[32 x 1], rn2_4.c2.c.b[32 x 1], rn2_4.c2.c.m[32 x 1], rn2_4.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution(rn2_5.c1.c.W[32 x 288], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization(rn2_5.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c1.c.c.sc[32 x 1], rn2_5.c1.c.c.b[32 x 1], rn2_5.c1.c.c.m[32 x 1], rn2_5.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear(rn2_5.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution(rn2_5.c2.W[32 x 288], rn2_5.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization(rn2_5.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c2.c.sc[32 x 1], rn2_5.c2.c.b[32 x 1], rn2_5.c2.c.m[32 x 1], rn2_5.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus(rn2_5.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear(rn2_5.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution(rn2_6.c1.c.W[32 x 288], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization(rn2_6.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c1.c.c.sc[32 x 1], rn2_6.c1.c.c.b[32 x 1], rn2_6.c1.c.c.m[32 x 1], rn2_6.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear(rn2_6.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution(rn2_6.c2.W[32 x 288], rn2_6.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization(rn2_6.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c2.c.sc[32 x 1], rn2_6.c2.c.b[32 x 1], rn2_6.c2.c.m[32 x 1], rn2_6.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus(rn2_6.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear(rn2_6.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution(rn2_7.c1.c.W[32 x 288], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization(rn2_7.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c1.c.c.sc[32 x 1], rn2_7.c1.c.c.b[32 x 1], rn2_7.c1.c.c.m[32 x 1], rn2_7.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear(rn2_7.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution(rn2_7.c2.W[32 x 288], rn2_7.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization(rn2_7.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c2.c.sc[32 x 1], rn2_7.c2.c.b[32 x 1], rn2_7.c2.c.m[32 x 1], rn2_7.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus(rn2_7.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear(rn2_7.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution(rn2_8.c1.c.W[32 x 288], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization(rn2_8.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c1.c.c.sc[32 x 1], rn2_8.c1.c.c.b[32 x 1], rn2_8.c1.c.c.m[32 x 1], rn2_8.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear(rn2_8.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution(rn2_8.c2.W[32 x 288], rn2_8.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization(rn2_8.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c2.c.sc[32 x 1], rn2_8.c2.c.b[32 x 1], rn2_8.c2.c.m[32 x 1], rn2_8.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus(rn2_8.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear(rn2_8.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution(rn2_9.c1.c.W[32 x 288], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization(rn2_9.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c1.c.c.sc[32 x 1], rn2_9.c1.c.c.b[32 x 1], rn2_9.c1.c.c.m[32 x 1], rn2_9.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear(rn2_9.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution(rn2_9.c2.W[32 x 288], rn2_9.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization(rn2_9.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c2.c.sc[32 x 1], rn2_9.c2.c.b[32 x 1], rn2_9.c2.c.m[32 x 1], rn2_9.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus(rn2_9.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear(rn2_9.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution(rn2_10.c1.c.W[32 x 288], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization(rn2_10.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c1.c.c.sc[32 x 1], rn2_10.c1.c.c.b[32 x 1], rn2_10.c1.c.c.m[32 x 1], rn2_10.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear(rn2_10.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution(rn2_10.c2.W[32 x 288], rn2_10.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization(rn2_10.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c2.c.sc[32 x 1], rn2_10.c2.c.b[32 x 1], rn2_10.c2.c.m[32 x 1], rn2_10.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus(rn2_10.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear(rn2_10.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution(rn2_11.c1.c.W[32 x 288], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization(rn2_11.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c1.c.c.sc[32 x 1], rn2_11.c1.c.c.b[32 x 1], rn2_11.c1.c.c.m[32 x 1], rn2_11.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear(rn2_11.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution(rn2_11.c2.W[32 x 288], rn2_11.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization(rn2_11.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c2.c.sc[32 x 1], rn2_11.c2.c.b[32 x 1], rn2_11.c2.c.m[32 x 1], rn2_11.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus(rn2_11.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear(rn2_11.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution(rn2_12.c1.c.W[32 x 288], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization(rn2_12.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c1.c.c.sc[32 x 1], rn2_12.c1.c.c.b[32 x 1], rn2_12.c1.c.c.m[32 x 1], rn2_12.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear(rn2_12.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution(rn2_12.c2.W[32 x 288], rn2_12.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization(rn2_12.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c2.c.sc[32 x 1], rn2_12.c2.c.b[32 x 1], rn2_12.c2.c.m[32 x 1], rn2_12.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus(rn2_12.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear(rn2_12.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution(rn2_13.c1.c.W[32 x 288], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization(rn2_13.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c1.c.c.sc[32 x 1], rn2_13.c1.c.c.b[32 x 1], rn2_13.c1.c.c.m[32 x 1], rn2_13.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear(rn2_13.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution(rn2_13.c2.W[32 x 288], rn2_13.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization(rn2_13.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c2.c.sc[32 x 1], rn2_13.c2.c.b[32 x 1], rn2_13.c2.c.m[32 x 1], rn2_13.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus(rn2_13.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear(rn2_13.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution(rn2_14.c1.c.W[32 x 288], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization(rn2_14.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c1.c.c.sc[32 x 1], rn2_14.c1.c.c.b[32 x 1], rn2_14.c1.c.c.m[32 x 1], rn2_14.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear(rn2_14.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution(rn2_14.c2.W[32 x 288], rn2_14.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization(rn2_14.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c2.c.sc[32 x 1], rn2_14.c2.c.b[32 x 1], rn2_14.c2.c.m[32 x 1], rn2_14.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus(rn2_14.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear(rn2_14.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution(rn2_15.c1.c.W[32 x 288], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization(rn2_15.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c1.c.c.sc[32 x 1], rn2_15.c1.c.c.b[32 x 1], rn2_15.c1.c.c.m[32 x 1], rn2_15.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear(rn2_15.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution(rn2_15.c2.W[32 x 288], rn2_15.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization(rn2_15.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c2.c.sc[32 x 1], rn2_15.c2.c.b[32 x 1], rn2_15.c2.c.m[32 x 1], rn2_15.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus(rn2_15.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear(rn2_15.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution(rn2_16.c1.c.W[32 x 288], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization(rn2_16.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c1.c.c.sc[32 x 1], rn2_16.c1.c.c.b[32 x 1], rn2_16.c1.c.c.m[32 x 1], rn2_16.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear(rn2_16.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution(rn2_16.c2.W[32 x 288], rn2_16.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization(rn2_16.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c2.c.sc[32 x 1], rn2_16.c2.c.b[32 x 1], rn2_16.c2.c.m[32 x 1], rn2_16.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus(rn2_16.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear(rn2_16.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution(rn2_17.c1.c.W[32 x 288], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization(rn2_17.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c1.c.c.sc[32 x 1], rn2_17.c1.c.c.b[32 x 1], rn2_17.c1.c.c.m[32 x 1], rn2_17.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear(rn2_17.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution(rn2_17.c2.W[32 x 288], rn2_17.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization(rn2_17.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c2.c.sc[32 x 1], rn2_17.c2.c.b[32 x 1], rn2_17.c2.c.m[32 x 1], rn2_17.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus(rn2_17.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear(rn2_17.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution(rn2_18.c1.c.W[32 x 288], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization(rn2_18.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c1.c.c.sc[32 x 1], rn2_18.c1.c.c.b[32 x 1], rn2_18.c1.c.c.m[32 x 1], rn2_18.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear(rn2_18.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution(rn2_18.c2.W[32 x 288], rn2_18.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization(rn2_18.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c2.c.sc[32 x 1], rn2_18.c2.c.b[32 x 1], rn2_18.c2.c.m[32 x 1], rn2_18.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus(rn2_18.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear(rn2_18.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[64 x 288], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c1.c.c.sc[64 x 1], rn3_1.c1.c.c.b[64 x 1], rn3_1.c1.c.c.m[64 x 1], rn3_1.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[64 x 576], rn3_1.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c2.c.sc[64 x 1], rn3_1.c2.c.b[64 x 1], rn3_1.c2.c.m[64 x 1], rn3_1.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[64 x 32], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.sc[64 x 1], rn3_1.c_proj.b[64 x 1], rn3_1.c_proj.m[64 x 1], rn3_1.c_proj.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[64 x 576], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c1.c.c.sc[64 x 1], rn3_2.c1.c.c.b[64 x 1], rn3_2.c1.c.c.m[64 x 1], rn3_2.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[64 x 576], rn3_2.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c2.c.sc[64 x 1], rn3_2.c2.c.b[64 x 1], rn3_2.c2.c.m[64 x 1], rn3_2.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[64 x 576], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c1.c.c.sc[64 x 1], rn3_3.c1.c.c.b[64 x 1], rn3_3.c1.c.c.m[64 x 1], rn3_3.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[64 x 576], rn3_3.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c2.c.sc[64 x 1], rn3_3.c2.c.b[64 x 1], rn3_3.c2.c.m[64 x 1], rn3_3.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[64 x 576], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c1.c.c.sc[64 x 1], rn3_4.c1.c.c.b[64 x 1], rn3_4.c1.c.c.m[64 x 1], rn3_4.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[64 x 576], rn3_4.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c2.c.sc[64 x 1], rn3_4.c2.c.b[64 x 1], rn3_4.c2.c.m[64 x 1], rn3_4.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[64 x 576], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c1.c.c.sc[64 x 1], rn3_5.c1.c.c.b[64 x 1], rn3_5.c1.c.c.m[64 x 1], rn3_5.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[64 x 576], rn3_5.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c2.c.sc[64 x 1], rn3_5.c2.c.b[64 x 1], rn3_5.c2.c.m[64 x 1], rn3_5.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[64 x 576], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c1.c.c.sc[64 x 1], rn3_6.c1.c.c.b[64 x 1], rn3_6.c1.c.c.m[64 x 1], rn3_6.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[64 x 576], rn3_6.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c2.c.sc[64 x 1], rn3_6.c2.c.b[64 x 1], rn3_6.c2.c.m[64 x 1], rn3_6.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution(rn3_7.c1.c.W[64 x 576], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization(rn3_7.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c1.c.c.sc[64 x 1], rn3_7.c1.c.c.b[64 x 1], rn3_7.c1.c.c.m[64 x 1], rn3_7.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear(rn3_7.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution(rn3_7.c2.W[64 x 576], rn3_7.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization(rn3_7.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c2.c.sc[64 x 1], rn3_7.c2.c.b[64 x 1], rn3_7.c2.c.m[64 x 1], rn3_7.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus(rn3_7.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear(rn3_7.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution(rn3_8.c1.c.W[64 x 576], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization(rn3_8.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c1.c.c.sc[64 x 1], rn3_8.c1.c.c.b[64 x 1], rn3_8.c1.c.c.m[64 x 1], rn3_8.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear(rn3_8.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution(rn3_8.c2.W[64 x 576], rn3_8.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization(rn3_8.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c2.c.sc[64 x 1], rn3_8.c2.c.b[64 x 1], rn3_8.c2.c.m[64 x 1], rn3_8.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus(rn3_8.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear(rn3_8.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution(rn3_9.c1.c.W[64 x 576], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization(rn3_9.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c1.c.c.sc[64 x 1], rn3_9.c1.c.c.b[64 x 1], rn3_9.c1.c.c.m[64 x 1], rn3_9.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear(rn3_9.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution(rn3_9.c2.W[64 x 576], rn3_9.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization(rn3_9.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c2.c.sc[64 x 1], rn3_9.c2.c.b[64 x 1], rn3_9.c2.c.m[64 x 1], rn3_9.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus(rn3_9.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear(rn3_9.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution(rn3_10.c1.c.W[64 x 576], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization(rn3_10.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c1.c.c.sc[64 x 1], rn3_10.c1.c.c.b[64 x 1], rn3_10.c1.c.c.m[64 x 1], rn3_10.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear(rn3_10.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution(rn3_10.c2.W[64 x 576], rn3_10.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization(rn3_10.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c2.c.sc[64 x 1], rn3_10.c2.c.b[64 x 1], rn3_10.c2.c.m[64 x 1], rn3_10.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus(rn3_10.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear(rn3_10.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution(rn3_11.c1.c.W[64 x 576], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization(rn3_11.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c1.c.c.sc[64 x 1], rn3_11.c1.c.c.b[64 x 1], rn3_11.c1.c.c.m[64 x 1], rn3_11.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear(rn3_11.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution(rn3_11.c2.W[64 x 576], rn3_11.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization(rn3_11.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c2.c.sc[64 x 1], rn3_11.c2.c.b[64 x 1], rn3_11.c2.c.m[64 x 1], rn3_11.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus(rn3_11.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear(rn3_11.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution(rn3_12.c1.c.W[64 x 576], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization(rn3_12.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c1.c.c.sc[64 x 1], rn3_12.c1.c.c.b[64 x 1], rn3_12.c1.c.c.m[64 x 1], rn3_12.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear(rn3_12.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution(rn3_12.c2.W[64 x 576], rn3_12.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization(rn3_12.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c2.c.sc[64 x 1], rn3_12.c2.c.b[64 x 1], rn3_12.c2.c.m[64 x 1], rn3_12.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus(rn3_12.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear(rn3_12.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution(rn3_13.c1.c.W[64 x 576], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization(rn3_13.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c1.c.c.sc[64 x 1], rn3_13.c1.c.c.b[64 x 1], rn3_13.c1.c.c.m[64 x 1], rn3_13.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear(rn3_13.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution(rn3_13.c2.W[64 x 576], rn3_13.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization(rn3_13.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c2.c.sc[64 x 1], rn3_13.c2.c.b[64 x 1], rn3_13.c2.c.m[64 x 1], rn3_13.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus(rn3_13.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear(rn3_13.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution(rn3_14.c1.c.W[64 x 576], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization(rn3_14.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c1.c.c.sc[64 x 1], rn3_14.c1.c.c.b[64 x 1], rn3_14.c1.c.c.m[64 x 1], rn3_14.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear(rn3_14.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution(rn3_14.c2.W[64 x 576], rn3_14.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization(rn3_14.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c2.c.sc[64 x 1], rn3_14.c2.c.b[64 x 1], rn3_14.c2.c.m[64 x 1], rn3_14.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus(rn3_14.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear(rn3_14.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution(rn3_15.c1.c.W[64 x 576], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization(rn3_15.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c1.c.c.sc[64 x 1], rn3_15.c1.c.c.b[64 x 1], rn3_15.c1.c.c.m[64 x 1], rn3_15.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear(rn3_15.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution(rn3_15.c2.W[64 x 576], rn3_15.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization(rn3_15.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c2.c.sc[64 x 1], rn3_15.c2.c.b[64 x 1], rn3_15.c2.c.m[64 x 1], rn3_15.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus(rn3_15.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear(rn3_15.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution(rn3_16.c1.c.W[64 x 576], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization(rn3_16.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c1.c.c.sc[64 x 1], rn3_16.c1.c.c.b[64 x 1], rn3_16.c1.c.c.m[64 x 1], rn3_16.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear(rn3_16.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution(rn3_16.c2.W[64 x 576], rn3_16.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization(rn3_16.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c2.c.sc[64 x 1], rn3_16.c2.c.b[64 x 1], rn3_16.c2.c.m[64 x 1], rn3_16.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus(rn3_16.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear(rn3_16.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution(rn3_17.c1.c.W[64 x 576], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization(rn3_17.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c1.c.c.sc[64 x 1], rn3_17.c1.c.c.b[64 x 1], rn3_17.c1.c.c.m[64 x 1], rn3_17.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear(rn3_17.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution(rn3_17.c2.W[64 x 576], rn3_17.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization(rn3_17.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c2.c.sc[64 x 1], rn3_17.c2.c.b[64 x 1], rn3_17.c2.c.m[64 x 1], rn3_17.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus(rn3_17.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear(rn3_17.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution(rn3_18.c1.c.W[64 x 576], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization(rn3_18.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c1.c.c.sc[64 x 1], rn3_18.c1.c.c.b[64 x 1], rn3_18.c1.c.c.m[64 x 1], rn3_18.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear(rn3_18.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution(rn3_18.c2.W[64 x 576], rn3_18.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization(rn3_18.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c2.c.sc[64 x 1], rn3_18.c2.c.b[64 x 1], rn3_18.c2.c.m[64 x 1], rn3_18.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus(rn3_18.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear(rn3_18.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling(rn3_18.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[10 x 64], pool[1 x 1 x 64 x *]) -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter -> [10]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10 x *], OutputNodes.b[10]) -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[10 x *], OutputNodes.z[10 x *]) -> [1]
Validating --> Err = ErrorPrediction(labels[10 x *], OutputNodes.z[10 x *]) -> [1]

Validating network. 390 nodes to process in pass 2.

Validating --> labels = InputValue -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter -> [16 x 27]
Validating --> features = InputValue -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[16 x 27], features[32 x 32 x 3 x * {W=32, H=3, C=32}]) -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.c.c.sc[16 x 1], conv1.c.c.b[16 x 1], conv1.c.c.m[16 x 1], conv1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[16 x 144], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c1.c.c.sc[16 x 1], rn1_1.c1.c.c.b[16 x 1], rn1_1.c1.c.c.m[16 x 1], rn1_1.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[16 x 144], rn1_1.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c2.c.sc[16 x 1], rn1_1.c2.c.b[16 x 1], rn1_1.c2.c.m[16 x 1], rn1_1.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[16 x 144], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c1.c.c.sc[16 x 1], rn1_2.c1.c.c.b[16 x 1], rn1_2.c1.c.c.m[16 x 1], rn1_2.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[16 x 144], rn1_2.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c2.c.sc[16 x 1], rn1_2.c2.c.b[16 x 1], rn1_2.c2.c.m[16 x 1], rn1_2.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[16 x 144], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c1.c.c.sc[16 x 1], rn1_3.c1.c.c.b[16 x 1], rn1_3.c1.c.c.m[16 x 1], rn1_3.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[16 x 144], rn1_3.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c2.c.sc[16 x 1], rn1_3.c2.c.b[16 x 1], rn1_3.c2.c.m[16 x 1], rn1_3.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution(rn1_4.c1.c.W[16 x 144], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization(rn1_4.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c1.c.c.sc[16 x 1], rn1_4.c1.c.c.b[16 x 1], rn1_4.c1.c.c.m[16 x 1], rn1_4.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear(rn1_4.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution(rn1_4.c2.W[16 x 144], rn1_4.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization(rn1_4.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c2.c.sc[16 x 1], rn1_4.c2.c.b[16 x 1], rn1_4.c2.c.m[16 x 1], rn1_4.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus(rn1_4.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear(rn1_4.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution(rn1_5.c1.c.W[16 x 144], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization(rn1_5.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c1.c.c.sc[16 x 1], rn1_5.c1.c.c.b[16 x 1], rn1_5.c1.c.c.m[16 x 1], rn1_5.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear(rn1_5.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution(rn1_5.c2.W[16 x 144], rn1_5.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization(rn1_5.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c2.c.sc[16 x 1], rn1_5.c2.c.b[16 x 1], rn1_5.c2.c.m[16 x 1], rn1_5.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus(rn1_5.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear(rn1_5.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution(rn1_6.c1.c.W[16 x 144], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization(rn1_6.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c1.c.c.sc[16 x 1], rn1_6.c1.c.c.b[16 x 1], rn1_6.c1.c.c.m[16 x 1], rn1_6.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear(rn1_6.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution(rn1_6.c2.W[16 x 144], rn1_6.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization(rn1_6.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c2.c.sc[16 x 1], rn1_6.c2.c.b[16 x 1], rn1_6.c2.c.m[16 x 1], rn1_6.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus(rn1_6.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear(rn1_6.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution(rn1_7.c1.c.W[16 x 144], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization(rn1_7.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c1.c.c.sc[16 x 1], rn1_7.c1.c.c.b[16 x 1], rn1_7.c1.c.c.m[16 x 1], rn1_7.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear(rn1_7.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution(rn1_7.c2.W[16 x 144], rn1_7.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization(rn1_7.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c2.c.sc[16 x 1], rn1_7.c2.c.b[16 x 1], rn1_7.c2.c.m[16 x 1], rn1_7.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus(rn1_7.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear(rn1_7.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution(rn1_8.c1.c.W[16 x 144], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization(rn1_8.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c1.c.c.sc[16 x 1], rn1_8.c1.c.c.b[16 x 1], rn1_8.c1.c.c.m[16 x 1], rn1_8.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear(rn1_8.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution(rn1_8.c2.W[16 x 144], rn1_8.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization(rn1_8.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c2.c.sc[16 x 1], rn1_8.c2.c.b[16 x 1], rn1_8.c2.c.m[16 x 1], rn1_8.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus(rn1_8.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear(rn1_8.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution(rn1_9.c1.c.W[16 x 144], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization(rn1_9.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c1.c.c.sc[16 x 1], rn1_9.c1.c.c.b[16 x 1], rn1_9.c1.c.c.m[16 x 1], rn1_9.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear(rn1_9.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution(rn1_9.c2.W[16 x 144], rn1_9.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization(rn1_9.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c2.c.sc[16 x 1], rn1_9.c2.c.b[16 x 1], rn1_9.c2.c.m[16 x 1], rn1_9.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus(rn1_9.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear(rn1_9.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution(rn1_10.c1.c.W[16 x 144], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization(rn1_10.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c1.c.c.sc[16 x 1], rn1_10.c1.c.c.b[16 x 1], rn1_10.c1.c.c.m[16 x 1], rn1_10.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear(rn1_10.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution(rn1_10.c2.W[16 x 144], rn1_10.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization(rn1_10.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c2.c.sc[16 x 1], rn1_10.c2.c.b[16 x 1], rn1_10.c2.c.m[16 x 1], rn1_10.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus(rn1_10.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear(rn1_10.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution(rn1_11.c1.c.W[16 x 144], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization(rn1_11.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c1.c.c.sc[16 x 1], rn1_11.c1.c.c.b[16 x 1], rn1_11.c1.c.c.m[16 x 1], rn1_11.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear(rn1_11.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution(rn1_11.c2.W[16 x 144], rn1_11.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization(rn1_11.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c2.c.sc[16 x 1], rn1_11.c2.c.b[16 x 1], rn1_11.c2.c.m[16 x 1], rn1_11.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus(rn1_11.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear(rn1_11.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution(rn1_12.c1.c.W[16 x 144], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization(rn1_12.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c1.c.c.sc[16 x 1], rn1_12.c1.c.c.b[16 x 1], rn1_12.c1.c.c.m[16 x 1], rn1_12.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear(rn1_12.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution(rn1_12.c2.W[16 x 144], rn1_12.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization(rn1_12.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c2.c.sc[16 x 1], rn1_12.c2.c.b[16 x 1], rn1_12.c2.c.m[16 x 1], rn1_12.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus(rn1_12.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear(rn1_12.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution(rn1_13.c1.c.W[16 x 144], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization(rn1_13.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c1.c.c.sc[16 x 1], rn1_13.c1.c.c.b[16 x 1], rn1_13.c1.c.c.m[16 x 1], rn1_13.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear(rn1_13.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution(rn1_13.c2.W[16 x 144], rn1_13.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization(rn1_13.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c2.c.sc[16 x 1], rn1_13.c2.c.b[16 x 1], rn1_13.c2.c.m[16 x 1], rn1_13.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus(rn1_13.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear(rn1_13.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution(rn1_14.c1.c.W[16 x 144], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization(rn1_14.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c1.c.c.sc[16 x 1], rn1_14.c1.c.c.b[16 x 1], rn1_14.c1.c.c.m[16 x 1], rn1_14.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear(rn1_14.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution(rn1_14.c2.W[16 x 144], rn1_14.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization(rn1_14.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c2.c.sc[16 x 1], rn1_14.c2.c.b[16 x 1], rn1_14.c2.c.m[16 x 1], rn1_14.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus(rn1_14.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear(rn1_14.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution(rn1_15.c1.c.W[16 x 144], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization(rn1_15.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c1.c.c.sc[16 x 1], rn1_15.c1.c.c.b[16 x 1], rn1_15.c1.c.c.m[16 x 1], rn1_15.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear(rn1_15.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution(rn1_15.c2.W[16 x 144], rn1_15.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization(rn1_15.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c2.c.sc[16 x 1], rn1_15.c2.c.b[16 x 1], rn1_15.c2.c.m[16 x 1], rn1_15.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus(rn1_15.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear(rn1_15.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution(rn1_16.c1.c.W[16 x 144], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization(rn1_16.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c1.c.c.sc[16 x 1], rn1_16.c1.c.c.b[16 x 1], rn1_16.c1.c.c.m[16 x 1], rn1_16.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear(rn1_16.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution(rn1_16.c2.W[16 x 144], rn1_16.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization(rn1_16.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c2.c.sc[16 x 1], rn1_16.c2.c.b[16 x 1], rn1_16.c2.c.m[16 x 1], rn1_16.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus(rn1_16.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear(rn1_16.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution(rn1_17.c1.c.W[16 x 144], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization(rn1_17.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c1.c.c.sc[16 x 1], rn1_17.c1.c.c.b[16 x 1], rn1_17.c1.c.c.m[16 x 1], rn1_17.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear(rn1_17.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution(rn1_17.c2.W[16 x 144], rn1_17.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization(rn1_17.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c2.c.sc[16 x 1], rn1_17.c2.c.b[16 x 1], rn1_17.c2.c.m[16 x 1], rn1_17.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus(rn1_17.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear(rn1_17.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution(rn1_18.c1.c.W[16 x 144], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization(rn1_18.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c1.c.c.sc[16 x 1], rn1_18.c1.c.c.b[16 x 1], rn1_18.c1.c.c.m[16 x 1], rn1_18.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear(rn1_18.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution(rn1_18.c2.W[16 x 144], rn1_18.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization(rn1_18.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c2.c.sc[16 x 1], rn1_18.c2.c.b[16 x 1], rn1_18.c2.c.m[16 x 1], rn1_18.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus(rn1_18.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear(rn1_18.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[32 x 144], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c1.c.c.sc[32 x 1], rn2_1.c1.c.c.b[32 x 1], rn2_1.c1.c.c.m[32 x 1], rn2_1.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[32 x 288], rn2_1.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c2.c.sc[32 x 1], rn2_1.c2.c.b[32 x 1], rn2_1.c2.c.m[32 x 1], rn2_1.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[32 x 16], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.sc[32 x 1], rn2_1.c_proj.b[32 x 1], rn2_1.c_proj.m[32 x 1], rn2_1.c_proj.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[32 x 288], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c1.c.c.sc[32 x 1], rn2_2.c1.c.c.b[32 x 1], rn2_2.c1.c.c.m[32 x 1], rn2_2.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[32 x 288], rn2_2.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c2.c.sc[32 x 1], rn2_2.c2.c.b[32 x 1], rn2_2.c2.c.m[32 x 1], rn2_2.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[32 x 288], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c1.c.c.sc[32 x 1], rn2_3.c1.c.c.b[32 x 1], rn2_3.c1.c.c.m[32 x 1], rn2_3.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[32 x 288], rn2_3.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c2.c.sc[32 x 1], rn2_3.c2.c.b[32 x 1], rn2_3.c2.c.m[32 x 1], rn2_3.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[32 x 288], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c1.c.c.sc[32 x 1], rn2_4.c1.c.c.b[32 x 1], rn2_4.c1.c.c.m[32 x 1], rn2_4.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[32 x 288], rn2_4.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c2.c.sc[32 x 1], rn2_4.c2.c.b[32 x 1], rn2_4.c2.c.m[32 x 1], rn2_4.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution(rn2_5.c1.c.W[32 x 288], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization(rn2_5.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c1.c.c.sc[32 x 1], rn2_5.c1.c.c.b[32 x 1], rn2_5.c1.c.c.m[32 x 1], rn2_5.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear(rn2_5.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution(rn2_5.c2.W[32 x 288], rn2_5.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization(rn2_5.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c2.c.sc[32 x 1], rn2_5.c2.c.b[32 x 1], rn2_5.c2.c.m[32 x 1], rn2_5.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus(rn2_5.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear(rn2_5.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution(rn2_6.c1.c.W[32 x 288], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization(rn2_6.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c1.c.c.sc[32 x 1], rn2_6.c1.c.c.b[32 x 1], rn2_6.c1.c.c.m[32 x 1], rn2_6.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear(rn2_6.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution(rn2_6.c2.W[32 x 288], rn2_6.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization(rn2_6.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c2.c.sc[32 x 1], rn2_6.c2.c.b[32 x 1], rn2_6.c2.c.m[32 x 1], rn2_6.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus(rn2_6.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear(rn2_6.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution(rn2_7.c1.c.W[32 x 288], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization(rn2_7.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c1.c.c.sc[32 x 1], rn2_7.c1.c.c.b[32 x 1], rn2_7.c1.c.c.m[32 x 1], rn2_7.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear(rn2_7.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution(rn2_7.c2.W[32 x 288], rn2_7.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization(rn2_7.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c2.c.sc[32 x 1], rn2_7.c2.c.b[32 x 1], rn2_7.c2.c.m[32 x 1], rn2_7.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus(rn2_7.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear(rn2_7.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution(rn2_8.c1.c.W[32 x 288], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization(rn2_8.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c1.c.c.sc[32 x 1], rn2_8.c1.c.c.b[32 x 1], rn2_8.c1.c.c.m[32 x 1], rn2_8.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear(rn2_8.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution(rn2_8.c2.W[32 x 288], rn2_8.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization(rn2_8.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c2.c.sc[32 x 1], rn2_8.c2.c.b[32 x 1], rn2_8.c2.c.m[32 x 1], rn2_8.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus(rn2_8.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear(rn2_8.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution(rn2_9.c1.c.W[32 x 288], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization(rn2_9.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c1.c.c.sc[32 x 1], rn2_9.c1.c.c.b[32 x 1], rn2_9.c1.c.c.m[32 x 1], rn2_9.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear(rn2_9.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution(rn2_9.c2.W[32 x 288], rn2_9.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization(rn2_9.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c2.c.sc[32 x 1], rn2_9.c2.c.b[32 x 1], rn2_9.c2.c.m[32 x 1], rn2_9.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus(rn2_9.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear(rn2_9.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution(rn2_10.c1.c.W[32 x 288], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization(rn2_10.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c1.c.c.sc[32 x 1], rn2_10.c1.c.c.b[32 x 1], rn2_10.c1.c.c.m[32 x 1], rn2_10.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear(rn2_10.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution(rn2_10.c2.W[32 x 288], rn2_10.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization(rn2_10.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c2.c.sc[32 x 1], rn2_10.c2.c.b[32 x 1], rn2_10.c2.c.m[32 x 1], rn2_10.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus(rn2_10.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear(rn2_10.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution(rn2_11.c1.c.W[32 x 288], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization(rn2_11.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c1.c.c.sc[32 x 1], rn2_11.c1.c.c.b[32 x 1], rn2_11.c1.c.c.m[32 x 1], rn2_11.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear(rn2_11.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution(rn2_11.c2.W[32 x 288], rn2_11.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization(rn2_11.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c2.c.sc[32 x 1], rn2_11.c2.c.b[32 x 1], rn2_11.c2.c.m[32 x 1], rn2_11.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus(rn2_11.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear(rn2_11.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution(rn2_12.c1.c.W[32 x 288], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization(rn2_12.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c1.c.c.sc[32 x 1], rn2_12.c1.c.c.b[32 x 1], rn2_12.c1.c.c.m[32 x 1], rn2_12.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear(rn2_12.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution(rn2_12.c2.W[32 x 288], rn2_12.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization(rn2_12.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c2.c.sc[32 x 1], rn2_12.c2.c.b[32 x 1], rn2_12.c2.c.m[32 x 1], rn2_12.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus(rn2_12.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear(rn2_12.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution(rn2_13.c1.c.W[32 x 288], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization(rn2_13.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c1.c.c.sc[32 x 1], rn2_13.c1.c.c.b[32 x 1], rn2_13.c1.c.c.m[32 x 1], rn2_13.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear(rn2_13.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution(rn2_13.c2.W[32 x 288], rn2_13.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization(rn2_13.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c2.c.sc[32 x 1], rn2_13.c2.c.b[32 x 1], rn2_13.c2.c.m[32 x 1], rn2_13.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus(rn2_13.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear(rn2_13.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution(rn2_14.c1.c.W[32 x 288], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization(rn2_14.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c1.c.c.sc[32 x 1], rn2_14.c1.c.c.b[32 x 1], rn2_14.c1.c.c.m[32 x 1], rn2_14.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear(rn2_14.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution(rn2_14.c2.W[32 x 288], rn2_14.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization(rn2_14.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c2.c.sc[32 x 1], rn2_14.c2.c.b[32 x 1], rn2_14.c2.c.m[32 x 1], rn2_14.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus(rn2_14.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear(rn2_14.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution(rn2_15.c1.c.W[32 x 288], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization(rn2_15.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c1.c.c.sc[32 x 1], rn2_15.c1.c.c.b[32 x 1], rn2_15.c1.c.c.m[32 x 1], rn2_15.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear(rn2_15.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution(rn2_15.c2.W[32 x 288], rn2_15.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization(rn2_15.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c2.c.sc[32 x 1], rn2_15.c2.c.b[32 x 1], rn2_15.c2.c.m[32 x 1], rn2_15.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus(rn2_15.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear(rn2_15.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution(rn2_16.c1.c.W[32 x 288], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization(rn2_16.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c1.c.c.sc[32 x 1], rn2_16.c1.c.c.b[32 x 1], rn2_16.c1.c.c.m[32 x 1], rn2_16.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear(rn2_16.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution(rn2_16.c2.W[32 x 288], rn2_16.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization(rn2_16.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c2.c.sc[32 x 1], rn2_16.c2.c.b[32 x 1], rn2_16.c2.c.m[32 x 1], rn2_16.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus(rn2_16.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear(rn2_16.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution(rn2_17.c1.c.W[32 x 288], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization(rn2_17.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c1.c.c.sc[32 x 1], rn2_17.c1.c.c.b[32 x 1], rn2_17.c1.c.c.m[32 x 1], rn2_17.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear(rn2_17.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution(rn2_17.c2.W[32 x 288], rn2_17.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization(rn2_17.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c2.c.sc[32 x 1], rn2_17.c2.c.b[32 x 1], rn2_17.c2.c.m[32 x 1], rn2_17.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus(rn2_17.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear(rn2_17.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution(rn2_18.c1.c.W[32 x 288], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization(rn2_18.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c1.c.c.sc[32 x 1], rn2_18.c1.c.c.b[32 x 1], rn2_18.c1.c.c.m[32 x 1], rn2_18.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear(rn2_18.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution(rn2_18.c2.W[32 x 288], rn2_18.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization(rn2_18.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c2.c.sc[32 x 1], rn2_18.c2.c.b[32 x 1], rn2_18.c2.c.m[32 x 1], rn2_18.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus(rn2_18.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear(rn2_18.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[64 x 288], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c1.c.c.sc[64 x 1], rn3_1.c1.c.c.b[64 x 1], rn3_1.c1.c.c.m[64 x 1], rn3_1.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[64 x 576], rn3_1.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c2.c.sc[64 x 1], rn3_1.c2.c.b[64 x 1], rn3_1.c2.c.m[64 x 1], rn3_1.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[64 x 32], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.sc[64 x 1], rn3_1.c_proj.b[64 x 1], rn3_1.c_proj.m[64 x 1], rn3_1.c_proj.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[64 x 576], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c1.c.c.sc[64 x 1], rn3_2.c1.c.c.b[64 x 1], rn3_2.c1.c.c.m[64 x 1], rn3_2.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[64 x 576], rn3_2.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c2.c.sc[64 x 1], rn3_2.c2.c.b[64 x 1], rn3_2.c2.c.m[64 x 1], rn3_2.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[64 x 576], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c1.c.c.sc[64 x 1], rn3_3.c1.c.c.b[64 x 1], rn3_3.c1.c.c.m[64 x 1], rn3_3.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[64 x 576], rn3_3.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c2.c.sc[64 x 1], rn3_3.c2.c.b[64 x 1], rn3_3.c2.c.m[64 x 1], rn3_3.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[64 x 576], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c1.c.c.sc[64 x 1], rn3_4.c1.c.c.b[64 x 1], rn3_4.c1.c.c.m[64 x 1], rn3_4.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[64 x 576], rn3_4.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c2.c.sc[64 x 1], rn3_4.c2.c.b[64 x 1], rn3_4.c2.c.m[64 x 1], rn3_4.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[64 x 576], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c1.c.c.sc[64 x 1], rn3_5.c1.c.c.b[64 x 1], rn3_5.c1.c.c.m[64 x 1], rn3_5.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[64 x 576], rn3_5.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c2.c.sc[64 x 1], rn3_5.c2.c.b[64 x 1], rn3_5.c2.c.m[64 x 1], rn3_5.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[64 x 576], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c1.c.c.sc[64 x 1], rn3_6.c1.c.c.b[64 x 1], rn3_6.c1.c.c.m[64 x 1], rn3_6.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[64 x 576], rn3_6.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c2.c.sc[64 x 1], rn3_6.c2.c.b[64 x 1], rn3_6.c2.c.m[64 x 1], rn3_6.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution(rn3_7.c1.c.W[64 x 576], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization(rn3_7.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c1.c.c.sc[64 x 1], rn3_7.c1.c.c.b[64 x 1], rn3_7.c1.c.c.m[64 x 1], rn3_7.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear(rn3_7.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution(rn3_7.c2.W[64 x 576], rn3_7.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization(rn3_7.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c2.c.sc[64 x 1], rn3_7.c2.c.b[64 x 1], rn3_7.c2.c.m[64 x 1], rn3_7.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus(rn3_7.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear(rn3_7.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution(rn3_8.c1.c.W[64 x 576], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization(rn3_8.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c1.c.c.sc[64 x 1], rn3_8.c1.c.c.b[64 x 1], rn3_8.c1.c.c.m[64 x 1], rn3_8.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear(rn3_8.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution(rn3_8.c2.W[64 x 576], rn3_8.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization(rn3_8.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c2.c.sc[64 x 1], rn3_8.c2.c.b[64 x 1], rn3_8.c2.c.m[64 x 1], rn3_8.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus(rn3_8.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear(rn3_8.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution(rn3_9.c1.c.W[64 x 576], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization(rn3_9.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c1.c.c.sc[64 x 1], rn3_9.c1.c.c.b[64 x 1], rn3_9.c1.c.c.m[64 x 1], rn3_9.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear(rn3_9.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution(rn3_9.c2.W[64 x 576], rn3_9.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization(rn3_9.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c2.c.sc[64 x 1], rn3_9.c2.c.b[64 x 1], rn3_9.c2.c.m[64 x 1], rn3_9.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus(rn3_9.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear(rn3_9.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution(rn3_10.c1.c.W[64 x 576], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization(rn3_10.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c1.c.c.sc[64 x 1], rn3_10.c1.c.c.b[64 x 1], rn3_10.c1.c.c.m[64 x 1], rn3_10.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear(rn3_10.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution(rn3_10.c2.W[64 x 576], rn3_10.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization(rn3_10.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c2.c.sc[64 x 1], rn3_10.c2.c.b[64 x 1], rn3_10.c2.c.m[64 x 1], rn3_10.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus(rn3_10.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear(rn3_10.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution(rn3_11.c1.c.W[64 x 576], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization(rn3_11.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c1.c.c.sc[64 x 1], rn3_11.c1.c.c.b[64 x 1], rn3_11.c1.c.c.m[64 x 1], rn3_11.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear(rn3_11.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution(rn3_11.c2.W[64 x 576], rn3_11.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization(rn3_11.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c2.c.sc[64 x 1], rn3_11.c2.c.b[64 x 1], rn3_11.c2.c.m[64 x 1], rn3_11.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus(rn3_11.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear(rn3_11.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution(rn3_12.c1.c.W[64 x 576], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization(rn3_12.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c1.c.c.sc[64 x 1], rn3_12.c1.c.c.b[64 x 1], rn3_12.c1.c.c.m[64 x 1], rn3_12.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear(rn3_12.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution(rn3_12.c2.W[64 x 576], rn3_12.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization(rn3_12.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c2.c.sc[64 x 1], rn3_12.c2.c.b[64 x 1], rn3_12.c2.c.m[64 x 1], rn3_12.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus(rn3_12.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear(rn3_12.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution(rn3_13.c1.c.W[64 x 576], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization(rn3_13.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c1.c.c.sc[64 x 1], rn3_13.c1.c.c.b[64 x 1], rn3_13.c1.c.c.m[64 x 1], rn3_13.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear(rn3_13.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution(rn3_13.c2.W[64 x 576], rn3_13.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization(rn3_13.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c2.c.sc[64 x 1], rn3_13.c2.c.b[64 x 1], rn3_13.c2.c.m[64 x 1], rn3_13.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus(rn3_13.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear(rn3_13.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution(rn3_14.c1.c.W[64 x 576], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization(rn3_14.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c1.c.c.sc[64 x 1], rn3_14.c1.c.c.b[64 x 1], rn3_14.c1.c.c.m[64 x 1], rn3_14.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear(rn3_14.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution(rn3_14.c2.W[64 x 576], rn3_14.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization(rn3_14.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c2.c.sc[64 x 1], rn3_14.c2.c.b[64 x 1], rn3_14.c2.c.m[64 x 1], rn3_14.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus(rn3_14.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear(rn3_14.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution(rn3_15.c1.c.W[64 x 576], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization(rn3_15.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c1.c.c.sc[64 x 1], rn3_15.c1.c.c.b[64 x 1], rn3_15.c1.c.c.m[64 x 1], rn3_15.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear(rn3_15.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution(rn3_15.c2.W[64 x 576], rn3_15.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization(rn3_15.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c2.c.sc[64 x 1], rn3_15.c2.c.b[64 x 1], rn3_15.c2.c.m[64 x 1], rn3_15.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus(rn3_15.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear(rn3_15.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution(rn3_16.c1.c.W[64 x 576], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization(rn3_16.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c1.c.c.sc[64 x 1], rn3_16.c1.c.c.b[64 x 1], rn3_16.c1.c.c.m[64 x 1], rn3_16.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear(rn3_16.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution(rn3_16.c2.W[64 x 576], rn3_16.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization(rn3_16.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c2.c.sc[64 x 1], rn3_16.c2.c.b[64 x 1], rn3_16.c2.c.m[64 x 1], rn3_16.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus(rn3_16.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear(rn3_16.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution(rn3_17.c1.c.W[64 x 576], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization(rn3_17.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c1.c.c.sc[64 x 1], rn3_17.c1.c.c.b[64 x 1], rn3_17.c1.c.c.m[64 x 1], rn3_17.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear(rn3_17.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution(rn3_17.c2.W[64 x 576], rn3_17.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization(rn3_17.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c2.c.sc[64 x 1], rn3_17.c2.c.b[64 x 1], rn3_17.c2.c.m[64 x 1], rn3_17.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus(rn3_17.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear(rn3_17.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution(rn3_18.c1.c.W[64 x 576], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization(rn3_18.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c1.c.c.sc[64 x 1], rn3_18.c1.c.c.b[64 x 1], rn3_18.c1.c.c.m[64 x 1], rn3_18.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear(rn3_18.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution(rn3_18.c2.W[64 x 576], rn3_18.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization(rn3_18.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c2.c.sc[64 x 1], rn3_18.c2.c.b[64 x 1], rn3_18.c2.c.m[64 x 1], rn3_18.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus(rn3_18.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear(rn3_18.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling(rn3_18.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[10 x 64], pool[1 x 1 x 64 x *]) -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter -> [10]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10 x *], OutputNodes.b[10]) -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[10 x *], OutputNodes.z[10 x *]) -> [1]
Validating --> Err = ErrorPrediction(labels[10 x *], OutputNodes.z[10 x *]) -> [1]

Validating network, final pass.

Validating --> labels = InputValue -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter -> [16 x 27]
Validating --> features = InputValue -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[16 x 27], features[32 x 32 x 3 x * {W=32, H=3, C=32}]) -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.c.c.sc[16 x 1], conv1.c.c.b[16 x 1], conv1.c.c.m[16 x 1], conv1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[16 x 144], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c1.c.c.sc[16 x 1], rn1_1.c1.c.c.b[16 x 1], rn1_1.c1.c.c.m[16 x 1], rn1_1.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[16 x 144], rn1_1.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.c2.c.sc[16 x 1], rn1_1.c2.c.b[16 x 1], rn1_1.c2.c.m[16 x 1], rn1_1.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], conv1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[16 x 144], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c1.c.c.sc[16 x 1], rn1_2.c1.c.c.b[16 x 1], rn1_2.c1.c.c.m[16 x 1], rn1_2.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[16 x 144], rn1_2.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.c2.c.sc[16 x 1], rn1_2.c2.c.b[16 x 1], rn1_2.c2.c.m[16 x 1], rn1_2.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[16 x 144], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c1.c.c.sc[16 x 1], rn1_3.c1.c.c.b[16 x 1], rn1_3.c1.c.c.m[16 x 1], rn1_3.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[16 x 144], rn1_3.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.c2.c.sc[16 x 1], rn1_3.c2.c.b[16 x 1], rn1_3.c2.c.m[16 x 1], rn1_3.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_2.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution(rn1_4.c1.c.W[16 x 144], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization(rn1_4.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c1.c.c.sc[16 x 1], rn1_4.c1.c.c.b[16 x 1], rn1_4.c1.c.c.m[16 x 1], rn1_4.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear(rn1_4.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution(rn1_4.c2.W[16 x 144], rn1_4.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization(rn1_4.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.c2.c.sc[16 x 1], rn1_4.c2.c.b[16 x 1], rn1_4.c2.c.m[16 x 1], rn1_4.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus(rn1_4.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_3.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear(rn1_4.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution(rn1_5.c1.c.W[16 x 144], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization(rn1_5.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c1.c.c.sc[16 x 1], rn1_5.c1.c.c.b[16 x 1], rn1_5.c1.c.c.m[16 x 1], rn1_5.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear(rn1_5.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution(rn1_5.c2.W[16 x 144], rn1_5.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization(rn1_5.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.c2.c.sc[16 x 1], rn1_5.c2.c.b[16 x 1], rn1_5.c2.c.m[16 x 1], rn1_5.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus(rn1_5.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_4.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear(rn1_5.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution(rn1_6.c1.c.W[16 x 144], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization(rn1_6.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c1.c.c.sc[16 x 1], rn1_6.c1.c.c.b[16 x 1], rn1_6.c1.c.c.m[16 x 1], rn1_6.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear(rn1_6.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution(rn1_6.c2.W[16 x 144], rn1_6.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization(rn1_6.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.c2.c.sc[16 x 1], rn1_6.c2.c.b[16 x 1], rn1_6.c2.c.m[16 x 1], rn1_6.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus(rn1_6.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_5.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear(rn1_6.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution(rn1_7.c1.c.W[16 x 144], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization(rn1_7.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c1.c.c.sc[16 x 1], rn1_7.c1.c.c.b[16 x 1], rn1_7.c1.c.c.m[16 x 1], rn1_7.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear(rn1_7.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution(rn1_7.c2.W[16 x 144], rn1_7.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization(rn1_7.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.c2.c.sc[16 x 1], rn1_7.c2.c.b[16 x 1], rn1_7.c2.c.m[16 x 1], rn1_7.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus(rn1_7.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_6.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear(rn1_7.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution(rn1_8.c1.c.W[16 x 144], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization(rn1_8.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c1.c.c.sc[16 x 1], rn1_8.c1.c.c.b[16 x 1], rn1_8.c1.c.c.m[16 x 1], rn1_8.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear(rn1_8.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution(rn1_8.c2.W[16 x 144], rn1_8.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization(rn1_8.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.c2.c.sc[16 x 1], rn1_8.c2.c.b[16 x 1], rn1_8.c2.c.m[16 x 1], rn1_8.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus(rn1_8.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_7.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear(rn1_8.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution(rn1_9.c1.c.W[16 x 144], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization(rn1_9.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c1.c.c.sc[16 x 1], rn1_9.c1.c.c.b[16 x 1], rn1_9.c1.c.c.m[16 x 1], rn1_9.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear(rn1_9.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution(rn1_9.c2.W[16 x 144], rn1_9.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization(rn1_9.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.c2.c.sc[16 x 1], rn1_9.c2.c.b[16 x 1], rn1_9.c2.c.m[16 x 1], rn1_9.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus(rn1_9.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_8.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear(rn1_9.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution(rn1_10.c1.c.W[16 x 144], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization(rn1_10.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c1.c.c.sc[16 x 1], rn1_10.c1.c.c.b[16 x 1], rn1_10.c1.c.c.m[16 x 1], rn1_10.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear(rn1_10.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution(rn1_10.c2.W[16 x 144], rn1_10.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization(rn1_10.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.c2.c.sc[16 x 1], rn1_10.c2.c.b[16 x 1], rn1_10.c2.c.m[16 x 1], rn1_10.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus(rn1_10.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_9.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear(rn1_10.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution(rn1_11.c1.c.W[16 x 144], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization(rn1_11.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c1.c.c.sc[16 x 1], rn1_11.c1.c.c.b[16 x 1], rn1_11.c1.c.c.m[16 x 1], rn1_11.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear(rn1_11.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution(rn1_11.c2.W[16 x 144], rn1_11.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization(rn1_11.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.c2.c.sc[16 x 1], rn1_11.c2.c.b[16 x 1], rn1_11.c2.c.m[16 x 1], rn1_11.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus(rn1_11.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_10.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear(rn1_11.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution(rn1_12.c1.c.W[16 x 144], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization(rn1_12.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c1.c.c.sc[16 x 1], rn1_12.c1.c.c.b[16 x 1], rn1_12.c1.c.c.m[16 x 1], rn1_12.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear(rn1_12.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution(rn1_12.c2.W[16 x 144], rn1_12.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization(rn1_12.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.c2.c.sc[16 x 1], rn1_12.c2.c.b[16 x 1], rn1_12.c2.c.m[16 x 1], rn1_12.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus(rn1_12.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_11.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear(rn1_12.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution(rn1_13.c1.c.W[16 x 144], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization(rn1_13.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c1.c.c.sc[16 x 1], rn1_13.c1.c.c.b[16 x 1], rn1_13.c1.c.c.m[16 x 1], rn1_13.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear(rn1_13.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution(rn1_13.c2.W[16 x 144], rn1_13.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization(rn1_13.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.c2.c.sc[16 x 1], rn1_13.c2.c.b[16 x 1], rn1_13.c2.c.m[16 x 1], rn1_13.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus(rn1_13.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_12.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear(rn1_13.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution(rn1_14.c1.c.W[16 x 144], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization(rn1_14.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c1.c.c.sc[16 x 1], rn1_14.c1.c.c.b[16 x 1], rn1_14.c1.c.c.m[16 x 1], rn1_14.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear(rn1_14.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution(rn1_14.c2.W[16 x 144], rn1_14.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization(rn1_14.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.c2.c.sc[16 x 1], rn1_14.c2.c.b[16 x 1], rn1_14.c2.c.m[16 x 1], rn1_14.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus(rn1_14.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_13.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear(rn1_14.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution(rn1_15.c1.c.W[16 x 144], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization(rn1_15.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c1.c.c.sc[16 x 1], rn1_15.c1.c.c.b[16 x 1], rn1_15.c1.c.c.m[16 x 1], rn1_15.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear(rn1_15.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution(rn1_15.c2.W[16 x 144], rn1_15.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization(rn1_15.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.c2.c.sc[16 x 1], rn1_15.c2.c.b[16 x 1], rn1_15.c2.c.m[16 x 1], rn1_15.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus(rn1_15.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_14.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear(rn1_15.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution(rn1_16.c1.c.W[16 x 144], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization(rn1_16.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c1.c.c.sc[16 x 1], rn1_16.c1.c.c.b[16 x 1], rn1_16.c1.c.c.m[16 x 1], rn1_16.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear(rn1_16.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution(rn1_16.c2.W[16 x 144], rn1_16.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization(rn1_16.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.c2.c.sc[16 x 1], rn1_16.c2.c.b[16 x 1], rn1_16.c2.c.m[16 x 1], rn1_16.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus(rn1_16.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_15.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear(rn1_16.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution(rn1_17.c1.c.W[16 x 144], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization(rn1_17.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c1.c.c.sc[16 x 1], rn1_17.c1.c.c.b[16 x 1], rn1_17.c1.c.c.m[16 x 1], rn1_17.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear(rn1_17.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution(rn1_17.c2.W[16 x 144], rn1_17.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization(rn1_17.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.c2.c.sc[16 x 1], rn1_17.c2.c.b[16 x 1], rn1_17.c2.c.m[16 x 1], rn1_17.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus(rn1_17.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_16.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear(rn1_17.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution(rn1_18.c1.c.W[16 x 144], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization(rn1_18.c1.c.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c1.c.c.sc[16 x 1], rn1_18.c1.c.c.b[16 x 1], rn1_18.c1.c.c.m[16 x 1], rn1_18.c1.c.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear(rn1_18.c1.c.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution(rn1_18.c2.W[16 x 144], rn1_18.c1.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization(rn1_18.c2.c.c[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_18.c2.c.sc[16 x 1], rn1_18.c2.c.b[16 x 1], rn1_18.c2.c.m[16 x 1], rn1_18.c2.c.isd[16 x 1]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus(rn1_18.c2.c.y[32 x 32 x 16 x * {W=32, H=16, C=32}], rn1_17.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear(rn1_18.p[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[32 x 144], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c1.c.c.sc[32 x 1], rn2_1.c1.c.c.b[32 x 1], rn2_1.c1.c.c.m[32 x 1], rn2_1.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[32 x 288], rn2_1.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c2.c.sc[32 x 1], rn2_1.c2.c.b[32 x 1], rn2_1.c2.c.m[32 x 1], rn2_1.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[32 x 16], rn1_18.y[32 x 32 x 16 x * {W=32, H=16, C=32}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.sc[32 x 1], rn2_1.c_proj.b[32 x 1], rn2_1.c_proj.m[32 x 1], rn2_1.c_proj.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.c_proj.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear(rn2_1.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[32 x 288], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c1.c.c.sc[32 x 1], rn2_2.c1.c.c.b[32 x 1], rn2_2.c1.c.c.m[32 x 1], rn2_2.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[32 x 288], rn2_2.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.c2.c.sc[32 x 1], rn2_2.c2.c.b[32 x 1], rn2_2.c2.c.m[32 x 1], rn2_2.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[32 x 288], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c1.c.c.sc[32 x 1], rn2_3.c1.c.c.b[32 x 1], rn2_3.c1.c.c.m[32 x 1], rn2_3.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[32 x 288], rn2_3.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.c2.c.sc[32 x 1], rn2_3.c2.c.b[32 x 1], rn2_3.c2.c.m[32 x 1], rn2_3.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_2.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[32 x 288], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c1.c.c.sc[32 x 1], rn2_4.c1.c.c.b[32 x 1], rn2_4.c1.c.c.m[32 x 1], rn2_4.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[32 x 288], rn2_4.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.c2.c.sc[32 x 1], rn2_4.c2.c.b[32 x 1], rn2_4.c2.c.m[32 x 1], rn2_4.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_3.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution(rn2_5.c1.c.W[32 x 288], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization(rn2_5.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c1.c.c.sc[32 x 1], rn2_5.c1.c.c.b[32 x 1], rn2_5.c1.c.c.m[32 x 1], rn2_5.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear(rn2_5.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution(rn2_5.c2.W[32 x 288], rn2_5.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization(rn2_5.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.c2.c.sc[32 x 1], rn2_5.c2.c.b[32 x 1], rn2_5.c2.c.m[32 x 1], rn2_5.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus(rn2_5.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_4.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear(rn2_5.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution(rn2_6.c1.c.W[32 x 288], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization(rn2_6.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c1.c.c.sc[32 x 1], rn2_6.c1.c.c.b[32 x 1], rn2_6.c1.c.c.m[32 x 1], rn2_6.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear(rn2_6.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution(rn2_6.c2.W[32 x 288], rn2_6.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization(rn2_6.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.c2.c.sc[32 x 1], rn2_6.c2.c.b[32 x 1], rn2_6.c2.c.m[32 x 1], rn2_6.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus(rn2_6.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_5.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear(rn2_6.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution(rn2_7.c1.c.W[32 x 288], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization(rn2_7.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c1.c.c.sc[32 x 1], rn2_7.c1.c.c.b[32 x 1], rn2_7.c1.c.c.m[32 x 1], rn2_7.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear(rn2_7.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution(rn2_7.c2.W[32 x 288], rn2_7.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization(rn2_7.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.c2.c.sc[32 x 1], rn2_7.c2.c.b[32 x 1], rn2_7.c2.c.m[32 x 1], rn2_7.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus(rn2_7.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_6.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear(rn2_7.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution(rn2_8.c1.c.W[32 x 288], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization(rn2_8.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c1.c.c.sc[32 x 1], rn2_8.c1.c.c.b[32 x 1], rn2_8.c1.c.c.m[32 x 1], rn2_8.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear(rn2_8.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution(rn2_8.c2.W[32 x 288], rn2_8.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization(rn2_8.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.c2.c.sc[32 x 1], rn2_8.c2.c.b[32 x 1], rn2_8.c2.c.m[32 x 1], rn2_8.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus(rn2_8.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_7.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear(rn2_8.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution(rn2_9.c1.c.W[32 x 288], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization(rn2_9.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c1.c.c.sc[32 x 1], rn2_9.c1.c.c.b[32 x 1], rn2_9.c1.c.c.m[32 x 1], rn2_9.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear(rn2_9.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution(rn2_9.c2.W[32 x 288], rn2_9.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization(rn2_9.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.c2.c.sc[32 x 1], rn2_9.c2.c.b[32 x 1], rn2_9.c2.c.m[32 x 1], rn2_9.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus(rn2_9.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_8.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear(rn2_9.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution(rn2_10.c1.c.W[32 x 288], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization(rn2_10.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c1.c.c.sc[32 x 1], rn2_10.c1.c.c.b[32 x 1], rn2_10.c1.c.c.m[32 x 1], rn2_10.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear(rn2_10.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution(rn2_10.c2.W[32 x 288], rn2_10.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization(rn2_10.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.c2.c.sc[32 x 1], rn2_10.c2.c.b[32 x 1], rn2_10.c2.c.m[32 x 1], rn2_10.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus(rn2_10.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_9.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear(rn2_10.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution(rn2_11.c1.c.W[32 x 288], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization(rn2_11.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c1.c.c.sc[32 x 1], rn2_11.c1.c.c.b[32 x 1], rn2_11.c1.c.c.m[32 x 1], rn2_11.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear(rn2_11.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution(rn2_11.c2.W[32 x 288], rn2_11.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization(rn2_11.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.c2.c.sc[32 x 1], rn2_11.c2.c.b[32 x 1], rn2_11.c2.c.m[32 x 1], rn2_11.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus(rn2_11.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_10.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear(rn2_11.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution(rn2_12.c1.c.W[32 x 288], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization(rn2_12.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c1.c.c.sc[32 x 1], rn2_12.c1.c.c.b[32 x 1], rn2_12.c1.c.c.m[32 x 1], rn2_12.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear(rn2_12.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution(rn2_12.c2.W[32 x 288], rn2_12.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization(rn2_12.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.c2.c.sc[32 x 1], rn2_12.c2.c.b[32 x 1], rn2_12.c2.c.m[32 x 1], rn2_12.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus(rn2_12.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_11.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear(rn2_12.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution(rn2_13.c1.c.W[32 x 288], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization(rn2_13.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c1.c.c.sc[32 x 1], rn2_13.c1.c.c.b[32 x 1], rn2_13.c1.c.c.m[32 x 1], rn2_13.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear(rn2_13.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution(rn2_13.c2.W[32 x 288], rn2_13.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization(rn2_13.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.c2.c.sc[32 x 1], rn2_13.c2.c.b[32 x 1], rn2_13.c2.c.m[32 x 1], rn2_13.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus(rn2_13.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_12.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear(rn2_13.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution(rn2_14.c1.c.W[32 x 288], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization(rn2_14.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c1.c.c.sc[32 x 1], rn2_14.c1.c.c.b[32 x 1], rn2_14.c1.c.c.m[32 x 1], rn2_14.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear(rn2_14.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution(rn2_14.c2.W[32 x 288], rn2_14.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization(rn2_14.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.c2.c.sc[32 x 1], rn2_14.c2.c.b[32 x 1], rn2_14.c2.c.m[32 x 1], rn2_14.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus(rn2_14.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_13.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear(rn2_14.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution(rn2_15.c1.c.W[32 x 288], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization(rn2_15.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c1.c.c.sc[32 x 1], rn2_15.c1.c.c.b[32 x 1], rn2_15.c1.c.c.m[32 x 1], rn2_15.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear(rn2_15.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution(rn2_15.c2.W[32 x 288], rn2_15.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization(rn2_15.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.c2.c.sc[32 x 1], rn2_15.c2.c.b[32 x 1], rn2_15.c2.c.m[32 x 1], rn2_15.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus(rn2_15.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_14.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear(rn2_15.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution(rn2_16.c1.c.W[32 x 288], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization(rn2_16.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c1.c.c.sc[32 x 1], rn2_16.c1.c.c.b[32 x 1], rn2_16.c1.c.c.m[32 x 1], rn2_16.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear(rn2_16.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution(rn2_16.c2.W[32 x 288], rn2_16.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization(rn2_16.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.c2.c.sc[32 x 1], rn2_16.c2.c.b[32 x 1], rn2_16.c2.c.m[32 x 1], rn2_16.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus(rn2_16.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_15.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear(rn2_16.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution(rn2_17.c1.c.W[32 x 288], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization(rn2_17.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c1.c.c.sc[32 x 1], rn2_17.c1.c.c.b[32 x 1], rn2_17.c1.c.c.m[32 x 1], rn2_17.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear(rn2_17.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution(rn2_17.c2.W[32 x 288], rn2_17.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization(rn2_17.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.c2.c.sc[32 x 1], rn2_17.c2.c.b[32 x 1], rn2_17.c2.c.m[32 x 1], rn2_17.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus(rn2_17.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_16.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear(rn2_17.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution(rn2_18.c1.c.W[32 x 288], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization(rn2_18.c1.c.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c1.c.c.sc[32 x 1], rn2_18.c1.c.c.b[32 x 1], rn2_18.c1.c.c.m[32 x 1], rn2_18.c1.c.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear(rn2_18.c1.c.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution(rn2_18.c2.W[32 x 288], rn2_18.c1.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization(rn2_18.c2.c.c[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_18.c2.c.sc[32 x 1], rn2_18.c2.c.b[32 x 1], rn2_18.c2.c.m[32 x 1], rn2_18.c2.c.isd[32 x 1]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus(rn2_18.c2.c.y[16 x 16 x 32 x * {W=16, H=32, C=16}], rn2_17.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear(rn2_18.p[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[64 x 288], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c1.c.c.sc[64 x 1], rn3_1.c1.c.c.b[64 x 1], rn3_1.c1.c.c.m[64 x 1], rn3_1.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[64 x 576], rn3_1.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c2.c.sc[64 x 1], rn3_1.c2.c.b[64 x 1], rn3_1.c2.c.m[64 x 1], rn3_1.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[64 x 32], rn2_18.y[16 x 16 x 32 x * {W=16, H=32, C=16}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.sc[64 x 1], rn3_1.c_proj.b[64 x 1], rn3_1.c_proj.m[64 x 1], rn3_1.c_proj.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.c_proj.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear(rn3_1.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[64 x 576], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c1.c.c.sc[64 x 1], rn3_2.c1.c.c.b[64 x 1], rn3_2.c1.c.c.m[64 x 1], rn3_2.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[64 x 576], rn3_2.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.c2.c.sc[64 x 1], rn3_2.c2.c.b[64 x 1], rn3_2.c2.c.m[64 x 1], rn3_2.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[64 x 576], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c1.c.c.sc[64 x 1], rn3_3.c1.c.c.b[64 x 1], rn3_3.c1.c.c.m[64 x 1], rn3_3.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[64 x 576], rn3_3.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.c2.c.sc[64 x 1], rn3_3.c2.c.b[64 x 1], rn3_3.c2.c.m[64 x 1], rn3_3.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_2.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[64 x 576], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c1.c.c.sc[64 x 1], rn3_4.c1.c.c.b[64 x 1], rn3_4.c1.c.c.m[64 x 1], rn3_4.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[64 x 576], rn3_4.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.c2.c.sc[64 x 1], rn3_4.c2.c.b[64 x 1], rn3_4.c2.c.m[64 x 1], rn3_4.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_3.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[64 x 576], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c1.c.c.sc[64 x 1], rn3_5.c1.c.c.b[64 x 1], rn3_5.c1.c.c.m[64 x 1], rn3_5.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[64 x 576], rn3_5.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.c2.c.sc[64 x 1], rn3_5.c2.c.b[64 x 1], rn3_5.c2.c.m[64 x 1], rn3_5.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_4.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[64 x 576], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c1.c.c.sc[64 x 1], rn3_6.c1.c.c.b[64 x 1], rn3_6.c1.c.c.m[64 x 1], rn3_6.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[64 x 576], rn3_6.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.c2.c.sc[64 x 1], rn3_6.c2.c.b[64 x 1], rn3_6.c2.c.m[64 x 1], rn3_6.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_5.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution(rn3_7.c1.c.W[64 x 576], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization(rn3_7.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c1.c.c.sc[64 x 1], rn3_7.c1.c.c.b[64 x 1], rn3_7.c1.c.c.m[64 x 1], rn3_7.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear(rn3_7.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution(rn3_7.c2.W[64 x 576], rn3_7.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization(rn3_7.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.c2.c.sc[64 x 1], rn3_7.c2.c.b[64 x 1], rn3_7.c2.c.m[64 x 1], rn3_7.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus(rn3_7.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_6.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear(rn3_7.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution(rn3_8.c1.c.W[64 x 576], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization(rn3_8.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c1.c.c.sc[64 x 1], rn3_8.c1.c.c.b[64 x 1], rn3_8.c1.c.c.m[64 x 1], rn3_8.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear(rn3_8.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution(rn3_8.c2.W[64 x 576], rn3_8.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization(rn3_8.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.c2.c.sc[64 x 1], rn3_8.c2.c.b[64 x 1], rn3_8.c2.c.m[64 x 1], rn3_8.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus(rn3_8.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_7.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear(rn3_8.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution(rn3_9.c1.c.W[64 x 576], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization(rn3_9.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c1.c.c.sc[64 x 1], rn3_9.c1.c.c.b[64 x 1], rn3_9.c1.c.c.m[64 x 1], rn3_9.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear(rn3_9.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution(rn3_9.c2.W[64 x 576], rn3_9.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization(rn3_9.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.c2.c.sc[64 x 1], rn3_9.c2.c.b[64 x 1], rn3_9.c2.c.m[64 x 1], rn3_9.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus(rn3_9.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_8.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear(rn3_9.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution(rn3_10.c1.c.W[64 x 576], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization(rn3_10.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c1.c.c.sc[64 x 1], rn3_10.c1.c.c.b[64 x 1], rn3_10.c1.c.c.m[64 x 1], rn3_10.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear(rn3_10.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution(rn3_10.c2.W[64 x 576], rn3_10.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization(rn3_10.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.c2.c.sc[64 x 1], rn3_10.c2.c.b[64 x 1], rn3_10.c2.c.m[64 x 1], rn3_10.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus(rn3_10.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_9.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear(rn3_10.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution(rn3_11.c1.c.W[64 x 576], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization(rn3_11.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c1.c.c.sc[64 x 1], rn3_11.c1.c.c.b[64 x 1], rn3_11.c1.c.c.m[64 x 1], rn3_11.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear(rn3_11.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution(rn3_11.c2.W[64 x 576], rn3_11.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization(rn3_11.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.c2.c.sc[64 x 1], rn3_11.c2.c.b[64 x 1], rn3_11.c2.c.m[64 x 1], rn3_11.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus(rn3_11.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_10.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear(rn3_11.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution(rn3_12.c1.c.W[64 x 576], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization(rn3_12.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c1.c.c.sc[64 x 1], rn3_12.c1.c.c.b[64 x 1], rn3_12.c1.c.c.m[64 x 1], rn3_12.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear(rn3_12.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution(rn3_12.c2.W[64 x 576], rn3_12.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization(rn3_12.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.c2.c.sc[64 x 1], rn3_12.c2.c.b[64 x 1], rn3_12.c2.c.m[64 x 1], rn3_12.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus(rn3_12.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_11.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear(rn3_12.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution(rn3_13.c1.c.W[64 x 576], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization(rn3_13.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c1.c.c.sc[64 x 1], rn3_13.c1.c.c.b[64 x 1], rn3_13.c1.c.c.m[64 x 1], rn3_13.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear(rn3_13.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution(rn3_13.c2.W[64 x 576], rn3_13.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization(rn3_13.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.c2.c.sc[64 x 1], rn3_13.c2.c.b[64 x 1], rn3_13.c2.c.m[64 x 1], rn3_13.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus(rn3_13.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_12.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear(rn3_13.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution(rn3_14.c1.c.W[64 x 576], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization(rn3_14.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c1.c.c.sc[64 x 1], rn3_14.c1.c.c.b[64 x 1], rn3_14.c1.c.c.m[64 x 1], rn3_14.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear(rn3_14.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution(rn3_14.c2.W[64 x 576], rn3_14.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization(rn3_14.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.c2.c.sc[64 x 1], rn3_14.c2.c.b[64 x 1], rn3_14.c2.c.m[64 x 1], rn3_14.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus(rn3_14.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_13.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear(rn3_14.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution(rn3_15.c1.c.W[64 x 576], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization(rn3_15.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c1.c.c.sc[64 x 1], rn3_15.c1.c.c.b[64 x 1], rn3_15.c1.c.c.m[64 x 1], rn3_15.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear(rn3_15.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution(rn3_15.c2.W[64 x 576], rn3_15.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization(rn3_15.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.c2.c.sc[64 x 1], rn3_15.c2.c.b[64 x 1], rn3_15.c2.c.m[64 x 1], rn3_15.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus(rn3_15.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_14.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear(rn3_15.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution(rn3_16.c1.c.W[64 x 576], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization(rn3_16.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c1.c.c.sc[64 x 1], rn3_16.c1.c.c.b[64 x 1], rn3_16.c1.c.c.m[64 x 1], rn3_16.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear(rn3_16.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution(rn3_16.c2.W[64 x 576], rn3_16.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization(rn3_16.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.c2.c.sc[64 x 1], rn3_16.c2.c.b[64 x 1], rn3_16.c2.c.m[64 x 1], rn3_16.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus(rn3_16.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_15.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear(rn3_16.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution(rn3_17.c1.c.W[64 x 576], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization(rn3_17.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c1.c.c.sc[64 x 1], rn3_17.c1.c.c.b[64 x 1], rn3_17.c1.c.c.m[64 x 1], rn3_17.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear(rn3_17.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution(rn3_17.c2.W[64 x 576], rn3_17.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization(rn3_17.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.c2.c.sc[64 x 1], rn3_17.c2.c.b[64 x 1], rn3_17.c2.c.m[64 x 1], rn3_17.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus(rn3_17.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_16.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear(rn3_17.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution(rn3_18.c1.c.W[64 x 576], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization(rn3_18.c1.c.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c1.c.c.sc[64 x 1], rn3_18.c1.c.c.b[64 x 1], rn3_18.c1.c.c.m[64 x 1], rn3_18.c1.c.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear(rn3_18.c1.c.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution(rn3_18.c2.W[64 x 576], rn3_18.c1.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization(rn3_18.c2.c.c[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_18.c2.c.sc[64 x 1], rn3_18.c2.c.b[64 x 1], rn3_18.c2.c.m[64 x 1], rn3_18.c2.c.isd[64 x 1]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus(rn3_18.c2.c.y[8 x 8 x 64 x * {W=8, H=64, C=8}], rn3_17.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear(rn3_18.p[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling(rn3_18.y[8 x 8 x 64 x * {W=8, H=64, C=8}]) -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[10 x 64], pool[1 x 1 x 64 x *]) -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter -> [10]
Validating --> OutputNodes.z = Plus(OutputNodes.t[10 x *], OutputNodes.b[10]) -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[10 x *], OutputNodes.z[10 x *]) -> [1]
Validating --> Err = ErrorPrediction(labels[10 x *], OutputNodes.z[10 x *]) -> [1]

559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.
evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
Minibatch[1-20]: Samples Seen = 10000    Err: ErrorPrediction/Sample = 0.0644    CE: CrossEntropyWithSoftmax/Sample = 0.3034767    
Final Results: Minibatch[1-20]: Samples Seen = 10000    Err: ErrorPrediction/Sample = 0.0644    CE: CrossEntropyWithSoftmax/Sample = 0.3034767    Perplexity = 1.35456    
COMPLETED
